<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" url="q02.tar.gz">

<unit revision="0.9.5" language="Java" filename="q02/Food.java" hash="5df0bc297c7009d83717c7e91d5803ba39b764d2"><package>package <name><name>list03</name><operator>.</operator><name>q02</name></name>;</package>

<class><specifier>public</specifier> class <name>Food</name> <super><extends>extends <name>Product</name></extends></super> <block>{

	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>DISCOUNT</name> <init>= <expr><literal type="number">0.5</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>hasGluten</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>Food</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>basePrice</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hasGluten</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>basePrice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>hasGluten</name></name> <operator>=</operator> <name>hasGluten</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>double</name></type> <name>buy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>double</name></type> <name>fullPrice</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>buy</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>hasGluten</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>fullPrice</name> <operator>=</operator> <name>fullPrice</name> <operator>*</operator> <name>DISCOUNT</name></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><name>fullPrice</name></expr>;</return>
		
	}</block></function>
	
	
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="q02/Cleaning.java" hash="082049c11ddd7eed2aec45750e05dfea9f6dc138"><package>package <name><name>list03</name><operator>.</operator><name>q02</name></name>;</package>

<class><specifier>public</specifier> class <name>Cleaning</name> <super><extends>extends <name>Product</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MINIMAL_AMOUNT_DISCOUNT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>CLEANING_DISC</name> <init>= <expr><literal type="number">0.1</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>Cleaning</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>basePrice</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>basePrice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>double</name></type> <name>buy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>double</name></type> <name>fullPrice</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>buy</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>amount</name> <operator>&gt;</operator> <name>MINIMAL_AMOUNT_DISCOUNT</name></expr>)</condition><then> <block>{
			
			<decl_stmt><decl><type><name>int</name></type> <name>extra</name> <init>= <expr><name>amount</name> <operator>-</operator> <name>MINIMAL_AMOUNT_DISCOUNT</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>fullPrice</name> <operator>=</operator> <name>fullPrice</name> <operator>-</operator> <operator>(</operator><name>CLEANING_DISC</name> <operator>*</operator> <name>extra</name> <operator>*</operator> <name>fullPrice</name><operator>)</operator></expr>;</expr_stmt>			
		}</block></then></if>
		<return>return <expr><name>fullPrice</name></expr>;</return>
	}</block></function>
	
	
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="q02/MainProduct.java" hash="be4e34f88b0d1861a61ab66418c0e6cae628dd6e"><package>package <name><name>list03</name><operator>.</operator><name>q02</name></name>;</package>

<class><specifier>public</specifier> class <name>MainProduct</name> <block>{

	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Product</name></type> <name>detergent</name> <init>= <expr><operator>new</operator> <call><name>Cleaning</name><argument_list>(<argument><expr><literal type="string">"Detergent"</literal></expr></argument>, <argument><expr><literal type="number">30.50</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Product</name></type> <name>quinoaBread</name> <init>= <expr><operator>new</operator> <call><name>Food</name><argument_list>(<argument><expr><literal type="string">"Quinoa Bread"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>Product</name></type> <name>chips</name> <init>= <expr><operator>new</operator> <call><name>Food</name><argument_list>(<argument><expr><literal type="string">"Chips"</literal></expr></argument>, <argument><expr><literal type="number">20.00</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>detergent</name><operator>.</operator><name>buy</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>detergent</name><operator>.</operator><name>buy</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>quinoaBread</name><operator>.</operator><name>buy</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>chips</name><operator>.</operator><name>buy</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<comment type="line">//Composition</comment>
		<decl_stmt><decl><type><name>ShoppingCart</name></type> <name>cart</name> <init>= <expr><operator>new</operator> <call><name>ShoppingCart</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
		<decl_stmt><decl><type><name>Product</name></type> <name>pasta</name> <init>= <expr><operator>new</operator> <call><name>Food</name><argument_list>(<argument><expr><literal type="string">"pasta"</literal></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument> ,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Product</name></type> <name>quinoaBreadGlutenFree</name> <init>= <expr><operator>new</operator> <call><name>Food</name><argument_list>(<argument><expr><literal type="string">"Quinoa Bread"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>cart</name><operator>.</operator><name>AddProduct</name></name><argument_list>(<argument><expr><name>quinoaBreadGlutenFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cart</name><operator>.</operator><name>AddProduct</name></name><argument_list>(<argument><expr><name>detergent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cart</name><operator>.</operator><name>AddProduct</name></name><argument_list>(<argument><expr><name>pasta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>cart</name><operator>.</operator><name>calculateTotal</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="q02/Product.java" hash="9265ba03c24c3fb54aa321bc7f307822cc929cea"><package>package <name><name>list03</name><operator>.</operator><name>q02</name></name>;</package>

<class><specifier>public</specifier> class <name>Product</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>double</name></type> <name>basePrice</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>Product</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>basePrice</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>basePrice</name></name> <operator>=</operator> <name>basePrice</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>double</name></type> <name>buy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>double</name></type> <name>totalPrice</name> <init>= <expr><name><name>this</name><operator>.</operator><name>basePrice</name></name> <operator>*</operator> <name>amount</name></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>totalPrice</name></expr>;</return>
	}</block></function>	
	
	<comment type="line">//getters and setters</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>name</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>double</name></type> <name>getBasePrice</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>basePrice</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setBasePrice</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>basePrice</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>basePrice</name></name> <operator>=</operator> <name>basePrice</name></expr>;</expr_stmt>
	}</block></function>
	
	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">" costs "</literal><operator>+</operator><call><name><name>this</name><operator>.</operator><name>getBasePrice</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
		<return>return <expr><name>result</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="q02/ShoppingCart.java" hash="e77b7a06074edfeeb50f32640e966bfcdd484e98"><package>package <name><name>list03</name><operator>.</operator><name>q02</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>ShoppingCart</name> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name> <argument_list type="generic">&lt;<argument><name>Product</name></argument>&gt;</argument_list></name></type> <name>product</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>ShoppingCart</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>product</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Product</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>AddProduct</name><parameter_list>(<parameter><decl><type><name>Product</name></type> <name>product</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>product</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>product</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>DeleteProduct</name><parameter_list>(<parameter><decl><type><name>Product</name></type> <name>product</name></decl></parameter>)</parameter_list> <block>{
		<if>if<condition>(<expr><call><name>CheckProduct</name><argument_list>(<argument><expr><name>product</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>product</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>product</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>CheckProduct</name><parameter_list>(<parameter><decl><type><name>Product</name></type> <name>product</name></decl></parameter>)</parameter_list> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>product</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><call><name><name>this</name><operator>.</operator><name>product</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>product</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<return>return <expr><literal type="boolean">true</literal></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>double</name></type> <name>calculateTotal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numberOfProduct</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>double</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>product</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			 <expr_stmt><expr><name>cost</name> <operator>=</operator> <name>cost</name> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>product</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>buy</name><argument_list>(<argument><expr><name>numberOfProduct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<return>return <expr><name>cost</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

</unit>
