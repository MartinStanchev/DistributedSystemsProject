<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/UI/UICreater.java" hash="7b25a283556ddd75bbcd62b89a813f5678258a29"><package>package <name>UI</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics</name></name>;</import>

<class><specifier>public</specifier> class <name>UICreater</name> <block>{
	<decl_stmt><decl><type><name>Graph</name></type> <name>graph</name> <init>= <expr><operator>new</operator> <call><name>Graph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	  <function><specifier>public</specifier> <type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>Graphics</name></type> <name>g</name></decl></parameter>)</parameter_list> <block>{

	    <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>paint</name></name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/TechnicalServices/AudioClip1.java" hash="3fdddcf5b8b27cc04afec7de90a56409a24017cd"><package>package <name>TechnicalServices</name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>applet</name><operator>.</operator><name>Applet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>applet</name><operator>.</operator><name>AudioClip</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>

<class><specifier>public</specifier> class <name>AudioClip1</name> <super><extends>extends <name>Applet</name></extends></super> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>clipsLoaded</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>clipTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DELAY</name> <init>=  <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt> 
	<decl_stmt><decl><specifier>private</specifier> <type><name>AudioClip</name></type> <name>crashSound</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>AudioClip</name></type> <name>explosionSound</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>AudioClip</name></type> <name>fireSound</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>AudioClip</name></type> <name>missleSound</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>AudioClip</name></type> <name>saucerSound</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>AudioClip</name></type> <name>thrustersSound</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>AudioClip</name></type> <name>warpSound</name></decl>;</decl_stmt>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>loadSounds</name><parameter_list>()</parameter_list> <block>{

		  <comment type="line">// Load all sound clips by playing and immediately stopping them. Update</comment>
		  <comment type="line">// counter and total for display.</comment>

		  <try>try <block>{
		    <expr_stmt><expr><name>crashSound</name>     <operator>=</operator> <operator>(</operator><name>AudioClip</name><operator>)</operator><call><name>getAudioClip</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name>getCodeBase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"crash.au"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>clipTotal</name><operator>++</operator></expr>;</expr_stmt>
		    <expr_stmt><expr><name>explosionSound</name> <operator>=</operator> <operator>(</operator><name>AudioClip</name><operator>)</operator><call><name>getAudioClip</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name>getCodeBase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"explosion.au"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>clipTotal</name><operator>++</operator></expr>;</expr_stmt>
		    <expr_stmt><expr><name>fireSound</name>      <operator>=</operator> <operator>(</operator><name>AudioClip</name><operator>)</operator><call><name>getAudioClip</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name>getCodeBase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fire.au"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>clipTotal</name><operator>++</operator></expr>;</expr_stmt>
		    <expr_stmt><expr><name>missleSound</name>    <operator>=</operator> <operator>(</operator><name>AudioClip</name><operator>)</operator><call><name>getAudioClip</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name>getCodeBase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"missle.au"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>clipTotal</name><operator>++</operator></expr>;</expr_stmt>
		    <expr_stmt><expr><name>saucerSound</name>    <operator>=</operator> <operator>(</operator><name>AudioClip</name><operator>)</operator><call><name>getAudioClip</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name>getCodeBase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"saucer.au"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>clipTotal</name><operator>++</operator></expr>;</expr_stmt>
		    <expr_stmt><expr><name>thrustersSound</name> <operator>=</operator><operator>(</operator><name>AudioClip</name><operator>)</operator> <call><name>getAudioClip</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name>getCodeBase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"thrusters.au"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>clipTotal</name><operator>++</operator></expr>;</expr_stmt>
		    <expr_stmt><expr><name>warpSound</name>      <operator>=</operator> <operator>(</operator><name>AudioClip</name><operator>)</operator><call><name>getAudioClip</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name>getCodeBase</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"warp.au"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>clipTotal</name><operator>++</operator></expr>;</expr_stmt>
		  }</block>
		  <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{}</block></catch></try>
		  <try>try <block>{
		      <expr_stmt><expr><call><name><name>crashSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>     <expr_stmt><expr><call><name><name>crashSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>     <expr_stmt><expr><name>clipsLoaded</name><operator>++</operator></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sleep</name><argument_list>(<argument><expr><name>DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>explosionSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>explosionSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>clipsLoaded</name><operator>++</operator></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sleep</name><argument_list>(<argument><expr><name>DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>fireSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <expr_stmt><expr><call><name><name>fireSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <expr_stmt><expr><name>clipsLoaded</name><operator>++</operator></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sleep</name><argument_list>(<argument><expr><name>DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>missleSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    <expr_stmt><expr><call><name><name>missleSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    <expr_stmt><expr><name>clipsLoaded</name><operator>++</operator></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sleep</name><argument_list>(<argument><expr><name>DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>saucerSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    <expr_stmt><expr><call><name><name>saucerSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>    <expr_stmt><expr><name>clipsLoaded</name><operator>++</operator></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sleep</name><argument_list>(<argument><expr><name>DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>thrustersSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>thrustersSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>clipsLoaded</name><operator>++</operator></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sleep</name><argument_list>(<argument><expr><name>DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>warpSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <expr_stmt><expr><call><name><name>warpSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <expr_stmt><expr><name>clipsLoaded</name><operator>++</operator></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sleep</name><argument_list>(<argument><expr><name>DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block>
		    <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{}</block></catch></try>
		}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getClipsLoaded</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>clipsLoaded</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getClipTotal</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>clipTotal</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>AudioClip</name></type> <name>getCrashSound</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>crashSound</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>AudioClip</name></type> <name>getExplosionSound</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>explosionSound</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>AudioClip</name></type> <name>getFireSound</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>fireSound</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>AudioClip</name></type> <name>getMissleSound</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>missleSound</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>AudioClip</name></type> <name>getSaucerSound</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>saucerSound</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>AudioClip</name></type> <name>getThrustersSound</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>thrustersSound</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>AudioClip</name></type> <name>getWarpSound</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>warpSound</name></expr>;</return>
	}</block></function>
	
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/TechnicalServices/KeyInputs.java" hash="c8e4f83e8c879175f0be1b14a8810d35cf7a7535"><package>package <name>TechnicalServices</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>

<import>import <name><name>Application</name><operator>.</operator><name>information</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>AsteroidsSprite</name></name>;</import>

<class><specifier>public</specifier> class <name>KeyInputs</name> <block>{
	 <decl_stmt><decl><type><name>information</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>information</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>keyPressed</name><parameter_list>(<parameter><decl><type><name>KeyEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
	 
	  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
	
	  <comment type="line">// Check if any cursor keys have been pressed and set flags.</comment>
	
	  <if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_LEFT</name></name></expr>)</condition><then>
		  <block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	  <if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_RIGHT</name></name></expr>)</condition><then>
	    <block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>right</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	  <if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_UP</name></name></expr>)</condition><then>
	    <block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>up</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	  <if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_DOWN</name></name></expr>)</condition><then>
	    <block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>down</name></name> <operator>=</operator>  <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	
	  <if>if <condition>(<expr><operator>(</operator><name><name>info</name><operator>.</operator><name>up</name></name> <operator>||</operator> <name><name>info</name><operator>.</operator><name>down</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>active</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>thrustersPlaying</name></name></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>Asterodis</name><operator>.</operator><name>p</name></name></expr>)</condition><then>
	      <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>thrustersSound</name><operator>.</operator><name>loop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>thrustersPlaying</name></name><operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	  }</block></then></if>
	
	  <comment type="line">// Spacebar: fire a photon and start its counter.</comment>
	
	  <if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyChar</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>active</name></name></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name> <operator>&amp;</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>paused</name></name></expr>)</condition><then>
	      <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>fireSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photonTime</name></name> <operator>=</operator>  <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photonIndex</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>photonIndex</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>photonIndex</name></name> <operator>&gt;=</operator> <name><name>info</name><operator>.</operator><name>MAX_SHOTS</name></name></expr>)</condition><then>
	    	<block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>photonIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name><name>info</name><operator>.</operator><name>photonIndex</name></name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name><name>info</name><operator>.</operator><name>photonIndex</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name><name>info</name><operator>.</operator><name>photonIndex</name></name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name><name>info</name><operator>.</operator><name>photonIndex</name></name></expr>]</index></name><operator>.</operator><name>deltaX</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name> <operator>*</operator> <operator>-</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>angle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name><name>info</name><operator>.</operator><name>photonIndex</name></name></expr>]</index></name><operator>.</operator><name>deltaY</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name> <operator>*</operator>  <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>angle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  }</block></then></if>
	
	  <comment type="line">// Allow upper or lower case characters for remaining keys.</comment>
	
	  <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>Character</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getKeyChar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	  <comment type="line">// 'H' key: warp ship into hyperspace by moving to a random location and</comment>
	  <comment type="line">// starting counter.</comment>
	
	  <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'h'</literal> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>active</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>hyperCounter</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>hyperCounter</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>HYPER_COUNT</name></name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name> <operator>&amp;</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>paused</name></name></expr>)</condition><then>
	    	<block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>warpSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	  }</block></then></if>
	
	  <comment type="line">// 'P' key: toggle pause mode and start or stop any active looping sound</comment>
	  <comment type="line">// clips.</comment>
	
	  <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'p'</literal></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>paused</name></name></expr>)</condition><then> <block>{
	      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>misslePlaying</name></name></expr>)</condition><then>
	    	  <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missleSound</name><operator>.</operator><name>loop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>saucerPlaying</name></name></expr>)</condition><then>
	    	  <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>saucerSound</name><operator>.</operator><name>loop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>thrustersPlaying</name></name></expr>)</condition><then>
	    	  <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>thrustersSound</name><operator>.</operator><name>loop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	    }</block></then>
	    <else>else <block>{
	      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>misslePlaying</name></name></expr>)</condition><then>
	    	  <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missleSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>saucerPlaying</name></name></expr>)</condition><then>
	    	  <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>saucerSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>thrustersPlaying</name></name></expr>)</condition><then>
	    	  <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>thrustersSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	    }</block></else></if>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>paused</name></name> <operator>=</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>paused</name></name></expr>;</expr_stmt>
	  }</block></then></if>
	
	  <comment type="line">// 'M' key: toggle sound on or off and stop any looping sound clips.</comment>
	
	  <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>loaded</name></name></expr>)</condition><then> <block>{
	    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name></expr>)</condition><then> <block>{
	    	<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>crashSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>explosionSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>fireSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missleSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>saucerSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>thrustersSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>warpSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></then>
	    <else>else <block>{
	      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>misslePlaying</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>paused</name></name></expr>)</condition><then>
	    	  <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missleSound</name><operator>.</operator><name>loop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>saucerPlaying</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>paused</name></name></expr>)</condition><then>
	    	  <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>saucerSound</name><operator>.</operator><name>loop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>thrustersPlaying</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>paused</name></name></expr>)</condition><then>
	    	  <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>thrustersSound</name><operator>.</operator><name>loop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	    }</block></else></if>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>sound</name></name> <operator>=</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>sound</name></name></expr>;</expr_stmt>
	  }</block></then></if>
	
	  <comment type="line">// 'D' key: toggle graphics detail on or off.</comment>
	
	  <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'d'</literal></expr>)</condition><then>
		  <block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>detail</name></name> <operator>=</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>detail</name></name></expr>;</expr_stmt></block></then></if>
	
	  <comment type="line">// 'S' key: start the game, if not already in progress.</comment>
	
	  <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'s'</literal> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>loaded</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>playing</name></name></expr>)</condition><then>
		  <block type="pseudo"><expr_stmt><expr><call><name>initGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	
	  <comment type="line">// 'HOME' key: jump to web site (undocumented).</comment>
	
	  <if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_HOME</name></name></expr>)</condition><then>
	    <block type="pseudo"><try>try <block>{
	    	<expr_stmt><expr><call><name>getAppletContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>showDocument</name><argument_list>(<argument><expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>copyLink</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    }</block>
	    <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>excp</name></decl></parameter>)</parameter_list> <block>{}</block></catch></try></block></then></if>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>keyReleased</name><parameter_list>(<parameter><decl><type><name>KeyEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
	
	  <comment type="line">// Check if any cursor keys where released and set flags.</comment>
	
	  <if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_LEFT</name></name></expr>)</condition><then>
		  <block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>left</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
	  <if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_RIGHT</name></name></expr>)</condition><then>
		  <block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>right</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
	  <if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_UP</name></name></expr>)</condition><then>
		  <block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>up</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
	  <if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getKeyCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>VK_DOWN</name></name></expr>)</condition><then>
		  <block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>down</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
	
	  <if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>up</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>down</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>thrustersPlaying</name></name></expr>)</condition><then> <block>{
		  <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>thrustersSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>thrustersPlaying</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
	  }</block></then></if>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>keyTyped</name><parameter_list>(<parameter><decl><type><name>KeyEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>Graphics</name></type> <name>g</name></decl></parameter>)</parameter_list> <block>{
	
		<expr_stmt><expr><call><name>paint</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/Domain/Photons.java" hash="107255ed54b69fef01685ec2b99abf3e51c9e212"><package>package <name>Domain</name>;</package>
<import>import <name><name>Application</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>TechnicalServices</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>UI</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>Photons</name> <super><extends>extends <name>AsteroidsSprite</name></extends></super><block>{
	<decl_stmt><decl><type><name>information</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>information</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>initPhotons</name><parameter_list>(<parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>photons</name></decl></parameter>)</parameter_list> <block>{

		  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_SHOTS</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		    <block type="pseudo"><expr_stmt><expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></for>
		  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photonIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></function>

		<function><specifier>public</specifier> <type><name>void</name></type> <name>updatePhotons</name><parameter_list>(<parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>photons</name></decl></parameter>)</parameter_list> <block>{

		  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		  <comment type="line">// Move any active photons. Stop it when its counter has expired.</comment>

		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_SHOTS</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		    <block type="pseudo"><if>if <condition>(<expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><then> <block>{
		      <if>if <condition>(<expr><operator>!</operator><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>advance</name><argument_list>()</argument_list></call></expr>)</condition><then>
		        <block type="pseudo"><expr_stmt><expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>render</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
		      <else>else
		        <block type="pseudo"><expr_stmt><expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></else></if>
		    }</block></then></if></block></for>
		}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/Domain/AsteroidsSprite.java" hash="489e4d0719feae00dce65cd838ba5cbf3fe5269a"><package>package <name>Domain</name>;</package>
<comment type="block" format="javadoc">/******************************************************************************
  Asteroids, Version 1.3

  Copyright 1998-2001 by Mike Hall.
  Please see http://www.brainjar.com for terms of use.

  Revision History:

  1.01, 12/18/1999: Increased number of active photons allowed.
                    Improved explosions for more realism.
                    Added progress bar for loading of sound clips.
  1.2,  12/23/1999: Increased frame rate for smoother animation.
                    Modified code to calculate game object speeds and timer
                    counters based on the frame rate so they will remain
                    constant.
                    Improved speed limit checking for ship.
                    Removed wrapping of photons around screen and set a fixed
                    firing rate.
                    Added sprites for ship's thrusters.
  1.3,  01/25/2001: Updated to JDK 1.1.8.

  Usage:

  &lt;applet code="Asteroids.class" width=w height=h&gt;&lt;/applet&gt;

  Keyboard Controls:

  S            - Start Game    P           - Pause Game
  Cursor Left  - Rotate Left   Cursor Up   - Fire Thrusters
  Cursor Right - Rotate Right  Cursor Down - Fire Retro Thrusters
  Spacebar     - Fire Cannon   H           - Hyperspace
  M            - Toggle Sound  D           - Toggle Graphics Detail

******************************************************************************/</comment>

<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>Application</name><operator>.</operator><name>information</name></name>;</import>


<comment type="block" format="javadoc">/******************************************************************************
  The AsteroidsSprite class defines a game object, including it's shape,
  position, movement and rotation. It also can detemine if two objects collide.
******************************************************************************/</comment>

<class><specifier>public</specifier> class <name>AsteroidsSprite</name> <block>{
	<decl_stmt><decl><type><name>information</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>information</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Fields:</comment>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>width</name></decl>;</decl_stmt>          <comment type="line">// Dimensions of the graphics area.</comment>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <type><name>Polygon</name></type> <name>shape</name></decl>;</decl_stmt>             <comment type="line">// Base sprite shape, centered at the origin (0,0).</comment>
  <decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>active</name></decl>;</decl_stmt>            <comment type="line">// Active flag.</comment>
  <decl_stmt><decl><specifier>public</specifier> <type><name>double</name></type>  <name>angle</name></decl>;</decl_stmt>             <comment type="line">// Current angle of rotation.</comment>
  <decl_stmt><decl><specifier>public</specifier> <type><name>double</name></type>  <name>deltaAngle</name></decl>;</decl_stmt>        <comment type="line">// Amount to change the rotation angle.</comment>
  <decl_stmt><decl><specifier>public</specifier> <type><name>double</name></type>  <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>              <comment type="line">// Current position on screen.</comment>
  <decl_stmt><decl><specifier>public</specifier> <type><name>double</name></type>  <name>deltaX</name></decl>, <decl><type ref="prev"/><name>deltaY</name></decl>;</decl_stmt>    <comment type="line">// Amount to change the screen position.</comment>
  <decl_stmt><decl><specifier>public</specifier> <type><name>Polygon</name></type> <name>sprite</name></decl>;</decl_stmt>            <comment type="line">// Final location and shape of sprite after</comment>
                             <comment type="line">// applying rotation and translation to get screen</comment>
                             <comment type="line">// position. Used for drawing on the screen and in</comment>
                             <comment type="line">// detecting collisions.</comment>

  <comment type="line">// Constructors:</comment>

  <constructor><specifier>public</specifier> <name>AsteroidsSprite</name><parameter_list>()</parameter_list> <block>{

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>shape</name></name> <operator>=</operator> <operator>new</operator> <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>active</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deltaAngle</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deltaX</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deltaY</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sprite</name></name> <operator>=</operator> <operator>new</operator> <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="line">// Methods:</comment>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>advance</name><parameter_list>()</parameter_list> <block>{

    <decl_stmt><decl><type><name>boolean</name></type> <name>wrapped</name></decl>;</decl_stmt>

    <comment type="line">// Update the rotation and position of the sprite based on the delta</comment>
    <comment type="line">// values. If the sprite moves off the edge of the screen, it is wrapped</comment>
    <comment type="line">// around to the other side and TRUE is returnd.</comment>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>angle</name></name> <operator>+=</operator> <name><name>this</name><operator>.</operator><name>deltaAngle</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>angle</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>angle</name></name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>angle</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>angle</name></name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>wrapped</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>this</name><operator>.</operator><name>deltaX</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <operator>-</operator><name>width</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>wrapped</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>wrapped</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name><name>this</name><operator>.</operator><name>deltaY</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <operator>-</operator><name>height</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>height</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>wrapped</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>&gt;</operator> <name>height</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>-=</operator> <name>height</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>wrapped</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>wrapped</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>render</name><parameter_list>()</parameter_list> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="line">// Render the sprite's shape and location by rotating it's base shape and</comment>
    <comment type="line">// moving it to it's proper screen position.</comment>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sprite</name></name> <operator>=</operator> <operator>new</operator> <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>shape</name><operator>.</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>sprite</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>shape</name><operator>.</operator><name>xpoints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>angle</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>this</name><operator>.</operator><name>shape</name><operator>.</operator><name>ypoints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>angle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>width</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>,
                           <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>shape</name><operator>.</operator><name>ypoints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>angle</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>this</name><operator>.</operator><name>shape</name><operator>.</operator><name>xpoints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>angle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>height</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isColliding</name><parameter_list>(<parameter><decl><type><name>AsteroidsSprite</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="line">// Determine if one sprite overlaps with another, i.e., if any vertice</comment>
    <comment type="line">// of one sprite lands inside the other.</comment>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block type="pseudo"><if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>sprite</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if></block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block type="pseudo"><if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>sprite</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if></block></for>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/Domain/Asteroid.java" hash="db9a5feb6c4cff7df4f9e36c987aa4b68ed7ab2f"><package>package <name>Domain</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Polygon</name></name>;</import>

<import>import <name><name>Application</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>TechnicalServices</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>UI</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>Asteroid</name> <super><extends>extends <name>AsteroidsSprite</name></extends></super><block>{
	<decl_stmt><decl><type><name>information</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>information</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>explode</name></type> <name>explode1</name> <init>= <expr><operator>new</operator> <call><name>explode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	  <function><specifier>public</specifier> <type><name>void</name></type> <name>initAsteroids</name><parameter_list>(<parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>asteroids</name></decl></parameter>, <parameter><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>asteroidIsSmall</name></decl></parameter>)</parameter_list> <block>{

		    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>double</name></type> <name>theta</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

		    <comment type="line">// Create random shapes, positions and movements for each asteroid.</comment>

		    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCKS</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

		      <comment type="line">// Create a jagged shape for the asteroid and give it a random rotation.</comment>

		      <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shape</name> <operator>=</operator> <operator>new</operator> <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>MIN_ROCK_SIDES</name></name> <operator>+</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>MAX_ROCK_SIDES</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>MIN_ROCK_SIDES</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>s</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{
		        <expr_stmt><expr><name>theta</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <name>s</name> <operator>*</operator> <name>j</name></expr>;</expr_stmt>
		        <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>MIN_ROCK_SIZE</name></name> <operator>+</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>MAX_ROCK_SIZE</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>MIN_ROCK_SIZE</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>-</operator><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>r</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator>  <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>r</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      }</block></for>
		      <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>angle</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deltaAngle</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPIN</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPIN</name></name></expr>;</expr_stmt>

		      <comment type="line">// Place the asteroid at one edge of the screen.</comment>

		      <if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition><then> <block>{
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <operator>-</operator><name><name>AsteroidsSprite</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		        <if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition><then>
		          <block type="pseudo"><expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
		      }</block></then>
		      <else>else <block>{
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <operator>-</operator><name><name>AsteroidsSprite</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		        <if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition><then>
		          <block type="pseudo"><expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
		      }</block></else></if>

		      <comment type="line">// Set a random motion for the asteroid.</comment>

		      <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deltaX</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>info</name><operator>.</operator><name>asteroidsSpeed</name></name></expr>;</expr_stmt>
		      <if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition><then>
		        <block type="pseudo"><expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deltaX</name> <operator>=</operator> <operator>-</operator><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deltaX</name></expr>;</expr_stmt></block></then></if>
		      <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deltaY</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>info</name><operator>.</operator><name>asteroidsSpeed</name></name></expr>;</expr_stmt>
		      <if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition><then>
		        <block type="pseudo"><expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deltaY</name> <operator>=</operator> <operator>-</operator><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deltaY</name></expr>;</expr_stmt></block></then></if>

		      <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>render</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>asteroidIsSmall</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		    }</block></for>

		    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>asteroidsCounter</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>STORM_PAUSE</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>asteroidsLeft</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCKS</name></name></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>asteroidsSpeed</name></name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name></expr>)</condition><then>
		    	<block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>asteroidsSpeed</name></name> <operator>+=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt></block></then></if>
		  }</block></function>

		  <function><specifier>public</specifier> <type><name>void</name></type> <name>initSmallAsteroids</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>asteroidIsSmall</name></decl></parameter>, <parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>asteroids</name></decl></parameter>)</parameter_list> <block>{

		    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>double</name></type> <name>tempX</name></decl>, <decl><type ref="prev"/><name>tempY</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>double</name></type> <name>theta</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

		    <comment type="line">// Create one or two smaller asteroids from a larger one using inactive</comment>
		    <comment type="line">// asteroids. The new asteroids will be placed in the same position as the</comment>
		    <comment type="line">// old one but will have a new, smaller shape and new, randomly generated</comment>
		    <comment type="line">// movements.</comment>

		    <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>tempX</name> <operator>=</operator> <name><name>asteroids</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name>tempY</name> <operator>=</operator> <name><name>asteroids</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
		    <do>do <block>{
		      <if>if <condition>(<expr><operator>!</operator><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><then> <block>{
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shape</name> <operator>=</operator> <operator>new</operator> <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>MIN_ROCK_SIDES</name></name> <operator>+</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>MAX_ROCK_SIDES</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>MIN_ROCK_SIDES</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>s</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{
		          <expr_stmt><expr><name>theta</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <name>s</name> <operator>*</operator> <name>j</name></expr>;</expr_stmt>
		          <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>MIN_ROCK_SIZE</name></name> <operator>+</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>MAX_ROCK_SIZE</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>MIN_ROCK_SIZE</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		          <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>-</operator><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>r</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		          <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator>  <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>r</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>theta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		          <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></for>
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>angle</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deltaAngle</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPIN</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPIN</name></name></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>tempX</name></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>tempY</name></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deltaX</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>asteroidsSpeed</name></name> <operator>-</operator><name><name>info</name><operator>.</operator><name>asteroidsSpeed</name></name></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>deltaY</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator><name><name>info</name><operator>.</operator><name>asteroidsSpeed</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>asteroidsSpeed</name></name></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>render</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>asteroidIsSmall</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>asteroidsLeft</name></name><operator>++</operator></expr>;</expr_stmt>
		      }</block></then></if>
		      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		    }</block> while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCKS</name></name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>;</do>
		  }</block></function>

		  <function><specifier>public</specifier> <type><name>void</name></type> <name>updateAsteroids</name><parameter_list>(<parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>asteroids</name></decl></parameter>, <parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>photons</name></decl></parameter>, <parameter><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>asteroidIsSmall</name></decl></parameter>, <parameter><decl><type><name>AsteroidsSprite</name></type> <name>ship</name></decl></parameter>, <parameter><decl><type><name>AsteroidsSprite</name></type> <name>ufo</name></decl></parameter>, <parameter><decl><type><name>AsteroidsSprite</name></type> <name>missle</name></decl></parameter>, <parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>explosions</name></decl></parameter>)</parameter_list> <block>{

		    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

		    <comment type="line">// Move any active asteroids and check for collisions.</comment>

		    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCKS</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		      <block type="pseudo"><if>if <condition>(<expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><then> <block>{
		    	  <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>advance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		    	  <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>render</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		        <comment type="line">// If hit by photon, kill asteroid and advance score. If asteroid is</comment>
		        <comment type="line">// large, make some smaller ones to replace it.</comment>

		        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_SHOTS</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		          <block type="pseudo"><if>if <condition>(<expr><name><name>photons</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>isColliding</name><argument_list>(<argument><expr><name><name>photons</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		        	  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>asteroidsLeft</name></name><operator>--</operator></expr>;</expr_stmt>
		            <expr_stmt><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		            <expr_stmt><expr><name><name>photons</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		            <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name></expr>)</condition><then>
		            	<block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>explosionSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		            <expr_stmt><expr><call><name><name>explode1</name><operator>.</operator><name>explode</name></name><argument_list>(<argument><expr><name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>explosions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		            <if>if <condition>(<expr><operator>!</operator><name><name>asteroidIsSmall</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
		            	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>score</name></name> <operator>+=</operator> <name><name>info</name><operator>.</operator><name>BIG_POINTS</name></name></expr>;</expr_stmt>
		              <expr_stmt><expr><call><name>initSmallAsteroids</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>asteroidIsSmall</name></expr></argument>,<argument><expr><name>asteroids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		            }</block></then>
		            <else>else
		            	<block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>score</name></name> <operator>+=</operator> <name><name>info</name><operator>.</operator><name>SMALL_POINTS</name></name></expr>;</expr_stmt></block></else></if>
		          }</block></then></if></block></for>

		        <comment type="line">// If the ship is not in hyperspace, see if it is hit.</comment>

		        <if>if <condition>(<expr><name><name>ship</name><operator>.</operator><name>active</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>hyperCounter</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		            <name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <name><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>isColliding</name><argument_list>(<argument><expr><name>ship</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		          <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name></expr>)</condition><then>
		        	  <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>crashSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		          <expr_stmt><expr><call><name><name>explode1</name><operator>.</operator><name>explode</name></name><argument_list>(<argument><expr><name>ship</name></expr></argument>,<argument><expr><name>explosions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ship</name><operator>)</operator> <name>ship</name><operator>)</operator><operator>.</operator><call><name>stopShip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ufo</name><operator>)</operator> <name>ufo</name><operator>)</operator><operator>.</operator><call><name>stopUfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>missle</name><operator>)</operator> <name>missle</name><operator>)</operator><operator>.</operator><call><name>stopMissle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        }</block></then></if>
		    }</block></then></if></block></for>
		  }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/UI/Graph.java" hash="b30672b01a4404cd34c46170c9f45f725d395816"><package>package <name>UI</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>applet</name><operator>.</operator><name>Applet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>applet</name><operator>.</operator><name>AudioClip</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Dimension</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Font</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Polygon</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>image</name><operator>.</operator><name>ImageObserver</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>

<import>import <name><name>Application</name><operator>.</operator><name>info</name></name>;</import>
<import>import <name><name>Application</name><operator>.</operator><name>information</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>missle</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>ship</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>ufo</name></name>;</import>

<class><specifier>public</specifier> class <name>Graph</name> <block>{
	  <decl_stmt><decl><type><name>information</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>information</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	  <function><specifier>public</specifier> <type><name>void</name></type> <name>getNumStars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numstars</name></decl></parameter>)</parameter_list> <block>{
		  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>numStars</name></name> <operator>=</operator> <name>numstars</name></expr>;</expr_stmt>
	  }</block></function>
	  <function><specifier>public</specifier> <type><name>void</name></type> <name>getStars</name><parameter_list>(<parameter><decl><type><name><name>Point</name> <index>[]</index></name></type> <name>star</name></decl></parameter>)</parameter_list> <block>{
		  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>stars</name></name> <operator>=</operator> <name>star</name></expr>;</expr_stmt>
	  }</block></function>


		  <function><specifier>public</specifier> <type><name>void</name></type> <name>paint</name><parameter_list>(<parameter><decl><type><name>Graphics</name></type> <name>g</name></decl></parameter>)</parameter_list> <block>{

		    <decl_stmt><decl><type><name>Dimension</name></type> <name>d</name> <init>= <expr><call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>String</name></type> <name>s</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

		    <comment type="line">// Create the off screen graphics context, if no good one exists.</comment>

		    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>offGraphics</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>d</name><operator>.</operator><name>width</name></name> <operator>!=</operator> <name><name>info</name><operator>.</operator><name>offDimension</name><operator>.</operator><name>width</name></name> <operator>||</operator> <name><name>d</name><operator>.</operator><name>height</name></name> <operator>!=</operator><name><name>info</name><operator>.</operator><name>offDimension</name><operator>.</operator><name>height</name></name></expr>)</condition><then> <block>{
		    	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>offDimension</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
		    	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>offImage</name></name> <operator>=</operator> <call><name><name>Asteroids</name><operator>.</operator><name>createImage</name></name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>offGraphics</name></name> <operator>=</operator> <call><name><name>info</name><operator>.</operator><name>offImage</name><operator>.</operator><name>getGraphics</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>

		    <comment type="line">// Fill in background and stars.</comment>

		    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>fillRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>detail</name></name></expr>)</condition><then> <block>{
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>numStars</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		        <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawLine</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>stars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>stars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>stars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>stars</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		    }</block></then></if>

		    <comment type="line">// Draw photon bullets.</comment>

		    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_SHOTS</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		      <block type="pseudo"><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><then>
		        <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawPolygon</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sprite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>

		    <comment type="line">// Draw the guided missle, counter is used to quickly fade color to black</comment>
		    <comment type="line">// when near expiration.</comment>

		    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>missleCounter</name></name> <operator>*</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>missle</name><operator>.</operator><name>active</name></name></expr>)</condition><then> <block>{
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawPolygon</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>missle</name><operator>.</operator><name>sprite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawLine</name></name><argument_list>(<argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
		                           <argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>

		    <comment type="line">// Draw the info.</comment>

		    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCKS</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		      <block type="pseudo"><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>active</name></name></expr>)</condition><then> <block>{
		        <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>detail</name></name></expr>)</condition><then> <block>{
		          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>fillPolygon</name></name><argument_list>(<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sprite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></then></if>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawPolygon</name></name><argument_list>(<argument><expr><name><name>Asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sprite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawLine</name></name><argument_list>(<argument><expr><name><name>Asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><name><name>Asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><name><name>Asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
		        		<argument><expr><name><name>Asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Asteroids</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      }</block></then></if></block></for>

		    <comment type="line">// Draw the flying saucer.</comment>

		    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>active</name></name></expr>)</condition><then> <block>{
		      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>detail</name></name></expr>)</condition><then> <block>{
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>fillPolygon</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>sprite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      }</block></then></if>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawPolygon</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>sprite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawLine</name></name><argument_list>(<argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
		                           <argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>

		    <comment type="line">// Draw the ship, counter is used to fade color to white on hyperspace.</comment>

		    <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <operator>(</operator><literal type="number">255</literal> <operator>/</operator> <name><name>info</name><operator>.</operator><name>HYPER_COUNT</name></name><operator>)</operator> <operator>*</operator> <name><name>info</name><operator>.</operator><name>hyperCounter</name></name></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>active</name></name></expr>)</condition><then> <block>{
		      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>detail</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>hyperCounter</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>fillPolygon</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>sprite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      }</block></then></if>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawPolygon</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>sprite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawLine</name></name><argument_list>(<argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
		                           <argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Application</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		      <comment type="line">// Draw thruster exhaust if thrusters are on. Do it randomly to get a</comment>
		      <comment type="line">// flicker effect.</comment>

		      <if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>paused</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>detail</name></name> <operator>&amp;&amp;</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition><then> <block>{
		        <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>up</name></name></expr>)</condition><then> <block>{
		          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawPolygon</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fwdThruster</name><operator>.</operator><name>sprite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawLine</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fwdThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><name><name>info</name><operator>.</operator><name>fwdThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fwdThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><name><name>info</name><operator>.</operator><name>fwdThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
		                               <argument><expr><name><name>info</name><operator>.</operator><name>fwdThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fwdThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></then></if>
		        <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>down</name></name></expr>)</condition><then> <block>{
		          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawPolygon</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>sprite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawLine</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
		                               <argument><expr><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>xpoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>sprite</name><operator>.</operator><name>ypoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        }</block></then></if>
		      }</block></then></if>
		    }</block></then></if>

		    <comment type="line">// Draw any explosion debris, counters are used to fade color to black.</comment>

		    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_SCRAP</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		      <block type="pseudo"><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>explosions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><then> <block>{
		        <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><literal type="number">255</literal> <operator>/</operator> <name><name>info</name><operator>.</operator><name>SCRAP_COUNT</name></name><operator>)</operator> <operator>*</operator> <name><name>info</name><operator>.</operator><name>explosionCounter</name> <index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawPolygon</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>explosions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sprite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      }</block></then></if></block></for>

		    <comment type="line">// Display status and messages.</comment>

		    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>font</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><literal type="string">"Score: "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>score</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fontWidth</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fontHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><literal type="string">"Ships: "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>shipsLeft</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fontWidth</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>fontHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"High: "</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>highScore</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>fontWidth</name></name> <operator>+</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>stringWidth</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>fontHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>sound</name></name></expr>)</condition><then> <block>{
		      <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"Mute"</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>fontWidth</name></name> <operator>+</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>stringWidth</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>fontHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if>

		    <if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>playing</name></name></expr>)</condition><then> <block>{
		      <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>copyName</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>d</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>stringWidth</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>fontHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>copyVers</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>d</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>stringWidth</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>info</name><operator>.</operator><name>fontHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>copyInfo</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>d</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>stringWidth</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>fontHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>copyLink</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>d</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>stringWidth</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>fontHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>loaded</name></name></expr>)</condition><then> <block>{
		        <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"Loading sounds..."</literal></expr>;</expr_stmt>
		        <expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>fontWidth</name></name> <operator>+</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>stringWidth</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>fontHeight</name></name></expr>;</expr_stmt>
		        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name><name>d</name><operator>.</operator><name>width</name></name> <operator>-</operator> <name>w</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		        <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>d</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>getMaxAscent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		          <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>fillRect</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>gray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>clipTotal</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
		          <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>fillRect</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name><name>info</name><operator>.</operator><name>clipsLoaded</name></name> <operator>/</operator> <name><name>info</name><operator>.</operator><name>clipTotal</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>fontWidth</name></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>getMaxAscent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      }</block></then>
		      <else>else <block>{
		        <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"Game Over"</literal></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>d</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>stringWidth</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"'S' to Start"</literal></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>d</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>stringWidth</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>info</name><operator>.</operator><name>fontHeight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      }</block></else></if>
		    }</block></then>
		    <elseif>else <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>paused</name></name></expr>)</condition><then> <block>{
		      <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"Game Paused"</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>offGraphics</name><operator>.</operator><name>drawString</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name><name>d</name><operator>.</operator><name>width</name></name> <operator>-</operator> <call><name><name>info</name><operator>.</operator><name>fm</name><operator>.</operator><name>stringWidth</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    }</block></then></if></elseif></if>

		    <comment type="line">// Copy the off screen buffer to the screen.</comment>

		    <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>drawImage</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>offImage</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>ImageObserver</name><operator>)</operator> <name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  }</block></function>
		  
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/Domain/missle.java" hash="66242831bacba18f5630b6e87ecdc46fd50f84f0"><package>package <name>Domain</name>;</package>
<import>import <name><name>Application</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>TechnicalServices</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>UI</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>missle</name> <super><extends>extends <name>AsteroidsSprite</name></extends></super> <block>{
	<decl_stmt><decl><type><name>information</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>information</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>initMissle</name><parameter_list>(<parameter><decl><type><name>AsteroidsSprite</name></type> <name>ufo</name></decl></parameter>)</parameter_list> <block>{

	    <expr_stmt><expr><name>active</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>deltaAngle</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>ufo</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>ufo</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>deltaX</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name>deltaY</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>render</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>missleCounter</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>MISSLE_COUNT</name></name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name></expr>)</condition><then>
	    	<block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missleSound</name><operator>.</operator><name>loop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>misslePlaying</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	  }</block></function>

	  <function><specifier>public</specifier> <type><name>void</name></type> <name>updateMissle</name><parameter_list>(<parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>photons</name></decl></parameter>, <parameter><decl><type><name>AsteroidsSprite</name></type> <name>ship</name></decl></parameter>, <parameter><decl><type><name>AsteroidsSprite</name></type> <name>ufo</name></decl></parameter>, <parameter><decl><type><name>AsteroidsSprite</name></type> <name>explosion</name></decl></parameter>)</parameter_list> <block>{

	    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	    <comment type="line">// Move the guided missle and check for collision with ship or photon. Stop</comment>
	    <comment type="line">// it when its counter has expired.</comment>

	    <if>if <condition>(<expr><name>active</name></expr>)</condition><then> <block>{
	      <if>if <condition>(<expr><operator>--</operator><name><name>info</name><operator>.</operator><name>missleCounter</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
	        <block type="pseudo"><expr_stmt><expr><call><name>stopMissle</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
	      <else>else <block>{
	        <expr_stmt><expr><call><name>guideMissle</name><argument_list>(<argument><expr><name>ship</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name>advance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><call><name>render</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_SHOTS</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	          <block type="pseudo"><if>if <condition>(<expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <call><name>isColliding</name><argument_list>(<argument><expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	            <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name></expr>)</condition><then>
	            	<block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>crashSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>explode</name><operator>)</operator> <name>explosion</name><operator>)</operator><operator>.</operator><call><name>explode</name><argument_list>(<argument><expr><name>explosion</name></expr></argument>, <argument><expr><name>photons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><call><name>stopMissle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	            <expr_stmt><expr><name><name>info</name><operator>.</operator><name>score</name></name> <operator>+=</operator> <name><name>info</name><operator>.</operator><name>MISSLE_POINTS</name></name></expr>;</expr_stmt>
	          }</block></then></if></block></for>
	        <if>if <condition>(<expr><name>active</name> <operator>&amp;&amp;</operator> <name><name>ship</name><operator>.</operator><name>active</name></name> <operator>&amp;&amp;</operator>
	        		<name><name>info</name><operator>.</operator><name>hyperCounter</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>ship</name><operator>.</operator><name>isColliding</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
	          <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name></expr>)</condition><then>
	        	  <block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>crashSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>explode</name><operator>)</operator> <name>explosion</name><operator>)</operator><operator>.</operator><call><name>explode</name><argument_list>(<argument><expr><name>explosion</name></expr></argument>, <argument><expr><name>photons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ship</name><operator>)</operator> <name>ship</name><operator>)</operator><operator>.</operator><call><name>stopShip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ufo</name><operator>)</operator> <name>ufo</name><operator>)</operator><operator>.</operator><call><name>stopUfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	          <expr_stmt><expr><call><name>stopMissle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	        }</block></then></if>
	      }</block></else></if>
	    }</block></then></if>
	  }</block></function>

	  <function><specifier>public</specifier> <type><name>void</name></type> <name>guideMissle</name><parameter_list>(<parameter><decl><type><name>AsteroidsSprite</name></type> <name>ship</name></decl></parameter>)</parameter_list> <block>{

	    <decl_stmt><decl><type><name>double</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>, <decl><type ref="prev"/><name>angle</name></decl>;</decl_stmt>

	    <if>if <condition>(<expr><operator>!</operator><name><name>ship</name><operator>.</operator><name>active</name></name> <operator>||</operator> <name><name>info</name><operator>.</operator><name>hyperCounter</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	      <block type="pseudo"><return>return;</return></block></then></if>

	    <comment type="line">// Find the angle needed to hit the ship.</comment>

	    <expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>ship</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name>x</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>ship</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>dx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dy</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
	      <block type="pseudo"><expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	    <if>if <condition>(<expr><name>dx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
	      <if>if <condition>(<expr><name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	        <block type="pseudo"><expr_stmt><expr><name>angle</name> <operator>=</operator> <operator>-</operator><name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then>
	      <else>else
	        <block type="pseudo"><expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></else></if>
	    }</block></then>
	    <else>else <block>{
	      <expr_stmt><expr><name>angle</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>atan</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>dy</name> <operator>/</operator> <name>dx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if>if <condition>(<expr><name>dy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	        <block type="pseudo"><expr_stmt><expr><name>angle</name> <operator>=</operator> <operator>-</operator><name>angle</name></expr>;</expr_stmt></block></then></if>
	      <if>if <condition>(<expr><name>dx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	        <block type="pseudo"><expr_stmt><expr><name>angle</name> <operator>=</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>-</operator> <name>angle</name></expr>;</expr_stmt></block></then></if>
	    }</block></else></if>

	    <comment type="line">// Adjust angle for screen coordinates.</comment>

	    <expr_stmt><expr><name>angle</name> <operator>=</operator> <name>angle</name> <operator>-</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	    <comment type="line">// Change the missle's angle so that it points toward the ship.</comment>

	    <expr_stmt><expr><name>deltaX</name> <operator>=</operator> <literal type="number">0.75</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name> <operator>*</operator> <operator>-</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>deltaY</name> <operator>=</operator> <literal type="number">0.75</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name> <operator>*</operator>  <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  }</block></function>

	  <function><specifier>public</specifier> <type><name>void</name></type> <name>stopMissle</name><parameter_list>()</parameter_list> <block>{

	    <expr_stmt><expr><name>active</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>missleCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>loaded</name></name></expr>)</condition><then>
	    	<block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missleSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	    <expr_stmt><expr><name><name>info</name><operator>.</operator> <name>misslePlaying</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
	  }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/Domain/ship.java" hash="55e0a1905c9da1a39f4cb3f9bb5a0a5aac70cf93"><package>package <name>Domain</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>applet</name><operator>.</operator><name>AudioClip</name></name>;</import>

<import>import <name><name>Application</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>TechnicalServices</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>UI</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>ship</name> <super><extends>extends <name>AsteroidsSprite</name></extends></super> <block>{
		<decl_stmt><decl><type><name>information</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>information</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		 <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DELAY</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>             <comment type="line">// Milliseconds between screen and</comment>
		   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FPS</name>   <init>=                 <comment type="line">// the resulting frame rate.</comment>
		    <expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><literal type="number">1000</literal> <operator>/</operator> <name>DELAY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>MAX_ROCK_SPEED</name> <init>= <expr><literal type="number">240.0</literal> <operator>/</operator> <name>FPS</name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>MAX_SHIP_SPEED</name>  <init>= <expr><literal type="number">1.25</literal> <operator>*</operator> <name>MAX_ROCK_SPEED</name></expr></init></decl>;</decl_stmt>
	  <comment type="line">// Ship's rotation and acceleration rates and maximum speed.</comment>

	 <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>SHIP_ANGLE_STEP</name> <init>= <expr><name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <name>FPS</name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>SHIP_SPEED_STEP</name> <init>= <expr><literal type="number">15.0</literal> <operator>/</operator> <name>FPS</name></expr></init></decl>;</decl_stmt>
	  
	 <function><specifier>public</specifier> <type><name>boolean</name></type> <name>initShip</name><parameter_list>(<parameter><decl><type><name>AsteroidsSprite</name></type> <name>fwdThruster</name></decl></parameter>, <parameter><decl><type><name>AsteroidsSprite</name></type> <name>revThruster</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>loaded</name></decl></parameter>, <parameter><decl><type><name>AudioClip</name></type> <name>thrustersSound</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hyperCounter</name></decl></parameter>)</parameter_list> <block>{

		    <comment type="line">// Reset the ship sprite at the center of the screen.</comment>

		    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>active</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>angle</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>deltaAngle</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>deltaX</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>deltaY</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>render</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		    <comment type="line">// Initialize thruster sprites.</comment>

		    <expr_stmt><expr><name><name>fwdThruster</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>fwdThruster</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>fwdThruster</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name>fwdThruster</name><operator>.</operator><name>render</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>revThruster</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>revThruster</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>revThruster</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <name>angle</name></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name><name>revThruster</name><operator>.</operator><name>render</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		    <if>if <condition>(<expr><name>loaded</name></expr>)</condition><then>
		      <block type="pseudo"><expr_stmt><expr><call><name><name>thrustersSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		    <expr_stmt><expr><name>hyperCounter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
		  }</block></function>

		  

		  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>stopShip</name><parameter_list>()</parameter_list> <block>{

		    <expr_stmt><expr><name>active</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>shipCounter</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>SCRAP_COUNT</name></name></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>shipsLeft</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
		    	<block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>shipsLeft</name></name><operator>--</operator></expr>;</expr_stmt></block></then></if>
		    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>loaded</name></name></expr>)</condition><then>
		    	<block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>thrustersSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
		  }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/Domain/explode.java" hash="5220f0eba5ce432353d235d95baf93bc35382c64"><package>package <name>Domain</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Polygon</name></name>;</import>

<import>import <name><name>Application</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>TechnicalServices</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>UI</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>explode</name> <super><extends>extends <name>AsteroidsSprite</name></extends></super> <block>{
	 <decl_stmt><decl><type><name>information</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>information</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	 <function><specifier>public</specifier>  <type><name>int</name></type> <name>initExplosions</name><parameter_list>(<parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>explosions</name></decl></parameter>)</parameter_list> <block>{

		    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_SCRAP</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		    	<expr_stmt><expr><name><name>explosions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>shape</name> <operator>=</operator> <operator>new</operator> <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		    	<expr_stmt><expr><name><name>explosions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		    	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>explosionCounter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    }</block></for>
		    <return>return  <expr><literal type="number">0</literal></expr>;</return>
		  }</block></function>

		  <function><specifier>public</specifier>  <type><name>int</name></type> <name>explode</name><parameter_list>(<parameter><decl><type><name>AsteroidsSprite</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>explosions</name></decl></parameter>)</parameter_list> <block>{

		    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>int</name></type> <name>cx</name></decl>, <decl><type ref="prev"/><name>cy</name></decl>;</decl_stmt>

		    <comment type="line">// Create sprites for explosion animation. The each individual line segment</comment>
		    <comment type="line">// of the given sprite is used to create a new sprite that will move</comment>
		    <comment type="line">// outward  from the sprite's original position with a random rotation.</comment>

		    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>render</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>detail</name></name> <operator>||</operator> <name><name>s</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><then>
		      <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>c</name></expr></incr>)</control> <block>{
		    	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name><operator>++</operator></expr>;</expr_stmt>
		      <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name> <operator>&gt;=</operator> <name><name>info</name><operator>.</operator><name>MAX_SCRAP</name></name></expr>)</condition><then>
		    	  <block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		      <expr_stmt><expr><name><name>explosions</name><index>[<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>explosions</name><index>[<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>]</index></name><operator>.</operator><name>shape</name> <operator>=</operator> <operator>new</operator> <call><name>Polygon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		      <if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name><name>s</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name></expr>)</condition><then>
		        <block type="pseudo"><expr_stmt><expr><name>j</name> <operator>-=</operator> <name><name>s</name><operator>.</operator><name>sprite</name><operator>.</operator><name>npoints</name></name></expr>;</expr_stmt></block></then></if>
		      <expr_stmt><expr><name>cx</name> <operator>=</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>.</operator><name>shape</name><operator>.</operator><name>xpoints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>.</operator><name>shape</name><operator>.</operator><name>xpoints</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name>cy</name> <operator>=</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><operator>(</operator><name><name>s</name><operator>.</operator><name>shape</name><operator>.</operator><name>ypoints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>.</operator><name>shape</name><operator>.</operator><name>ypoints</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>explosions</name><index>[<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>]</index></name><operator>.</operator><call><name><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(
		        <argument><expr><name><name>s</name><operator>.</operator><name>shape</name><operator>.</operator><name>xpoints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>cx</name></expr></argument>,
		        <argument><expr><name><name>s</name><operator>.</operator><name>shape</name><operator>.</operator><name>ypoints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>explosions</name><index>[<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>]</index></name><operator>.</operator><call><name><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(
		        <argument><expr><name><name>s</name><operator>.</operator><name>shape</name><operator>.</operator><name>xpoints</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>cx</name></expr></argument>,
		        <argument><expr><name><name>s</name><operator>.</operator><name>shape</name><operator>.</operator><name>ypoints</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>explosions</name><index>[<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>cx</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>explosions</name><index>[<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>cy</name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>explosions</name><index>[<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>]</index></name><operator>.</operator><name>angle</name> <operator>=</operator> <name><name>s</name><operator>.</operator><name>angle</name></name></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>explosions</name><index>[<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>]</index></name><operator>.</operator><name>deltaAngle</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPIN</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPIN</name></name><operator>)</operator></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>explosions</name><index>[<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>]</index></name><operator>.</operator><name>deltaX</name> <operator>=</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name> <operator>+</operator> <name><name>s</name><operator>.</operator><name>deltaX</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>explosions</name><index>[<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>]</index></name><operator>.</operator><name>deltaY</name> <operator>=</operator> <operator>(</operator><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name> <operator>-</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name> <operator>+</operator> <name><name>s</name><operator>.</operator><name>deltaY</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>explosionCounter</name><index>[<expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>SCRAP_COUNT</name></name></expr>;</expr_stmt>
		    }</block></for>
		    <return>return <expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name></expr>;</return>
		  }</block></function>

		  <function><specifier>public</specifier>  <type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>updateExplosions</name><parameter_list>(<parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>explosions</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>explosionCounter</name></decl></parameter>)</parameter_list> <block>{

		    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		    
		    <comment type="line">// Move any active explosion debris. Stop explosion when its counter has</comment>
		    <comment type="line">// expired.</comment>
		    	
		    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_SCRAP</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		      <block type="pseudo"><if>if <condition>(<expr><name><name>explosions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name></expr>)</condition><then> <block>{
		        <expr_stmt><expr><name><name>explosions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>advance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><name><name>explosions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>render</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        <if>if <condition>(<expr><operator>--</operator><name><name>explosionCounter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
		        <block type="pseudo"><expr_stmt><expr><name><name>explosions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
		      }</block></then></if></block></for>
		    <return>return <expr><name>explosions</name></expr>;</return>
		  }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/Application/information.java" hash="007a5b5bbe7c46227c7e6259dc7e10bb3c650680"><package>package <name>Application</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>applet</name><operator>.</operator><name>AudioClip</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Dimension</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Font</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Point</name></name>;</import>

<import>import <name><name>Domain</name><operator>.</operator><name>Asteroid</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>AsteroidsSprite</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>Photons</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>explode</name></name>;</import>
<import>import <name><name>TechnicalServices</name><operator>.</operator><name>KeyInputs</name></name>;</import>

<class><specifier>public</specifier> class <name>information</name>  <block>{
	<comment type="line">// Copyright information.</comment>
	

		  
		  
	<decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>copyName</name> <init>= <expr><literal type="string">"Asteroids"</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>copyVers</name> <init>= <expr><literal type="string">"Version 1.3"</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>copyInfo</name> <init>= <expr><literal type="string">"Copyright 1998-2001 by Mike Hall"</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>String</name></type> <name>copyLink</name> <init>= <expr><literal type="string">"http://www.brainjar.com"</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier>  <type><name>String</name></type> <name>copyText</name> <init>= <expr><name>copyName</name> <operator>+</operator> <literal type="char">'\n'</literal> <operator>+</operator> <name>copyVers</name> <operator>+</operator> <literal type="char">'\n'</literal>
	                  <operator>+</operator> <name>copyInfo</name> <operator>+</operator> <literal type="char">'\n'</literal> <operator>+</operator> <name>copyLink</name></expr></init></decl>;</decl_stmt>

	  <comment type="line">// Thread control variables.</comment>

	  <decl_stmt><decl><specifier>public</specifier> <type><name>Thread</name></type> <name>loadThread</name></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>Thread</name></type> <name>loopThread</name></decl>;</decl_stmt>

	  <comment type="line">// Constants</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>paused</name></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DELAY</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>             <comment type="line">// Milliseconds between screen and</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FPS</name>   <init>=                 <comment type="line">// the resulting frame rate.</comment>
	    <expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><literal type="number">1000</literal> <operator>/</operator> <name>DELAY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_SHOTS</name> <init>=  <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>          <comment type="line">// Maximum number of sprites</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_ROCKS</name> <init>=  <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>          <comment type="line">// for photons, asteroids and</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_SCRAP</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>          <comment type="line">// explosions.</comment>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SCRAP_COUNT</name>  <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>FPS</name></expr></init></decl>;</decl_stmt>  <comment type="line">// Timer counter starting values</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>HYPER_COUNT</name>  <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name>FPS</name></expr></init></decl>;</decl_stmt>  <comment type="line">// calculated using number of</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MISSLE_COUNT</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>FPS</name></expr></init></decl>;</decl_stmt>  <comment type="line">// seconds x frames per second.</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STORM_PAUSE</name>  <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>FPS</name></expr></init></decl>;</decl_stmt>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>MIN_ROCK_SIDES</name> <init>=   <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Ranges for asteroid shape, size</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>MAX_ROCK_SIDES</name> <init>=  <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt> <comment type="line">// speed and rotation.</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>MIN_ROCK_SIZE</name>  <init>=  <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>MAX_ROCK_SIZE</name>  <init>=  <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>MIN_ROCK_SPEED</name> <init>=  <expr><literal type="number">40.0</literal> <operator>/</operator> <name>FPS</name></expr></init></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>MAX_ROCK_SPEED</name> <init>= <expr><literal type="number">240.0</literal> <operator>/</operator> <name>FPS</name></expr></init></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>MAX_ROCK_SPIN</name>  <init>= <expr><name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <name>FPS</name></expr></init></decl>;</decl_stmt>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_SHIPS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>           <comment type="line">// Starting number of ships for</comment>
	                                           <comment type="line">// each game.</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UFO_PASSES</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>          <comment type="line">// Number of passes for flying</comment>
	                                            <comment type="line">// saucer per appearance.</comment>




	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FIRE_DELAY</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>         <comment type="line">// Minimum number of milliseconds</comment>
	                                           <comment type="line">// required between photon shots.</comment>

	  <comment type="line">// Probablility of flying saucer firing a missle during any given frame</comment>
	  <comment type="line">// (other conditions must be met).</comment>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>MISSLE_PROBABILITY</name> <init>= <expr><literal type="number">0.45</literal> <operator>/</operator> <name>FPS</name></expr></init></decl>;</decl_stmt>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BIG_POINTS</name>    <init>=  <expr><literal type="number">25</literal></expr></init></decl>;</decl_stmt>     <comment type="line">// Points scored for shooting</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SMALL_POINTS</name>  <init>=  <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>     <comment type="line">// various objects.</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UFO_POINTS</name>    <init>= <expr><literal type="number">250</literal></expr></init></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MISSLE_POINTS</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>

	  <comment type="line">// Number of points the must be scored to earn a new ship or to cause the</comment>
	  <comment type="line">// flying saucer to appear.</comment>

	  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NEW_SHIP_POINTS</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NEW_UFO_POINTS</name>  <init>= <expr><literal type="number">2750</literal></expr></init></decl>;</decl_stmt>



	  <comment type="line">// Game data.</comment>

	  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>score</name></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>highScore</name></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>newShipScore</name></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>newUfoScore</name></decl>;</decl_stmt>

	  <comment type="line">// Flags for game state and options.</comment>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>loaded</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>playing</name></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>sound</name></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>detail</name></decl>;</decl_stmt>

	  <comment type="line">// Key flags.</comment>

	  <decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>left</name>  <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier>  <type><name>boolean</name></type> <name>right</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>up</name>    <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier>  <type><name>boolean</name></type> <name>down</name>  <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

	  <comment type="line">// Sprite objects.</comment>

	  <decl_stmt><decl><specifier>public</specifier> <type><name>AsteroidsSprite</name></type>   <name>ship</name></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>AsteroidsSprite</name></type>   <name>fwdThruster</name></decl>, <decl><type ref="prev"/><name>revThruster</name></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>AsteroidsSprite</name></type>   <name>ufo</name></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>AsteroidsSprite</name></type>   <name>missle</name></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>AsteroidsSprite</name></type> <name>photon</name> <init>= <expr><operator>new</operator> <call><name>Photons</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>AsteroidsSprite</name></type> <name>explosion</name> <init>= <expr><operator>new</operator> <call><name>explode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier>  <type><name>AsteroidsSprite</name></type> <name>asteroid</name> <init>= <expr><operator>new</operator> <call><name>Asteroid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	 
	  <decl_stmt><decl><specifier>public</specifier> <type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>photons</name>    <init>= <expr><operator>new</operator> <name><name>AsteroidsSprite</name><index>[<expr><name>MAX_SHOTS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>asteroids</name>  <init>= <expr><operator>new</operator> <name><name>AsteroidsSprite</name><index>[<expr><name>MAX_ROCKS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>explosions</name> <init>= <expr><operator>new</operator> <name><name>AsteroidsSprite</name><index>[<expr><name>MAX_SCRAP</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>KeyInputs</name></type> <name>keyInputs</name> <init>= <expr><operator>new</operator> <call><name>KeyInputs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	  <comment type="line">// Ship data.</comment>

	  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>shipsLeft</name></decl>;</decl_stmt>       <comment type="line">// Number of ships left in game, including current one.</comment>
	  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>shipCounter</name></decl>;</decl_stmt>     <comment type="line">// Timer counter for ship explosion.</comment>
	  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>hyperCounter</name></decl>;</decl_stmt>    <comment type="line">// Timer counter for hyperspace.</comment>

	  <comment type="line">// Photon data.</comment>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type>   <name>photonIndex</name></decl>;</decl_stmt>    <comment type="line">// Index to next available photon sprite.</comment>
	   <decl_stmt><decl><specifier>public</specifier> <type><name>long</name></type>  <name>photonTime</name></decl>;</decl_stmt>     <comment type="line">// Time value used to keep firing rate constant.</comment>

	  <comment type="line">// Flying saucer data.</comment>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>ufoPassesLeft</name></decl>;</decl_stmt>    <comment type="line">// Counter for number of flying saucer passes.</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>ufoCounter</name></decl>;</decl_stmt>       <comment type="line">// Timer counter used to track each flying saucer pass.</comment>

	  <comment type="line">// Missle data.</comment>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>missleCounter</name></decl>;</decl_stmt>    <comment type="line">// Counter for life of missle.</comment>

	  <comment type="line">// Asteroid data.</comment>

	   <decl_stmt><decl><specifier>public</specifier> <type><name><name>boolean</name><index>[]</index></name></type> <name>asteroidIsSmall</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name>MAX_ROCKS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>    <comment type="line">// Asteroid size flag.</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type>       <name>asteroidsCounter</name></decl>;</decl_stmt>                            <comment type="line">// Break-time counter.</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>double</name></type>    <name>asteroidsSpeed</name></decl>;</decl_stmt>                              <comment type="line">// Asteroid speed.</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type>       <name>asteroidsLeft</name></decl>;</decl_stmt>                               <comment type="line">// Number of active asteroids.</comment>

	  <comment type="line">// Explosion data.</comment>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>int</name><index>[]</index></name></type> <name>explosionCounter</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>MAX_SCRAP</name></expr>]</index></name></expr></init></decl>;</decl_stmt>  <comment type="line">// Time counters for explosions.</comment>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type>   <name>explosionIndex</name></decl>;</decl_stmt>                         <comment type="line">// Next available explosion sprite.</comment>

	  <comment type="line">// Sound clips.</comment>

	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>AudioClip</name></type> <name>crashSound</name></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>AudioClip</name></type> <name>explosionSound</name></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>AudioClip</name></type> <name>fireSound</name></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>AudioClip</name></type> <name>missleSound</name></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>AudioClip</name></type> <name>saucerSound</name></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>AudioClip</name></type> <name>thrustersSound</name></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>AudioClip</name></type> <name>warpSound</name></decl>;</decl_stmt>

	  <comment type="line">// Flags for looping sound clips.</comment>

	   <decl_stmt><decl><specifier>public</specifier> <type><name>boolean</name></type> <name>thrustersPlaying</name></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier>  <type><name>boolean</name></type> <name>saucerPlaying</name></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier>  <type><name>boolean</name></type> <name>misslePlaying</name></decl>;</decl_stmt>

	  <comment type="line">// Counter and total used to track the loading of the sound clips.</comment>

	   <decl_stmt><decl><specifier>public</specifier>  <type><name>int</name></type> <name>clipTotal</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier>  <type><name>int</name></type> <name>clipsLoaded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	  <comment type="line">// Off screen image.</comment>

	  <decl_stmt><decl><specifier>public</specifier> <type><name>Dimension</name></type> <name>offDimension</name></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>Image</name></type>     <name>offImage</name></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier>  <type><name>Graphics</name></type>  <name>offGraphics</name></decl>;</decl_stmt>

	  <comment type="line">// Data for the screen font.</comment>

	  <decl_stmt><decl><specifier>public</specifier>  <type><name>Font</name></type> <name>font</name>      <init>= <expr><operator>new</operator> <call><name>Font</name><argument_list>(<argument><expr><literal type="string">"Helvetica"</literal></expr></argument>, <argument><expr><name><name>Font</name><operator>.</operator><name>BOLD</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><specifier>public</specifier> <type><name>FontMetrics</name></type> <name>fm</name> <init>= <expr><call><name>getFontMetrics</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>fontWidth</name>  <init>= <expr><call><name><name>fm</name><operator>.</operator><name>getMaxAdvance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	   <decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>fontHeight</name> <init>= <expr><call><name><name>fm</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    
	    <decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type>     <name>numStars</name></decl>;</decl_stmt>
	    <decl_stmt><decl><specifier>public</specifier>  <type><name><name>Point</name><index>[]</index></name></type> <name>stars</name></decl>;</decl_stmt>
		
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/Domain/ufo.java" hash="4f92d21e988888ee44a04bd15c55f1d660c21f60"><package>package <name>Domain</name>;</package>
<import>import <name><name>Application</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>TechnicalServices</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>UI</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>ufo</name> <super><extends>extends <name>AsteroidsSprite</name></extends></super><block>{
	<decl_stmt><decl><type><name>information</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>information</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	  <function><specifier>public</specifier> <type><name>void</name></type> <name>initUfo</name><parameter_list>()</parameter_list> <block>{

		    <decl_stmt><decl><type><name>double</name></type> <name>angle</name></decl>, <decl><type ref="prev"/><name>speed</name></decl>;</decl_stmt>

		    <comment type="line">// Randomly set flying saucer at left or right edge of the screen.</comment>

		    <expr_stmt><expr><name>active</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name><name>AsteroidsSprite</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name>angle</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>speed</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
		    <expr_stmt><expr><name>deltaX</name> <operator>=</operator> <name>speed</name> <operator>*</operator> <operator>-</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name>deltaY</name> <operator>=</operator> <name>speed</name> <operator>*</operator>  <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if>if <condition>(<expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0.5</literal></expr>)</condition><then> <block>{
		      <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>width</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><name>deltaX</name> <operator>=</operator> <operator>-</operator><name>deltaX</name></expr>;</expr_stmt>
		    }</block></then></if>
		    <if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
		      <block type="pseudo"><expr_stmt><expr><name>deltaY</name> <operator>=</operator> <name>deltaY</name></expr>;</expr_stmt></block></then></if>
		    <expr_stmt><expr><call><name>render</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>saucerPlaying</name></name> <operator>=</operator> <operator>(</operator><literal type="boolean">true</literal><operator>)</operator></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name></expr>)</condition><then>
		    	<block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>saucerSound</name><operator>.</operator><name>loop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>ufoCounter</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>AsteroidsSprite</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name>deltaX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		  }</block></function>

		  <function><specifier>public</specifier> <type><name>void</name></type> <name>updateUfo</name><parameter_list>( <parameter><decl><type><name><name>AsteroidsSprite</name><index>[]</index></name></type> <name>photons</name></decl></parameter>, <parameter><decl><type><name>AsteroidsSprite</name></type> <name>missle</name></decl></parameter>, <parameter><decl><type><name>AsteroidsSprite</name></type> <name>explosion</name></decl></parameter> )</parameter_list> <block>{

		    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
		    <decl_stmt><decl><type><name>boolean</name></type> <name>wrapped</name></decl>;</decl_stmt>

		    <comment type="line">// Move the flying saucer and check for collision with a photon. Stop it</comment>
		    <comment type="line">// when its counter has expired.</comment>

		    <if>if <condition>(<expr><name>active</name></expr>)</condition><then> <block>{
		      <if>if <condition>(<expr><operator>--</operator><name><name>info</name><operator>.</operator><name>ufoCounter</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		        <if>if <condition>(<expr><operator>--</operator><name><name>info</name><operator>.</operator><name>ufoPassesLeft</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
		          <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>initUfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
		        <else>else
		          <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>stopUfo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
		      }</block></then></if>
		      <if>if <condition>(<expr><name>active</name></expr>)</condition><then> <block>{
		        <expr_stmt><expr><call><name>advance</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        <expr_stmt><expr><call><name>render</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_SHOTS</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		          <block type="pseudo"><if>if <condition>(<expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>active</name> <operator>&amp;&amp;</operator> <call><name>isColliding</name><argument_list>(<argument><expr><name><name>photons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		            <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>sound</name></name></expr>)</condition><then>
		            	<block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>crashSound</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>explode</name><operator>)</operator> <name>explosion</name><operator>)</operator><operator>.</operator><call><name>explode</name><argument_list>(<argument><expr><name>explosion</name></expr></argument>, <argument><expr><name>photons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		            <expr_stmt><expr><call><name>stopUfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		            <expr_stmt><expr><name><name>info</name><operator>.</operator><name>score</name></name> <operator>+=</operator> <name><name>info</name><operator>.</operator><name>UFO_POINTS</name></name></expr>;</expr_stmt>
		          }</block></then></if></block></for>

		          <comment type="line">// On occassion, fire a missle at the ship if the saucer is not too</comment>
		          <comment type="line">// close to it.</comment>

		          <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		          <if>if <condition>(<expr><name>active</name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>hyperCounter</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		              <name>active</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>missle</name><operator>.</operator><name>active</name></name> <operator>&amp;&amp;</operator>
		              <name>d</name> <operator>&gt;</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCK_SPEED</name></name> <operator>*</operator> <name><name>info</name><operator>.</operator><name>FPS</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>
		              <call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MISSLE_PROBABILITY</name></name></expr>)</condition><then>
		            <block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>missle</name><operator>)</operator> <name>missle</name><operator>)</operator><operator>.</operator><call><name>initMissle</name><argument_list>(<argument><expr><name>explosion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		       }</block></then></if>
		    }</block></then></if>
		  }</block></function>

		  <function><specifier>public</specifier> <type><name>void</name></type> <name>stopUfo</name><parameter_list>()</parameter_list> <block>{

		    <expr_stmt><expr><name>active</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>ufoCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>ufoPassesLeft</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>loaded</name></name></expr>)</condition><then>
		    	<block type="pseudo"><expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>saucerSound</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		    
		  }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_assig6/src/Application/Main.java" hash="d307bd93416bd9ea86ddc6568f60faff789f9208"><package>package <name>Application</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>applet</name><operator>.</operator><name>Applet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>applet</name><operator>.</operator><name>AudioClip</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Dimension</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Font</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>FontMetrics</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Graphics</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Image</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>Polygon</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>KeyListener</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>

<import>import <name><name>Application</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>Domain</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>TechnicalServices</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>UI</name><operator>.</operator><name>*</name></name>;</import>

<comment type="block" format="javadoc">/******************************************************************************
  Main applet code.
******************************************************************************/</comment>

<class><specifier>public</specifier> class <name>Main</name> <super><extends>extends <name>Applet</name></extends> <implements>implements <name>Runnable</name></implements></super> <block>{

	<decl_stmt><decl><type><name>information</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>information</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>UICreater</name></type> <name>uicreate</name> <init>= <expr><operator>new</operator> <call><name>UICreater</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>KeyInputs</name></type> <name>keyInputs</name> <init>= <expr><operator>new</operator> <call><name>KeyInputs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>explode</name></type> <name>explode1</name> <init>= <expr><operator>new</operator> <call><name>explode</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ship</name></type> <name>Ship</name> <init>= <expr><operator>(</operator><name>ship</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>ship</name></name></expr></init></decl>;</decl_stmt>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>updateShip</name><parameter_list>(<parameter><decl><type><name>AsteroidsSprite</name></type> <name>fwdThruster</name></decl></parameter>, <parameter><decl><type><name>AsteroidsSprite</name></type> <name>revThruster</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>playing</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>down</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hyperCounter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shipCounter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shipsLeft</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hyperCount</name></decl></parameter>)</parameter_list> <block>{

	    <decl_stmt><decl><type><name>double</name></type> <name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>, <decl><type ref="prev"/><name>speed</name></decl>;</decl_stmt>

	    <if>if <condition>(<expr><operator>!</operator><name>playing</name></expr>)</condition><then>
	      <block type="pseudo"><return>return ;</return></block></then></if>

	    <comment type="line">// Rotate the ship if left or right cursor key is down.</comment>

	    <if>if <condition>(<expr><name>left</name></expr>)</condition><then> <block>{
	    	<expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>angle</name></name> <operator>+=</operator> <name><name>Ship</name><operator>.</operator><name>SHIP_ANGLE_STEP</name></name></expr>;</expr_stmt>
	      <if>if <condition>(<expr><name><name>Ship</name><operator>.</operator><name>angle</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>)</condition><then>
	    	  <block type="pseudo"><expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>angle</name></name> <operator>-=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>;</expr_stmt></block></then></if>
	    }</block></then></if>
	    <if>if <condition>(<expr><name>right</name></expr>)</condition><then> <block>{
	    	<expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>angle</name></name> <operator>-=</operator> <name><name>Ship</name><operator>.</operator><name>SHIP_ANGLE_STEP</name></name></expr>;</expr_stmt>
	      <if>if <condition>(<expr><name><name>Ship</name><operator>.</operator><name>angle</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	    	  <block type="pseudo"><expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>angle</name></name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr>;</expr_stmt></block></then></if>
	    }</block></then></if>

	    <comment type="line">// Fire thrusters if up or down cursor key is down.</comment>

	    <expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>Ship</name><operator>.</operator><name>SHIP_SPEED_STEP</name></name> <operator>*</operator> <operator>-</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name><name>Ship</name><operator>.</operator><name>angle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>Ship</name><operator>.</operator><name>SHIP_SPEED_STEP</name></name> <operator>*</operator>  <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name><name>Ship</name><operator>.</operator><name>angle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if>if <condition>(<expr><name>up</name></expr>)</condition><then> <block>{
	    	<expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>deltaX</name></name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
	    	<expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>deltaY</name></name> <operator>+=</operator> <name>dy</name></expr>;</expr_stmt>
	    }</block></then></if>
	    <if>if <condition>(<expr><name>down</name></expr>)</condition><then> <block>{
	    	<expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>deltaX</name></name> <operator>-=</operator> <name>dx</name></expr>;</expr_stmt>
	    	<expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>deltaY</name></name> <operator>-=</operator> <name>dy</name></expr>;</expr_stmt>
	    }</block></then></if>

	    <comment type="line">// Don't let ship go past the speed limit.</comment>

	    <if>if <condition>(<expr><name>up</name> <operator>||</operator> <name>down</name></expr>)</condition><then> <block>{
	      <expr_stmt><expr><name>speed</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name><name>Ship</name><operator>.</operator><name>deltaX</name></name> <operator>*</operator> <name><name>Ship</name><operator>.</operator><name>deltaX</name></name> <operator>+</operator> <name><name>Ship</name><operator>.</operator><name>deltaY</name></name> <operator>*</operator> <name><name>Ship</name><operator>.</operator><name>deltaY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if>if <condition>(<expr><name>speed</name> <operator>&gt;</operator> <name><name>Ship</name><operator>.</operator><name>MAX_SHIP_SPEED</name></name></expr>)</condition><then> <block>{
	        <expr_stmt><expr><name>dx</name> <operator>=</operator> <name><name>Ship</name><operator>.</operator><name>MAX_SHIP_SPEED</name></name> <operator>*</operator> <operator>-</operator><call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name><name>Ship</name><operator>.</operator><name>angle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <expr_stmt><expr><name>dy</name> <operator>=</operator> <name><name>Ship</name><operator>.</operator><name>MAX_SHIP_SPEED</name></name> <operator>*</operator>  <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name><name>Ship</name><operator>.</operator><name>angle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        <if>if <condition>(<expr><name>up</name></expr>)</condition><then>
	        	<block type="pseudo"><expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>deltaX</name></name> <operator>=</operator> <name>dx</name></expr>;</expr_stmt></block></then>
	        <else>else
	        	<block type="pseudo"><expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>deltaX</name></name> <operator>=</operator> <operator>-</operator><name>dx</name></expr>;</expr_stmt></block></else></if>
	        <if>if <condition>(<expr><name>up</name></expr>)</condition><then>
	        	<block type="pseudo"><expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>deltaY</name></name> <operator>=</operator> <name>dy</name></expr>;</expr_stmt></block></then>
	        <else>else
	        	<block type="pseudo"><expr_stmt><expr><name><name>Ship</name><operator>.</operator><name>deltaY</name></name> <operator>=</operator> <operator>-</operator><name>dy</name></expr>;</expr_stmt></block></else></if>
	      }</block></then></if>
	    }</block></then></if>

	    <comment type="line">// Move the ship. If it is currently in hyperspace, advance the countdown.</comment>

	    <if>if <condition>(<expr><name><name>Ship</name><operator>.</operator><name>active</name></name></expr>)</condition><then> <block>{
	    	<expr_stmt><expr><call><name><name>Ship</name><operator>.</operator><name>advance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    	<expr_stmt><expr><call><name><name>Ship</name><operator>.</operator><name>render</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	      <if>if <condition>(<expr><name>hyperCounter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	        <block type="pseudo"><expr_stmt><expr><name>hyperCounter</name><operator>--</operator></expr>;</expr_stmt></block></then></if>

	      <comment type="line">// Update the thruster sprites to match the ship sprite.</comment>

	      <expr_stmt><expr><name><name>fwdThruster</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>Ship</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>fwdThruster</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>Ship</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>fwdThruster</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <name><name>Ship</name><operator>.</operator><name>angle</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name>fwdThruster</name><operator>.</operator><name>render</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>revThruster</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>Ship</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>revThruster</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>Ship</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>revThruster</name><operator>.</operator><name>angle</name></name> <operator>=</operator> <name><name>Ship</name><operator>.</operator><name>angle</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name><name>revThruster</name><operator>.</operator><name>render</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	    }</block></then>

	    <comment type="line">// Ship is exploding, advance the countdown or create a new ship if it is</comment>
	    <comment type="line">// done exploding. The new ship is added as though it were in hyperspace.</comment>
	    <comment type="line">// (This gives the player time to move the ship if it is in imminent</comment>
	    <comment type="line">// danger.) If that was the last ship, end the game.</comment>

	    <elseif>else
	      <if>if <condition>(<expr><operator>--</operator><name>shipCounter</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
	        <block type="pseudo"><if>if <condition>(<expr><name>shipsLeft</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
	          <expr_stmt><expr><call><name><name>Ship</name><operator>.</operator><name>initShip</name></name><argument_list>(<argument><expr><name>revThruster</name></expr></argument>, <argument><expr><name>revThruster</name></expr></argument>, <argument><expr><name>down</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>hyperCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	          <expr_stmt><expr><name>hyperCounter</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>HYPER_COUNT</name></name></expr>;</expr_stmt>
	        }</block></then>
	        <else>else
	          <block type="pseudo"><expr_stmt><expr><call><name>endGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if></block></then></if></elseif></if>
		
	  }</block></function>
  <function><specifier>public</specifier> <type><name>String</name></type> <name>getAppletInfo</name><parameter_list>()</parameter_list> <block>{

    <comment type="line">// Return copyright information.</comment>

    <return>return<expr><operator>(</operator><name><name>info</name><operator>.</operator><name>copyText</name></name><operator>)</operator></expr>;</return>
  }</block></function>
  <decl_stmt><decl><type><name>int</name></type>     <name>numStars</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>Point</name><index>[]</index></name></type> <name>stars</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Graph</name></type> <name>graph</name> <init>= <expr><operator>new</operator> <call><name>Graph</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{

    <decl_stmt><decl><type><name>Dimension</name></type> <name>d</name> <init>= <expr><call><name>getSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="line">// Display copyright information.</comment>

    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>copyText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set up key event handling and set focus to applet window.</comment>

    <expr_stmt><expr><call><name>addKeyListener</name><argument_list>(<argument><expr><operator>(</operator><name>KeyListener</name><operator>)</operator> <name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>requestFocus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Save the screen size.</comment>

    <expr_stmt><expr><name><name>AsteroidsSprite</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>AsteroidsSprite</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

    <comment type="line">// Generate the starry background.</comment>

    <expr_stmt><expr><name>numStars</name> <operator>=</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>height</name></name> <operator>/</operator> <literal type="number">5000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Graph</name><operator>)</operator> <name>graph</name><operator>)</operator><operator>.</operator><call><name>getNumStars</name><argument_list>(<argument><expr><name>numStars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stars</name> <operator>=</operator> <operator>new</operator> <name><name>Point</name><index>[<expr><name>numStars</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numStars</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block type="pseudo"><expr_stmt><expr><name><name>stars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Point</name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name><name>AsteroidsSprite</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Graph</name><operator>)</operator> <name>graph</name><operator>)</operator><operator>.</operator><call><name>getStars</name><argument_list>(<argument><expr><name>stars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// Create shape for the ship sprite.</comment>

    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>ship</name></name> <operator>=</operator> <operator>new</operator> <call><name>ship</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ship</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create shapes for the ship thrusters.</comment>

    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>fwdThruster</name></name> <operator>=</operator> <operator>new</operator> <call><name>AsteroidsSprite</name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>fwdThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>fwdThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>fwdThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>fwdThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>revThruster</name></name> <operator>=</operator> <operator>new</operator> <call><name>AsteroidsSprite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>revThruster</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create shape for each photon sprites.</comment>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_SHOTS</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>AsteroidsSprite</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <comment type="line">// Create shape for the flying saucer.</comment>

    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>ufo</name></name> <operator>=</operator> <operator>new</operator> <call><name>ufo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">10</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create shape for the guided missle.</comment>

    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>missle</name></name> <operator>=</operator> <operator>new</operator> <call><name>missle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missle</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missle</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missle</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missle</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missle</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missle</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>missle</name><operator>.</operator><name>shape</name><operator>.</operator><name>addPoint</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create asteroid sprites.</comment>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_ROCKS</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    	<block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>asteroids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>AsteroidsSprite</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>

    <comment type="line">// Create explosion sprites.</comment>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>.</operator><name>MAX_SCRAP</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    	<block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>explosions</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>AsteroidsSprite</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>

    <comment type="line">// Initialize game data and put us in 'game over' mode.</comment>

    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>highScore</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>sound</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>detail</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>endGame</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>initGame</name><parameter_list>()</parameter_list> <block>{

    <comment type="line">// Initialize game data and sprites.</comment>

	  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>score</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>shipsLeft</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>MAX_SHIPS</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>asteroidsSpeed</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>MIN_ROCK_SPEED</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>newShipScore</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>NEW_SHIP_POINTS</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>newUfoScore</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>NEW_UFO_POINTS</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>thrustersPlaying</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ship</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>ship</name></name><operator>)</operator><operator>.</operator><call><name>initShip</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fwdThruster</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>revThruster</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>loaded</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>thrustersSound</name></name></expr></argument> ,<argument><expr><name><name>info</name><operator>.</operator><name>hyperCounter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Photons</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>photon</name></name><operator>)</operator><operator>.</operator><call><name>initPhotons</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>photons</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ufo</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>ufo</name></name><operator>)</operator><operator>.</operator><call><name>stopUfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>missle</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>missle</name></name><operator>)</operator><operator>.</operator><call><name>stopMissle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Asteroid</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>asteroid</name></name><operator>)</operator><operator>.</operator><call><name>initAsteroids</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>asteroids</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>asteroidIsSmall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>explosionIndex</name></name>  <operator>=</operator> <call><name><name>explode1</name><operator>.</operator><name>initExplosions</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>explosions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>playing</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>paused</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>photonTime</name></name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>endGame</name><parameter_list>()</parameter_list> <block>{

    <comment type="line">// Stop ship, flying saucer, guided missle and associated sounds.</comment>

	  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>playing</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ship</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>ship</name></name><operator>)</operator><operator>.</operator><call><name>stopShip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ufo</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>ufo</name></name><operator>)</operator><operator>.</operator><call><name>stopUfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>missle</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>missle</name></name><operator>)</operator><operator>.</operator><call><name>stopMissle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{

    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>loopThread</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>loopThread</name></name> <operator>=</operator> <operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>loopThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>loaded</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>loadThread</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>loadThread</name></name> <operator>=</operator> <operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>loadThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{

    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>loopThread</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    	<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>loopThread</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>loopThread</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>loadThread</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    	<expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>loadThread</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>loadThread</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>
  <decl_stmt><decl><type><name>AudioClip1</name></type> <name>audio</name> <init>= <expr><operator>new</operator> <call><name>AudioClip1</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>startTime</name></decl>;</decl_stmt>

    <comment type="line">// Lower this thread's priority and get the current time.</comment>

    <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setPriority</name><argument_list>(<argument><expr><name><name>Thread</name><operator>.</operator><name>MIN_PRIORITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>startTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Run thread for loading sounds.</comment>

    <if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>loaded</name></name> <operator>&amp;&amp;</operator> <call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>info</name><operator>.</operator><name>loadThread</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>audio</name><operator>.</operator><name>loadSounds</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>crashSound</name></name> <operator>=</operator> <call><name><name>audio</name><operator>.</operator><name>getCrashSound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>explosionSound</name></name> <operator>=</operator> <call><name><name>audio</name><operator>.</operator><name>getExplosionSound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>fireSound</name></name> <operator>=</operator> <call><name><name>audio</name><operator>.</operator><name>getFireSound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>missleSound</name></name> <operator>=</operator> <call><name><name>audio</name><operator>.</operator><name>getMissleSound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>saucerSound</name></name> <operator>=</operator> <call><name><name>audio</name><operator>.</operator><name>getSaucerSound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>thrustersSound</name></name> <operator>=</operator> <call><name><name>audio</name><operator>.</operator><name>getThrustersSound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>warpSound</name></name> <operator>=</operator> <call><name><name>audio</name><operator>.</operator><name>getWarpSound</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>clipsLoaded</name></name> <operator>=</operator> <call><name><name>audio</name><operator>.</operator><name>getClipsLoaded</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>clipTotal</name></name> <operator>=</operator> <call><name><name>audio</name><operator>.</operator><name>getClipTotal</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name><operator>.</operator><name>loaded</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>loadThread</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// This is the main loop.</comment>

    <while>while <condition>(<expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>info</name><operator>.</operator><name>loopThread</name></name></expr>)</condition> <block>{

      <if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>.</operator><name>paused</name></name></expr>)</condition><then> <block>{

        <comment type="line">// Move and process all sprites.</comment>
    	  
    	<expr_stmt><expr><call><name>updateShip</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>fwdThruster</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>revThruster</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>playing</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>left</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>up</name></name></expr></argument> ,<argument><expr><name><name>info</name><operator>.</operator><name>down</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>hyperCounter</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>shipCounter</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>shipsLeft</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>HYPER_COUNT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Photons</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>photon</name></name><operator>)</operator><operator>.</operator><call><name>updatePhotons</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>photons</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ufo</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>ufo</name></name><operator>)</operator><operator>.</operator><call><name>updateUfo</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>photons</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>missle</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>explosion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>missle</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>missle</name></name><operator>)</operator><operator>.</operator><call><name>updateMissle</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>photons</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>ship</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>ufo</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>explosion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Asteroid</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>asteroid</name></name><operator>)</operator><operator>.</operator><call><name>updateAsteroids</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>asteroids</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>photons</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>asteroidIsSmall</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>ship</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>ufo</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>missle</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>explosions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>explosions</name></name> <operator>=</operator> <call><name><name>explode1</name><operator>.</operator><name>updateExplosions</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>explosions</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>explosionCounter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check the score and advance high score, add a new ship or start the</comment>
        <comment type="line">// flying saucer as necessary.</comment>

        <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>score</name></name> <operator>&gt;</operator> <name><name>info</name><operator>.</operator><name>highScore</name></name></expr>)</condition><then>
        	<block type="pseudo"><expr_stmt><expr><name><name>info</name><operator>.</operator><name>highScore</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>score</name></name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>score</name></name> <operator>&gt;</operator> <name><name>info</name><operator>.</operator><name>newShipScore</name></name></expr>)</condition><then> <block>{
        	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>newShipScore</name></name> <operator>+=</operator> <name><name>info</name><operator>.</operator><name>NEW_SHIP_POINTS</name></name></expr>;</expr_stmt>
        	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>shipsLeft</name></name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>playing</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>score</name></name> <operator>&gt;</operator> <name><name>info</name><operator>.</operator><name>newUfoScore</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>info</name><operator>.</operator><name>ufo</name><operator>.</operator><name>active</name></name></expr>)</condition><then> <block>{
        	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>newUfoScore</name></name> <operator>+=</operator> <name><name>info</name><operator>.</operator><name>NEW_UFO_POINTS</name></name></expr>;</expr_stmt>
        	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>ufoPassesLeft</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>UFO_PASSES</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ufo</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>ufo</name></name><operator>)</operator><operator>.</operator><call><name>initUfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">// If all asteroids have been destroyed create a new batch.</comment>

        <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>asteroidsLeft</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><if>if <condition>(<expr><operator>--</operator><name><name>info</name><operator>.</operator><name>asteroidsCounter</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
            	<block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>Asteroid</name><operator>)</operator> <name><name>info</name><operator>.</operator><name>asteroid</name></name><operator>)</operator><operator>.</operator><call><name>initAsteroids</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>asteroids</name></name></expr></argument>,<argument><expr><name><name>info</name><operator>.</operator><name>asteroidIsSmall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></then></if>
      }</block></then></if>

      <comment type="line">// Update the screen and set the timer for the next loop.</comment>

      <expr_stmt><expr><call><name>repaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{
        <expr_stmt><expr><name>startTime</name> <operator>+=</operator> <name><name>info</name><operator>.</operator><name>DELAY</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>startTime</name> <operator>-</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
      <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <break>break;</break>
      }</block></catch></try>
    }</block></while>
  }</block></function>


}</block></class></unit>

</unit>
