<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/src/Car.java" hash="e63bf2ea47e4c03f10f9a7f0b512639a9ce6a299">
<class><specifier>public</specifier> class <name>Car</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>Point</name></type> <name>position</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>availableTurn</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Ride</name></type> <name>currentRide</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>Car</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>availableTurn</name></decl></parameter>, <parameter><decl><type><name>Ride</name></type> <name>currentRide</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setCurrentRide</name></name><argument_list>(<argument><expr><name>currentRide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>availableTurn</name></name> <operator>=</operator> <name>availableTurn</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>Car</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>position</name><operator>.</operator><name>setX</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>position</name><operator>.</operator><name>setY</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>availableTurn</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>Point</name></type> <name>getPosition</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>position</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setPosition</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getAvailableTurn</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>availableTurn</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setAvailableTurn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>availableTurn</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>availableTurn</name></name> <operator>=</operator> <name>availableTurn</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>Ride</name></type> <name>getCurrentRide</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>currentRide</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setCurrentRide</name><parameter_list>(<parameter><decl><type><name>Ride</name></type> <name>currentRide</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentRide</name></name> <operator>=</operator> <name>currentRide</name></expr>;</expr_stmt>
	}</block></function>
	
	
}</block></class>

</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/src/LengthCounter.java" hash="f978e013ce44fca4a1d7edd30224d7464731df74"><package>package <name>hashcode</name>;</package>

<class><specifier>public</specifier> class <name>LengthCounter</name> <block>{
	<function><specifier>public</specifier> <type><name>int</name></type> <name>distence</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>starty</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endx</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>endy</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>startx</name> <operator>-</operator> <name>endx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>starty</name> <operator>-</operator> <name>endy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <name>x</name><operator>+</operator><name>y</name></expr>;</expr_stmt>
		<return>return <expr><name>length</name></expr>;</return>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/src/Main.java" hash="dbb79d7cbcc59ee6e33c6cba2e70d2578f084f36"><import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>Main</name> <block>{
	<decl_stmt><decl><type><name>List</name></type> <name>listCars</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name></type> <name>rids</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/src/MainDaniel.java" hash="b81d81af3f1958e79aab0ac905a1eb20c3c235e3">
<class><specifier>public</specifier> class <name>MainDaniel</name> <block>{

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// TODO Auto-generated method stub</comment>
		
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/src/Point.java" hash="4e7b2193bcce5d0bbb01d21f74004104902eac13">
<class><specifier>public</specifier> class <name>Point</name> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>Point</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>Point</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getX</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>x</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setX</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getY</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>y</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setY</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
	}</block></function>
	
	
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/src/HashCode.java" hash="9f93efb6e70eff1221f2f6befafe5606e066e673"><import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<class><specifier>public</specifier> class <name>HashCode</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>TheTown</name></type> <name>town</name> <init>= <expr><call><name><name>InputReader</name><operator>.</operator><name>fetch</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Ride</name></argument>&gt;</argument_list></name></type> <name>rideList</name> <init>= <expr><call><name><name>town</name><operator>.</operator><name>getRideList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Car</name></argument>&gt;</argument_list></name></type> <name>carList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>town</name><operator>.</operator><name>getVehicles</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// TODO Auto-generated method stub</comment>
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>town</name><operator>.</operator><name>getVehicles</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>Car</name></type> <name>car</name> <init>= <expr><operator>new</operator> <call><name>Car</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>carList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>car</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>town</name><operator>.</operator><name>getSteps</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>getAvailableCars</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>rideList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"["</literal> <operator>+</operator> <call><name><name>rideList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStartX</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>rideList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStartY</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"]"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		
		
	}</block></function>
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>distanceBetween</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>b</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>b</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>getAvailableCars</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curr_turn</name></decl></parameter>)</parameter_list> <block>{
		
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>carList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>Car</name></type> <name>car</name> <init>= <expr><call><name><name>carList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><call><name><name>car</name><operator>.</operator><name>getAvailableTurn</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>curr_turn</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>assignCars</name><argument_list>(<argument><expr><name>car</name></expr></argument> ,<argument><expr><name>curr_turn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		
	}</block></function>

	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>assignCars</name><parameter_list>(<parameter><decl><type><name>Car</name></type> <name>car</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curr_turn</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>mostUrgent</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>totalTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Ride</name></type> <name>urgentRide</name> <init>= <expr><operator>new</operator> <call><name>Ride</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>rideList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>Ride</name></type> <name>ride</name> <init>= <expr><call><name><name>rideList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>distanceToStart</name> <init>= <expr><call><name>distanceBetween</name><argument_list>(<argument><expr><call><name><name>car</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rideList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStart</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>waitTime</name> <init>= <expr><call><name><name>ride</name><operator>.</operator><name>getEarliestStart</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>curr_turn</name></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><name>totalTime</name> <operator>=</operator> <name>distanceToStart</name> <operator>+</operator> <call><name>distanceBetween</name><argument_list>(<argument><expr><call><name><name>ride</name><operator>.</operator><name>getStart</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ride</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name>waitTime</name></expr>;</expr_stmt>
			
			<decl_stmt><decl><type><name>int</name></type> <name>urgency</name> <init>= <expr><operator>(</operator> <call><name><name>ride</name><operator>.</operator><name>getLatestFinish</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>ride</name><operator>.</operator><name>getEarliestStart</name></name><argument_list>()</argument_list></call> <operator>)</operator> <operator>-</operator> <call><name>distanceBetween</name><argument_list>(<argument><expr><call><name><name>ride</name><operator>.</operator><name>getStart</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ride</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <name>distanceToStart</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>mostUrgent</name> <operator>&gt;</operator> <name>urgency</name> <operator>&amp;&amp;</operator> <name>urgency</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>mostUrgent</name> <operator>=</operator> <name>urgency</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>urgentRide</name> <operator>=</operator> <name>ride</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
		<expr_stmt><expr><call><name><name>car</name><operator>.</operator><name>setAvailableTurn</name></name><argument_list>(<argument><expr><name>totalTime</name> <operator>+</operator> <name>curr_turn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>car</name><operator>.</operator><name>setPosition</name></name><argument_list>(<argument><expr><call><name><name>urgentRide</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>car</name><operator>.</operator><name>getAvailableTurn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>car</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function> 
	}</block></class>













</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/GoogleHashCode-master/src/HashCode.java" hash="1f5c0be932220628d36ee91f8452fae1f7926aab">
<class><specifier>public</specifier> class <name>HashCode</name> <block>{

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// TODO Auto-generated method stub</comment>

	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/GoogleHashCode-master/src/MainDaniel.java" hash="b81d81af3f1958e79aab0ac905a1eb20c3c235e3">
<class><specifier>public</specifier> class <name>MainDaniel</name> <block>{

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// TODO Auto-generated method stub</comment>
		
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/src/Ride.java" hash="6a6c058481400d9c12a73db2f9bc579b3c061fd7">
<class><specifier>public</specifier> class <name>Ride</name> <block>{
	
	<decl_stmt><decl><specifier>private</specifier> <type><name>Point</name></type> <name>start</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Point</name></type> <name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>earliestStart</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>latestFinish</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>spareTime</name></decl>;</decl_stmt>
	
	
	<constructor><specifier>public</specifier> <name>Ride</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>earliestStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>latestFinish</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>start</name><operator>.</operator><name>setX</name></name><argument_list>(<argument><expr><name>startX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>start</name><operator>.</operator><name>setY</name></name><argument_list>(<argument><expr><name>startY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>end</name><operator>.</operator><name>setX</name></name><argument_list>(<argument><expr><name>endX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>end</name><operator>.</operator><name>setY</name></name><argument_list>(<argument><expr><name>endY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>earliestStart</name></name> <operator>=</operator> <name>earliestStart</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>latestFinish</name></name> <operator>=</operator> <name>latestFinish</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>spareTime</name></name> <operator>=</operator> <name>latestFinish</name> <operator>-</operator> <name>earliestStart</name> <operator>-</operator> <call><name>distanceBetween</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>Ride</name><parameter_list>()</parameter_list> <block>{
		
	}</block></constructor>
	<function><specifier>public</specifier> <type><name>Point</name></type> <name>getStart</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>start</name></name></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>Point</name></type> <name>getEnd</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>end</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>distanceBetween</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>b</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>b</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getStartX</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>start</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>setStartX</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startX</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>start</name><operator>.</operator><name>setX</name></name><argument_list>(<argument><expr><name>startX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>int</name></type> <name>getStartY</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>start</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>setStartY</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startY</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>start</name><operator>.</operator><name>setY</name></name><argument_list>(<argument><expr><name>startY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>int</name></type> <name>getEndX</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>end</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>setEndX</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>endX</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>end</name><operator>.</operator><name>setX</name></name><argument_list>(<argument><expr><name>endX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>int</name></type> <name>getEndY</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>end</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>setEndY</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>endY</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>end</name><operator>.</operator><name>setY</name></name><argument_list>(<argument><expr><name>endY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>int</name></type> <name>getEarliestStart</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>earliestStart</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>setEarliestStart</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>earliestStart</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>earliestStart</name></name> <operator>=</operator> <name>earliestStart</name></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>int</name></type> <name>getLatestFinish</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>latestFinish</name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>setLatestFinish</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>latestFinish</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>latestFinish</name></name> <operator>=</operator> <name>latestFinish</name></expr>;</expr_stmt>
	}</block></function>
	
	
	

}</block></class>

</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/src/TheTown.java" hash="90875210c1a5b2ac3dd67ee1178bcdec3da131be"><import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<class><specifier>public</specifier> class <name>TheTown</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>columns</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>vehicles</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>rides</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bonus</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>steps</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Ride</name></argument>&gt;</argument_list></name></type> <name>rideList</name></decl>;</decl_stmt>
	<constructor><specifier>public</specifier> <name>TheTown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vehicles</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rides</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bonus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>steps</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Ride</name></argument>&gt;</argument_list></name></type> <name>rideList</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <name>columns</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>vehicles</name></name> <operator>=</operator> <name>vehicles</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rides</name></name> <operator>=</operator> <name>rides</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>bonus</name></name> <operator>=</operator> <name>bonus</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>steps</name></name> <operator>=</operator> <name>steps</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rideList</name></name> <operator>=</operator> <name>rideList</name></expr>;</expr_stmt>
	}</block></constructor>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getRows</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>rows</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setRows</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>rows</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getColumns</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>columns</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setColumns</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>columns</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <name>columns</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getVehicles</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>vehicles</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setVehicles</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vehicles</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>vehicles</name></name> <operator>=</operator> <name>vehicles</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getRides</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>rides</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setRides</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rides</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rides</name></name> <operator>=</operator> <name>rides</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getBonus</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>bonus</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setBonus</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bonus</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>bonus</name></name> <operator>=</operator> <name>bonus</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getSteps</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>steps</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setSteps</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>steps</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>steps</name></name> <operator>=</operator> <name>steps</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Ride</name></argument>&gt;</argument_list></name></type> <name>getRideList</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>rideList</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setRideList</name><parameter_list>(<parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Ride</name></argument>&gt;</argument_list></name></type> <name>rideList</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rideList</name></name> <operator>=</operator> <name>rideList</name></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/GoogleHashCode-master/src/Point.java" hash="4e7b2193bcce5d0bbb01d21f74004104902eac13">
<class><specifier>public</specifier> class <name>Point</name> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>Point</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></constructor>
	
	<constructor><specifier>public</specifier> <name>Point</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getX</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>x</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setX</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getY</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>y</name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setY</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
	}</block></function>
	
	
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_GoogleHashCode/src/InputReader.java" hash="11c07cd22403f56d90aba28ba5a612c476256f96"><import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>charset</name><operator>.</operator><name>Charset</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<class><specifier>public</specifier> class <name>InputReader</name> <block>{
	
		
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>TheTown</name></type> <name>fetch</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>BufferedReader</name></type> <name>br</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Ride</name></argument>&gt;</argument_list></name></type> <name>rideList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>rows</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>columns</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>vehicles</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>rides</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>bonus</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>steps</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	    <try>try <block>{
	        <expr_stmt><expr><name>br</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileReader</name><argument_list>(<argument><expr><literal type="string">"resources\\a_example.in"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	
			
	        <decl_stmt><decl><type><name>int</name></type> <name>lineCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	        <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name><name>br</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
	        		<expr_stmt><expr><name>lineCount</name><operator>++</operator></expr>;</expr_stmt>
	        		<if>if<condition>(<expr><name>lineCount</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
	        			<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	        			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>line</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
	        				<if>if<condition>(<expr><call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><then> <block>{
	        					<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
	        				}</block></then></if>
	        				<switch>switch<condition>(<expr><name>counter</name></expr>)</condition> <block>{
		        				<case>case <expr><literal type="number">0</literal></expr>:</case>  <block>{ <comment type="line">// rows</comment>
		        					<expr_stmt><expr><name>rows</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
		        				<case>case <expr><literal type="number">1</literal></expr>:</case> <block>{
		        					<expr_stmt><expr><name>columns</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
		        				<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{
		        					<expr_stmt><expr><name>vehicles</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
		        				<case>case <expr><literal type="number">3</literal></expr>:</case> <block>{
		        					<expr_stmt><expr><name>rides</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
		        				<case>case <expr><literal type="number">4</literal></expr>:</case> <block>{
		        					<expr_stmt><expr><name>bonus</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
		        				<case>case <expr><literal type="number">5</literal></expr>:</case> <block>{
		        					<expr_stmt><expr><name>steps</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
	        				}</block></switch>
	       
	        			}</block></for>
	        			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Rows: "</literal> <operator>+</operator> <name>rows</name> <operator>+</operator> <literal type="string">"\nColumns: "</literal> <operator>+</operator> <name>columns</name> <operator>+</operator> <literal type="string">"\nVehicles: "</literal> <operator>+</operator> <name>vehicles</name> <operator>+</operator> <literal type="string">"\nRides: "</literal> <operator>+</operator> <name>rides</name> <operator>+</operator> <literal type="string">"\nBonus: "</literal> <operator>+</operator> <name>bonus</name> <operator>+</operator> <literal type="string">"\nSteps: "</literal> <operator>+</operator> <name>steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        			
	        		}</block></then>
	        		<else>else <block>{ <comment type="line">// Rides</comment>
	        			<comment type="line">// Rides</comment>
	        			<decl_stmt><decl><type><name>String</name></type> <name>startX</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	        			<decl_stmt><decl><type><name>String</name></type> <name>startY</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	        			<decl_stmt><decl><type><name>String</name></type> <name>endX</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	        			<decl_stmt><decl><type><name>String</name></type> <name>endY</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	        			<decl_stmt><decl><type><name>String</name></type> <name>earliestStart</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	        			<decl_stmt><decl><type><name>String</name></type> <name>latestFinish</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	        			<decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	        			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>line</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
	        				<if>if<condition>(<expr><call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><then> <block>{
	        					<expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
	        				}</block></then></if>
	        				<switch>switch<condition>(<expr><name>counter</name></expr>)</condition> <block>{
		        				<case>case <expr><literal type="number">0</literal></expr>:</case>  <block>{ <comment type="line">// rows</comment>
		        					<expr_stmt><expr><name>startX</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
		        				<case>case <expr><literal type="number">1</literal></expr>:</case> <block>{
		        					<expr_stmt><expr><name>startY</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
		        				<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{
		        					<expr_stmt><expr><name>endX</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
		        				<case>case <expr><literal type="number">3</literal></expr>:</case> <block>{
		        					<expr_stmt><expr><name>endY</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
		        				<case>case <expr><literal type="number">4</literal></expr>:</case> <block>{
		        					<expr_stmt><expr><name>earliestStart</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
		        				<case>case <expr><literal type="number">5</literal></expr>:</case> <block>{
		        					<expr_stmt><expr><name>latestFinish</name> <operator>+=</operator> <call><name><name>line</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		        					<break>break;</break>
		        				}</block>
	        				}</block></switch>
	        		}</block></for>
	    	        <decl_stmt><decl><type><name>Ride</name></type> <name>ride</name> <init>= <expr><operator>new</operator> <call><name>Ride</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>startX</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>startY</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>endX</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>endY</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>earliestStart</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>latestFinish</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	    	        <expr_stmt><expr><call><name><name>rideList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	        	}</block></else></if>
	        }</block></while>
	       
	    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></catch> 
	    
	    
	    <finally>finally <block>{
	        <try>try <block>{
	            <if>if <condition>(<expr><name>br</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
	                <expr_stmt><expr><call><name><name>br</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	            }</block></then></if>
	        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>ex</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></catch></try>
		  }</block></finally></try>
	    <decl_stmt><decl><type><name>TheTown</name></type> <name>town</name> <init>= <expr><operator>new</operator> <call><name>TheTown</name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>rows</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>columns</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>vehicles</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>rides</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>bonus</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>steps</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rideList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>town</name></expr>;</return>
		}</block></function>
}</block></class>
</unit>

</unit>
