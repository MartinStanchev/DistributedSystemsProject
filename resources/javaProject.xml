<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/data/ShowBooks.java" hash="8d259a8fedb9590117b46b65ddc0fba5fd1a2c58"><package>package <name>data</name>;</package>

<class><specifier>public</specifier> class <name>ShowBooks</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>title</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>author</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>genre</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>publisher</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>shelf</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>copy</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>timesBookBeenRentedOut</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ShowBooks</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>shelf</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>copy</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>timesBookBeenRentedOut</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>author</name></name> <operator>=</operator> <name>author</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>genre</name></name> <operator>=</operator> <name>genre</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>publisher</name></name> <operator>=</operator> <name>publisher</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>shelf</name></name> <operator>=</operator> <name>shelf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timesBookBeenRentedOut</name></name> <operator>=</operator> <name>timesBookBeenRentedOut</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>title</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTitle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getAuthor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>author</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAuthor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>author</name></name> <operator>=</operator> <name>author</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getGenre</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>genre</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setGenre</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>genre</name></name> <operator>=</operator> <name>genre</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getPublisher</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>publisher</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setPublisher</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>publisher</name></name> <operator>=</operator> <name>publisher</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getShelf</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>shelf</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setShelf</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>shelf</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>shelf</name></name> <operator>=</operator> <name>shelf</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getCopy</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>copy</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setCopy</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>copy</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <name>copy</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getTimesBookBeenRentedOut</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>timesBookBeenRentedOut</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTimesBookBeenRentedOut</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>timesBookBeenRentedOut</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timesBookBeenRentedOut</name></name> <operator>=</operator> <name>timesBookBeenRentedOut</name></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/data/RentedBooks.java" hash="63275c81da256e0e296f7f1d71e4a3ff15d0dbb2"><package>package <name>data</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>ParseException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<class><specifier>public</specifier> class <name>RentedBooks</name> <super><extends>extends <name>BookData</name></extends></super> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>rentOutDate</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>dateShouldBeReturn</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>RentedBooks</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>rentOutDate</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dateShouldBeReturn</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rentOutDate</name></name> <operator>=</operator> <name>rentOutDate</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>dateShouldBeReturn</name></name> <operator>=</operator> <name>dateShouldBeReturn</name></expr>;</expr_stmt>
	}</block></constructor>


	<function><specifier>public</specifier> <type><name>String</name></type> <name>getRentOutDate</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>rentOutDate</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setRentOutDate</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>rentOutDate</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rentOutDate</name></name> <operator>=</operator> <name>rentOutDate</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getDateShouldBeReturn</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>dateShouldBeReturn</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setDateShouldBeReturn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>dateShouldBeReturn</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>dateShouldBeReturn</name></name> <operator>=</operator> <name>dateShouldBeReturn</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>exactDay</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>returnDate</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>myFormat</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyy-MM-dd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>Date</name></type> <name>date1</name> <init>= <expr><call><name><name>myFormat</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>rentOutDate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Date</name></type> <name>date2</name> <init>= <expr><call><name><name>myFormat</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>returnDate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name></type> <name>diff</name> <init>= <expr><call><name><name>date2</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>date1</name><operator>.</operator><name>getTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>days</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return>return <expr><name>days</name></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>this</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" written by; "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call>
				<operator>+</operator> <call><name><name>System</name><operator>.</operator><name>lineSeparator</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"Rented: "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getRentOutDate</name></name><argument_list>()</argument_list></call>
				<operator>+</operator> <literal type="string">" Due Date: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>dateShouldBeReturn</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getStringTOTxt</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>string</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal>
				<operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal>
				<operator>+</operator> <name><name>this</name><operator>.</operator><name>rentOutDate</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>dateShouldBeReturn</name></name></expr></init></decl>;</decl_stmt>

		<return>return <expr><name>string</name></expr>;</return>
	}</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/data/AvailableBooks.java" hash="0109537829559e9333b9fef221775dc84c03ffa0"><package>package <name>data</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>

<class><specifier>public</specifier> class <name>AvailableBooks</name> <super><extends>extends <name>BookData</name></extends></super> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>shelf</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>copy</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>timesBookBeenRentedOut</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>END_OF_LINE</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>lineSeparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>AvailableBooks</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>shelf</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>shelf</name></name> <operator>=</operator> <name>shelf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>timesBookBeenRentedOut</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getCopy</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>copy</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setCopy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numberOfCopies</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <name>numberOfCopies</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>addCopy</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>copy</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getShelf</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>shelf</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setShelf</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>shelf</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>shelf</name></name> <operator>=</operator> <name>shelf</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>(</operator><literal type="string">"The book "</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>END_OF_LINE</name> <operator>+</operator> <literal type="string">" written by: "</literal>
				<operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>END_OF_LINE</name> <operator>+</operator> <literal type="string">"the genre is:  "</literal>
				<operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>END_OF_LINE</name> <operator>+</operator> <literal type="string">"the publisher : "</literal>
				<operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>END_OF_LINE</name> <operator>+</operator> <literal type="string">"number of copies "</literal>
				<operator>+</operator> <name><name>this</name><operator>.</operator><name>copy</name></name> <operator>+</operator> <name>END_OF_LINE</name>
				<operator>+</operator> <literal type="string">"times the book has been rented out "</literal>
				<operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getTimeBookRentedOut</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>END_OF_LINE</name> <operator>+</operator> <literal type="string">" is on shelf "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>shelf</name></name><operator>)</operator></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>rentCopy</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>copy</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>timesBookBeenRentedOut</name></name><operator>++</operator></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getTimeBookRentedOut</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>timesBookBeenRentedOut</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setTimeBookRentedOut</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>times</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>timesBookBeenRentedOut</name></name> <operator>=</operator> <name>times</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>getCompByTitle</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Comparator</name></type> <name>book</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>AvailableBooks</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>AvailableBooks</name></type> <name>b2</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>bookName1</name> <init>= <expr><call><name><name>b1</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>bookName2</name> <init>= <expr><call><name><name>b2</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<return>return <expr><call><name><name>bookName1</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>bookName2</name></expr></argument>)</argument_list></call></expr>;</return>

			}</block></function>
		}</block></class></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>book</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>getCompByAuthor</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Comparator</name></type> <name>book</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
			<function><specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>AvailableBooks</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>AvailableBooks</name></type> <name>b2</name></decl></parameter>)</parameter_list> <block>{
				<decl_stmt><decl><type><name>String</name></type> <name>authorName1</name> <init>= <expr><call><name><name>b1</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>authorName2</name> <init>= <expr><call><name><name>b2</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<return>return <expr><call><name><name>authorName1</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>authorName2</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>
		}</block></class></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>book</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>getCompByTimeRentedOut</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>Comparator</name></type> <name>book</name> <init>= <expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
			<function><annotation>@<name>Override</name></annotation>
			<specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>AvailableBooks</name></type> <name>book1</name></decl></parameter>, <parameter><decl><type><name>AvailableBooks</name></type> <name>book2</name></decl></parameter>)</parameter_list> <block>{
				<return>return <expr><call><name><name>Integer</name><operator>.</operator><name>compareUnsigned</name></name><argument_list>(<argument><expr><call><name><name>book1</name><operator>.</operator><name>getTimeBookRentedOut</name></name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><call><name><name>book2</name><operator>.</operator><name>getTimeBookRentedOut</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
			}</block></function>
		}</block></class></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>book</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getStringTOTxt</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>string</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal>
				<operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <call><name><name>this</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">","</literal>
				<operator>+</operator> <name><name>this</name><operator>.</operator><name>shelf</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>copy</name></name> <operator>+</operator> <literal type="string">","</literal>
				<operator>+</operator> <name><name>this</name><operator>.</operator><name>timesBookBeenRentedOut</name></name></expr></init></decl>;</decl_stmt>

		<return>return <expr><name>string</name></expr>;</return>
	}</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/data/BookData.java" hash="ec8bb4dc0c54a1d5bb6bbfe4f5d826289328f5bb"><package>package <name>data</name>;</package>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BookData</name> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>title</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>author</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>genre</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>publisher</name></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>BookData</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>author</name></name> <operator>=</operator> <name>author</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>genre</name></name> <operator>=</operator> <name>genre</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>publisher</name></name> <operator>=</operator> <name>publisher</name></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>title</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setTitle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name> <operator>=</operator> <name>title</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getAuthor</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>author</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setAuthor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>author</name></name> <operator>=</operator> <name>author</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getGenre</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>genre</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setGenre</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>genre</name></name> <operator>=</operator> <name>genre</name></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>title</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>author</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>genre</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>publisher</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getPublisher</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>publisher</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setPublisher</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>publisher</name></name> <operator>=</operator> <name>publisher</name></expr>;</expr_stmt>
	}</block></function>

}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/librarysystem/ReadAndWrite.java" hash="533c3b08bd18c13f5be927a7da290e543b5e036b"><package>package <name>librarysystem</name>;</package>

<comment type="block" format="javadoc">/**
 *  
 *  @author George Sarkisian &lt;georgesako@gmail.com&gt;
 *  @version 1.0
 *  @since 2017-08-12
 *  
 *  This class saves and reads list in .json file
 *  Please install Gson library on your eclipse to make the program run without errors.
 */</comment>


<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Type</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>GsonBuilder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>reflect</name><operator>.</operator><name>TypeToken</name></name>;</import>


<class><specifier>public</specifier> class <name>ReadAndWrite</name> <block>{
	<decl_stmt><decl><type><name>Gson</name></type> <name>objGson</name> <init>= <expr><operator>new</operator> <call><name>GsonBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setPrettyPrinting</name><argument_list>()</argument_list></call><operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveGson</name><parameter_list>(<parameter><decl><type><name>List</name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{
		<try>try <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name>fileName</name><operator>+</operator><literal type="string">".json"</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>FileOutputStream</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>s</name> <init>= <expr><call><name><name>objGson</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Writer</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>FileWriter</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>file</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch><catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>public</specifier> <type><name>List</name></type> <name>readGson</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>List</name></type> <name>list</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<try>try <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><name>fileName</name><operator>+</operator><literal type="string">".json"</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>File</name></type> <name>pointFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Scanner</name></type> <name>pointReader</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name>pointFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>gson</name> <init>= <expr><call><name><name>pointReader</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Type</name></type> <name>listType</name> <init>= <expr><operator>new</operator> <class><super><name><name>TypeToken</name><argument_list type="generic">&lt;<argument><name>List</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{}</block></class><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name><name>objGson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>gson</name></expr></argument>, <argument><expr><name>listType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>pointReader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block><catch>catch<parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>fnf</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>fnf</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
		<return>return <expr><name>list</name></expr>;</return>
	}</block></function>
}</block></class>

	
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/data/UserData.java" hash="be5ddd4ff840f17c9e7670dfc71e53a18135e8d5"><package>package <name>data</name>;</package>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>UserData</name> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>userName</name></decl>, <decl><type ref="prev"/><name>password</name></decl>, <decl><type ref="prev"/><name>email</name></decl>, <decl><type ref="prev"/><name>teleNumber</name></decl>, <decl><type ref="prev"/><name>adress</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>END_OF_LINE</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>lineSeparator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RentedBooks</name></argument>&gt;</argument_list></name></type> <name>history</name></decl>;</decl_stmt> 
	<decl_stmt><decl><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RentedBooks</name></argument>&gt;</argument_list></name></type> <name>rentedBooks</name></decl>;</decl_stmt> <comment type="line">//add getters/setters?</comment>


	<constructor><specifier>public</specifier> <name>UserData</name> <parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>userName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>email</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>teleNumber</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>adress</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>userName</name></name> <operator>=</operator> <name>userName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <name>password</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>email</name></name> <operator>=</operator> <name>email</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>teleNumber</name></name> <operator>=</operator> <name>teleNumber</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>adress</name></name> <operator>=</operator> <name>adress</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>history</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rentedBooks</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getHistory</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>this</name><operator>.</operator><name>history</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return> <comment type="line">//fix toString</comment>
	}</block></function>

	<function><specifier>public</specifier> <type><name>RentedBooks</name></type> <name>checkRentedBooks</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <call><name><name>rentedBooks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><call><name><name>rentedBooks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTitle</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<return>return <expr><call><name><name>rentedBooks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setHistory</name><parameter_list>(<parameter><decl><type><name>RentedBooks</name></type> <name>book</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>history</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>book</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>


	<function><specifier>public</specifier> <type><name>void</name></type> <name>addRentedBook</name><parameter_list>(<parameter><decl><type><name>RentedBooks</name></type> <name>book</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>rentedBooks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>book</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>deleteRentedBook</name><parameter_list>(<parameter><decl><type><name>RentedBooks</name></type> <name>book</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>rentedBooks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>book</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>name</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getUserName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>userName</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setUserName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userName</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>userName</name></name> <operator>=</operator> <name>userName</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getPassword</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>password</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setPassword</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <name>password</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getEmail</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>email</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setEmail</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>email</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>email</name></name> <operator>=</operator> <name>email</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getTeleNumber</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>teleNumber</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setTeleNumber</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>teleNumber</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>teleNumber</name></name> <operator>=</operator> <name>teleNumber</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getAdress</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>adress</name></name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setAdress</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>adress</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>adress</name></name> <operator>=</operator> <name>adress</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><operator>(</operator><literal type="string">"The account "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>userName</name></name> <operator>+</operator> <literal type="string">" is owned by "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">".  "</literal> <operator>+</operator> <name>END_OF_LINE</name> 
				<operator>+</operator> <literal type="string">"Telephone number: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>teleNumber</name></name> <operator>+</operator> <name>END_OF_LINE</name>
				<operator>+</operator> <literal type="string">"Email: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>email</name></name><operator>)</operator></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getStringTOTxt</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>string</name> <init>= <expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator><name><name>this</name><operator>.</operator><name>userName</name></name> <operator>+</operator> <literal type="string">","</literal>
				<operator>+</operator> <name><name>this</name><operator>.</operator><name>password</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator><name><name>this</name><operator>.</operator><name>email</name></name> <operator>+</operator> <literal type="string">","</literal>
				<operator>+</operator> <name><name>this</name><operator>.</operator><name>teleNumber</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>adress</name></name></expr></init></decl>;</decl_stmt>

		<return>return <expr><name>string</name></expr>;</return>
	}</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/UI/AdminLoginController.java" hash="f857e551b59e518ff9e151208572b6231cdd1f64"><package>package <name>UI</name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>javafx</name><operator>.</operator><name>robot</name><operator>.</operator><name>impl</name><operator>.</operator><name>FXRobotHelper</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableList</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>PasswordField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>AdminLoginController</name> <block>{
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>PasswordField</name></type> <name>adminPWD</name></decl>;</decl_stmt>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>confirmAndLogin</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>(<expr><call><name><name>adminPWD</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"123456"</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Admin.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else <block>{
            <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>,<argument><expr><literal type="string">"Password is incorrect,Please try again"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>back</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Home.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/UI/ChangeController.java" hash="583552af937af0b06af3937fdfd23868e34303e6"><package>package <name>UI</name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>javafx</name><operator>.</operator><name>robot</name><operator>.</operator><name>impl</name><operator>.</operator><name>FXRobotHelper</name></name>;</import>
<import>import <name><name>data</name><operator>.</operator><name>UserData</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableList</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>librarysystem</name><operator>.</operator><name>function</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>ChangeController</name> <block>{
    <decl_stmt><decl><type><name>function</name></type> <name>library</name> <init>= <expr><operator>new</operator> <call><name>function</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>inputUserName</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>pwd</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>email</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>phone</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>resetName</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>resetPWD</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>resetEmail</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>resetPhone</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>ChangeController</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readRentedBooksFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readUserFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>check</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>UserData</name></type> <name>user</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>checkCustemerForAdmin</name></name><argument_list>(<argument><expr><call><name><name>inputUserName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>UIData</name><operator>.</operator><name>changeUser</name></name> <operator>=</operator> <name>user</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>user</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"This user not exists!"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>resetName</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>resetPWD</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>resetEmail</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>resetPhone</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then><else>else <block>{
            <expr_stmt><expr><call><name><name>resetName</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>resetPWD</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>resetEmail</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>resetPhone</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>name</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>pwd</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>email</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getEmail</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>phone</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getTeleNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>resetName</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>UIData</name><operator>.</operator><name>changeUser</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveUserToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>resetPWD</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>UIData</name><operator>.</operator><name>changeUser</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><call><name><name>pwd</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveUserToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>resetEmail</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>UIData</name><operator>.</operator><name>changeUser</name><operator>.</operator><name>setEmail</name></name><argument_list>(<argument><expr><call><name><name>email</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveUserToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>resetPhone</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>UIData</name><operator>.</operator><name>changeUser</name><operator>.</operator><name>setTeleNumber</name></name><argument_list>(<argument><expr><call><name><name>phone</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveUserToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>back</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Admin.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/UI/HomeController.java" hash="6bf8d4be878402216ef24ef4b1786e7d5d02bc26"><package>package <name>UI</name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>javafx</name><operator>.</operator><name>robot</name><operator>.</operator><name>impl</name><operator>.</operator><name>FXRobotHelper</name></name>;</import>
<import>import <name><name>data</name><operator>.</operator><name>AvailableBooks</name></name>;</import>
<import>import <name><name>data</name><operator>.</operator><name>ShowBooks</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>FXCollections</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableList</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>cell</name><operator>.</operator><name>PropertyValueFactory</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>librarysystem</name><operator>.</operator><name>function</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>HomeController</name> <block>{
    <decl_stmt><decl><type><name>function</name></type> <name>library</name> <init>= <expr><operator>new</operator> <call><name>function</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>ShowBookList</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableView</name></type> <name>bookList</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>author</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>genre</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>publisher</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>copies</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>rentTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>shelfNum</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>register</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>login</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>admin</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>HomeController</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readRentedBooksFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readUserFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showAllBooks</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>availableBooksList</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>getBooklist</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>ShowBooks</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>name</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>author</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>genre</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>publisher</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>copies</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rentTime</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"timesBookBeenRentedOut"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>shelfNum</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"shelf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <for>for<control>(<init><decl><type><name>AvailableBooks</name></type> <name>availableBooks</name> <range>: <expr><name>availableBooksList</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ShowBooks</name><argument_list>(<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getShelf</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>,<argument><expr><operator>+</operator><call><name><name>availableBooks</name><operator>.</operator><name>getTimeBookRentedOut</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>bookList</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>login</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Login.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>register</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name><name>UIData</name><operator>.</operator><name>isAdmin</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Register.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>admin</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"AdminLogin.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/UI/LoginController.java" hash="70c9be4ad43d6705524b272a8714a8338c890107"><package>package <name>UI</name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>javafx</name><operator>.</operator><name>robot</name><operator>.</operator><name>impl</name><operator>.</operator><name>FXRobotHelper</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableList</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>PasswordField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>librarysystem</name><operator>.</operator><name>function</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>


<class><specifier>public</specifier> class <name>LoginController</name> <block>{
    <decl_stmt><decl><type><name>function</name></type> <name>library</name> <init>= <expr><operator>new</operator> <call><name>function</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>userNameInput</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>PasswordField</name></type> <name>pwdInpit</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>loginConfirm</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>back</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>LoginController</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readRentedBooksFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readUserFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>back</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Home.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>confirm</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name><name>UIData</name><operator>.</operator><name>userData</name></name> <operator>=</operator> <call><name><name>library</name><operator>.</operator><name>checkCustemer</name></name><argument_list>(<argument><expr><call><name><name>userNameInput</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pwdInpit</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>UIData</name><operator>.</operator><name>userData</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"User.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>,<argument><expr><literal type="string">"customer is not registered or invalid username / password"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/UI/RegisterController.java" hash="c2823445b8c434d26e90b35bee5f5b93401e3c3d"><package>package <name>UI</name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>javafx</name><operator>.</operator><name>robot</name><operator>.</operator><name>impl</name><operator>.</operator><name>FXRobotHelper</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableList</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Alert</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>PasswordField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextField</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>librarysystem</name><operator>.</operator><name>function</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<class><specifier>public</specifier> class <name>RegisterController</name> <block>{
    <decl_stmt><decl><type><name>function</name></type> <name>library</name> <init>= <expr><operator>new</operator> <call><name>function</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>userName</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>email</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>PasswordField</name></type> <name>pwd</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>phone</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>address</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RegisterController</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readRentedBooksFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readUserFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>register</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>(<expr><operator>!</operator><call><name><name>library</name><operator>.</operator><name>checkUserName</name></name><argument_list>(<argument><expr><call><name><name>userName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>createNewUser</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>userName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pwd</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>email</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>phone</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>,<argument><expr><literal type="string">"Register successfully!"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>,<argument><expr><literal type="string">"The username has been used"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveUserToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>back</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>UIData</name><operator>.</operator><name>isAdmin</name></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Admin.fxml"</literal></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"Home.fxml"</literal></expr>;</expr_stmt></block></else></if>

        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/UI/UIData.java" hash="a853aa2a781b664351ddae581eceb951626349de"><package>package <name>UI</name>;</package>

<import>import <name><name>data</name><operator>.</operator><name>UserData</name></name>;</import>

<class><specifier>public</specifier> class <name>UIData</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>UserData</name></type> <name>userData</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>Boolean</name></type> <name>isAdmin</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>UserData</name></type> <name>changeUser</name></decl>;</decl_stmt>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/UI/UIStarter.java" hash="f509ab402d444b740da721640ab5795ed21accaf"><package>package <name>UI</name>;</package>

<import>import <name><name>javafx</name><operator>.</operator><name>application</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Parent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>

<class><specifier>public</specifier> class <name>UIStarter</name> <super><extends>extends <name>Application</name></extends></super><block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>launch</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>Stage</name></type> <name>primaryStage</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>Parent</name></type> <name>root</name> <init>= <expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Home.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>primaryStage</name><operator>.</operator><name>setScene</name></name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>primaryStage</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/UI/libraryUI.java" hash="fd26ea00f53fa5c5da28628330334d746546cc0f"><package>package <name>UI</name>;</package>

<import>import <name><name>librarysystem</name><operator>.</operator><name>*</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalDate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Scanner</name></name>;</import>
<import>import <name><name>data</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>libraryUI</name> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>Scanner</name></type> <name>input</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>function</name></type> <name>library</name> <init>= <expr><operator>new</operator> <call><name>function</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>libraryUI</name></type> <name>program</name> <init>= <expr><operator>new</operator> <call><name>libraryUI</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>program</name><operator>.</operator><name>welcome</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>welcome</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"------------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"***********Library System***********"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"------------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readRentedBooksFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readUserFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>showMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>showMenu</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>LOGIN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>AVILABLEBOOKS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>REGISTERCOSTUMER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>ADMIN</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>QUIT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
		<do>do <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to login press 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to look available books press 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to register new customer press 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"in case of admin press 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to quit press 5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// removing any leftover</comment>

			<switch>switch <condition>(<expr><name>ans</name></expr>)</condition> <block>{
			<case>case <expr><name>LOGIN</name></expr>:</case>
				<expr_stmt><expr><call><name>loginMain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>AVILABLEBOOKS</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>library</name><operator>.</operator><name>printAvilableBook</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>REGISTERCOSTUMER</name></expr>:</case>
				<expr_stmt><expr><call><name>registerCustMain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>ADMIN</name></expr>:</case>
				<expr_stmt><expr><call><name>adminMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>QUIT</name></expr>:</case>
				<break>break;</break>

			<default>default:</default>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Option "</literal> <operator>+</operator> <name>ans</name> <operator>+</operator> <literal type="string">" is not valid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></switch>

		}</block> while <condition>(<expr><name>ans</name> <operator>!=</operator> <name>QUIT</name></expr>)</condition>;</do>
		<block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Goodbye"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveRentedBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveUserToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>

	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>adminMenu</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>ADDBOOK</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>REGISTERCOSTUMER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>SORTATHURS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>SORTTITLE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>SORTTIMESRENTEDOUT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>CHANGEINFO</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>LOGOUT</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"please enter the admins' password: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>pass</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>pass</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"123456"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<do>do <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to add book press 1 "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to add new user press 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to sort books base on authors press 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to sort books based on title press 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
						<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to sort books based on number of times it's rented out press 5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
						<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to change or retrieve information of an user press 6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to logout press 7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// clearing the scanner</comment>

				<switch>switch <condition>(<expr><name>ans</name></expr>)</condition> <block>{
				<case>case <expr><name>ADDBOOK</name></expr>:</case>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the book title"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the book author"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>author</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the book's shelf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>shelf</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the book's genre:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>genre</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the book's publisher: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>publisher</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<try>try <block>{
						<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>addBook</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>shelf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>
					<break>break;</break>
				<case>case <expr><name>REGISTERCOSTUMER</name></expr>:</case>
					<expr_stmt><expr><call><name>registerCustMain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SORTATHURS</name></expr>:</case>
					<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>sortAuthor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name><name>library</name><operator>.</operator><name>printAvilableBook</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SORTTITLE</name></expr>:</case>
					<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>sortTitle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name><name>library</name><operator>.</operator><name>printAvilableBook</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>SORTTIMESRENTEDOUT</name></expr>:</case>
					<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>sortTimesRentedOut</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><call><name><name>library</name><operator>.</operator><name>printAvilableBook</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><name>CHANGEINFO</name></expr>:</case>
					<try>try <block>{
						<expr_stmt><expr><call><name>changeRetriveCostumerInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>
					<break>break;</break>
				<case>case <expr><name>LOGOUT</name></expr>:</case> <block>{
					<break>break;</break>
				}</block>
				<default>default:</default>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Option "</literal> <operator>+</operator> <name>ans</name> <operator>+</operator> <literal type="string">" is not valid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></switch>
			}</block> while <condition>(<expr><name>ans</name> <operator>!=</operator> <name>LOGOUT</name></expr>)</condition>;</do>
			<block>{
				<expr_stmt><expr><call><name>showMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"WRONG PASSWORD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>showMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>changeRetriveCostumerInfo</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>CHANGENAME</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>CHANGEPASS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>RETRIVEPASS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>CHANGEEMAIL</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>RETRIVEEMAIL</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>CHANGENUM</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>RETRIVENUM</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>MAINMENU</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
		<do>do <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the customers name:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>UserData</name></type> <name>user</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>checkCustemerForAdmin</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to change customer's name press 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to change customer's password press 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to retrive customer's password press 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to change customer's email press 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to retrieve customer's email press 5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to change customer's phone number press 6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to retrieve customer's phone number press 7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to go back to main menu press 8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// clearing scanner</comment>

			<switch>switch <condition>(<expr><name>ans</name></expr>)</condition> <block>{
			<case>case <expr><name>CHANGENAME</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the new name:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>user</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>CHANGEPASS</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the new passwrod:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>pass</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>user</name><operator>.</operator><name>setPassword</name></name><argument_list>(<argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RETRIVEPASS</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>CHANGEEMAIL</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the new Email:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>email</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>user</name><operator>.</operator><name>setEmail</name></name><argument_list>(<argument><expr><name>email</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RETRIVEEMAIL</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getEmail</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>CHANGENUM</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the new phone number: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>num</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>user</name><operator>.</operator><name>setTeleNumber</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RETRIVENUM</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getTeleNumber</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>MAINMENU</name></expr>:</case>
				<expr_stmt><expr><call><name>showMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Option "</literal> <operator>+</operator> <name>ans</name> <operator>+</operator> <literal type="string">" is not valid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></switch>
		}</block> while <condition>(<expr><name>ans</name> <operator>!=</operator> <name>MAINMENU</name></expr>)</condition>;</do>
		<block>{
			<expr_stmt><expr><call><name>showMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block>

	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>registerCustMain</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>boolean</name></type> <name>occpied</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>userName</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the name:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<do>do <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the userName: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>userName</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>occpied</name> <operator>=</operator> <call><name><name>library</name><operator>.</operator><name>checkUserName</name></name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> while <condition>(<expr><name>occpied</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition>;</do>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the user Email: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>email</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the password:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>pass</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the user phoneNumber: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>num</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the user's adress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>adress</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>createNewUser</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>userName</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>email</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>adress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>loginMain</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"write username"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>username</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"write password"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>pass</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>UserData</name></type> <name>user</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>checkCustemer</name></name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// create after</comment>
																<comment type="line">// class forMe</comment>
		<if>if <condition>(<expr><name>user</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<try>try <block>{
				<expr_stmt><expr><call><name>costumerMian</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
					<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"\"customer is not registered or invalid username / password\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>costumerMian</name><parameter_list>(<parameter><decl><type><name>UserData</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>AVILABLEBOOKS</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>RENTBOOK</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>RETURNBOOKS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>CHECKRENTEDBOOK</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>CHECKHISTORY</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>LOGOUT</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
		<do>do <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to find available books press 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to rent a book press 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"to return a book press 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to check rented book press 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to check rented history press 5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"to logout and go back to menu press 6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<switch>switch <condition>(<expr><name>ans</name></expr>)</condition> <block>{
			<case>case <expr><name>AVILABLEBOOKS</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>library</name><operator>.</operator><name>printAvilableBook</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RENTBOOK</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"enter the book title: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>LocalDate</name></type> <name>today</name> <init>= <expr><call><name><name>LocalDate</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>library</name><operator>.</operator><name>rentOutBook</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>today</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>RETURNBOOKS</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"enter the book title:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>returnBook</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>CHECKRENTEDBOOK</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"enter the book you want to return: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>name1</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>library</name><operator>.</operator><name>returnBook</name></name><argument_list>(<argument><expr><name>name1</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<break>break;</break>
			<case>case <expr><name>CHECKHISTORY</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>getHistory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>LOGOUT</name></expr>:</case>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Option "</literal> <operator>+</operator> <name>ans</name> <operator>+</operator> <literal type="string">" is not valid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></switch>
		}</block> while <condition>(<expr><name>ans</name> <operator>!=</operator> <name>LOGOUT</name></expr>)</condition>;</do>
		<block>{
			<expr_stmt><expr><call><name>showMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/UI/AdminController.java" hash="fafc657ef247a0283dab06289fc5a0c7fdae872f"><package>package <name>UI</name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>javafx</name><operator>.</operator><name>robot</name><operator>.</operator><name>impl</name><operator>.</operator><name>FXRobotHelper</name></name>;</import>
<import>import <name><name>data</name><operator>.</operator><name>AvailableBooks</name></name>;</import>
<import>import <name><name>data</name><operator>.</operator><name>RentedBooks</name></name>;</import>
<import>import <name><name>data</name><operator>.</operator><name>ShowBooks</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>FXCollections</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableList</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>cell</name><operator>.</operator><name>PropertyValueFactory</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>librarysystem</name><operator>.</operator><name>function</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>rmi</name><operator>.</operator><name>server</name><operator>.</operator><name>UID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalDate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>AdminController</name> <block>{
    <decl_stmt><decl><type><name>function</name></type> <name>library</name> <init>= <expr><operator>new</operator> <call><name>function</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>title</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>author</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>shelf</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>genre</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>publisher</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>addBook</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>deleteBook</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>addUser</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>deleteUser</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableView</name></type> <name>bookList</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>t_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>t_author</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>t_genre</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>t_publisher</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>t_copies</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>t_rentTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>t_shelfNum</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>bookTitle</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>userName</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>s_author</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>s_title</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>author_input</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>title_input</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>AdminController</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readRentedBooksFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readUserFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>logout</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Home.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>addNewBook</name><parameter_list>()</parameter_list><block>{
        <if>if<condition>(<expr><operator>!</operator><call><name><name>title</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><operator>!</operator><call><name><name>author</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><operator>!</operator><call><name><name>genre</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><operator>!</operator><call><name><name>publisher</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><operator>!</operator><call><name><name>shelf</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>addBook</name></name><argument_list>(<argument><expr><call><name><name>title</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>author</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>genre</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>publisher</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>shelf</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"Add new book successfully"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else <block>{
            <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"Please complete the info"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    
    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>deleteBook</name><parameter_list>()</parameter_list> <block>{
        <if>if<condition>(<expr><call><name><name>library</name><operator>.</operator><name>retriveBook</name></name><argument_list>(<argument><expr><call><name><name>bookTitle</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>deleteBook</name></name><argument_list>(<argument><expr><call><name><name>bookTitle</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>author</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>genre</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>publisher</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>shelf</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"Delete book successfully"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else <block>{
            <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"This book does not exist"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>addNewUser</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name><name>UIData</name><operator>.</operator><name>isAdmin</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Register.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    
    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>deleteUser</name><parameter_list>()</parameter_list> <block>{
    	<if>if<condition>(<expr><call><name><name>library</name><operator>.</operator><name>retriveUser</name></name><argument_list>(<argument><expr><call><name><name>userName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>!=</operator><literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>deleteUser</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><call><name><name>userName</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveUserToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"Delete user successfully"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else <block>{
            <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"This User does not exist"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    
    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>sortAuthor</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>sortAuthor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>showAllBooks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>sortTitle</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>sortTitle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>showAllBooks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>sortTime</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>sortTimesRentedOut</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>showAllBooks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>showAllBooks</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>availableBooksList</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>getBooklist</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>ShowBooks</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>t_name</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_author</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_genre</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_publisher</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Copies"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setPrefWidth</name></name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"RentTime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setPrefWidth</name></name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"timesBookBeenRentedOut"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_shelfNum</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_shelfNum</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"shelf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>;</decl_stmt>


        <for>for<control>(<init><decl><type><name>AvailableBooks</name></type> <name>availableBooks</name> <range>: <expr><name>availableBooksList</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ShowBooks</name><argument_list>(<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getShelf</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>,<argument><expr><operator>+</operator><call><name><name>availableBooks</name><operator>.</operator><name>getTimeBookRentedOut</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>bookList</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>showAllDelayedBooks</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RentedBooks</name></argument>&gt;</argument_list></name></type> <name>delayedBooks</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>getRentedBooklist</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>RentedBooks</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>t_name</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_author</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_genre</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_publisher</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"rentOutDate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setPrefWidth</name></name><argument_list>(<argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"rentOutDate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"returnDate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setPrefWidth</name></name><argument_list>(<argument><expr><literal type="number">220</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"returnDate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_shelfNum</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>RentedBooks</name></type> <name>rentedBooks</name> <range>: <expr><name>delayedBooks</name></expr></range></decl></init>)</control> <block>{
            <if>if<condition>(<expr><call><name><name>rentedBooks</name><operator>.</operator><name>exactDay</name></name><argument_list>(<argument><expr><call><name><name>LocalDate</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>rentedBooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>bookList</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>, <argument><expr><literal type="string">"Library is empty!"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>change</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Change.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>searchBookByAuthor</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>availableBooksList</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>retriveBooksByAuthor</name></name><argument_list>(<argument><expr><call><name><name>author_input</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>ShowBooks</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>t_name</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_author</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_genre</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_publisher</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Copies"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setPrefWidth</name></name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"RentTime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setPrefWidth</name></name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"timesBookBeenRentedOut"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_shelfNum</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_shelfNum</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"shelf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>AvailableBooks</name></type> <name>availableBooks</name> <range>: <expr><name>availableBooksList</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ShowBooks</name><argument_list>(<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getShelf</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>,<argument><expr><operator>+</operator><call><name><name>availableBooks</name><operator>.</operator><name>getTimeBookRentedOut</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>bookList</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>searchBookByTitle</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>availableBooksList</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>retriveBooksByTitle</name></name><argument_list>(<argument><expr><call><name><name>title_input</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>ShowBooks</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>t_name</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_author</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_genre</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_publisher</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"Copies"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setPrefWidth</name></name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_copies</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"RentTime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setPrefWidth</name></name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_rentTime</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"timesBookBeenRentedOut"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_shelfNum</name><operator>.</operator><name>setVisible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>t_shelfNum</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"shelf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>AvailableBooks</name></type> <name>availableBooks</name> <range>: <expr><name>availableBooksList</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ShowBooks</name><argument_list>(<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getShelf</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>,<argument><expr><operator>+</operator><call><name><name>availableBooks</name><operator>.</operator><name>getTimeBookRentedOut</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>bookList</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/UI/UserController.java" hash="1d8ce0bbcc6b3e8ef9066d68b00a3b9edfdeec98"><package>package <name>UI</name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>sun</name><operator>.</operator><name>javafx</name><operator>.</operator><name>robot</name><operator>.</operator><name>impl</name><operator>.</operator><name>FXRobotHelper</name></name>;</import>
<import>import <name><name>data</name><operator>.</operator><name>AvailableBooks</name></name>;</import>
<import>import <name><name>data</name><operator>.</operator><name>RentedBooks</name></name>;</import>
<import>import <name><name>data</name><operator>.</operator><name>ShowBooks</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>FXCollections</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>collections</name><operator>.</operator><name>ObservableList</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXMLLoader</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Scene</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>cell</name><operator>.</operator><name>PropertyValueFactory</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>Stage</name></name>;</import>
<import>import <name><name>librarysystem</name><operator>.</operator><name>function</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalDate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>UserController</name> <block>{
    <decl_stmt><decl><type><name>function</name></type> <name>library</name> <init>= <expr><operator>new</operator> <call><name>function</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>ShowBookList</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableView</name></type> <name>bookList</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>author</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>genre</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>publisher</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>copies</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>rentTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>shelfNum</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>rentBook</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>returnBook</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>check</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableView</name></type> <name>historyList</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>historyName</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>historyAuthor</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>historyGenre</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>historyPublisher</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>historyRentTime</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TableColumn</name></type> <name>historyReturnTime</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>s_author</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>Button</name></type> <name>s_title</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>author_input</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation>
    <type><name>TextField</name></type> <name>title_input</name></decl>;</decl_stmt>



    <constructor><specifier>public</specifier> <name>UserController</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readRentedBooksFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>readUserFromFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showAllBooks</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>availableBooksList</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>getBooklist</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>ShowBooks</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>temp</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>name</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>author</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>genre</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>publisher</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>copies</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rentTime</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"timesBookBeenRentedOut"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>shelfNum</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"shelf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <for>for<control>(<init><decl><type><name>AvailableBooks</name></type> <name>availableBooks</name> <range>: <expr><name>availableBooksList</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ShowBooks</name><argument_list>(<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getShelf</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>,<argument><expr><operator>+</operator><call><name><name>availableBooks</name><operator>.</operator><name>getTimeBookRentedOut</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>bookList</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>logout</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name><name>UIData</name><operator>.</operator><name>userData</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>stage</name> <init>= <expr><call><name><name>FXRobotHelper</name><operator>.</operator><name>getStages</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scene</name></type> <name>scene</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>scene</name> <operator>=</operator> <operator>new</operator> <call><name>Scene</name><argument_list>(<argument><expr><call><name><name>FXMLLoader</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"Home.fxml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <expr_stmt><expr><call><name><name>stage</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setScene</name><argument_list>(<argument><expr><name>scene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>rentBook</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>rentOutBook</name></name><argument_list>(<argument><expr><call><name><name>rentBook</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>UIData</name><operator>.</operator><name>userData</name></name></expr></argument>, <argument><expr><call><name><name>LocalDate</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>,<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveRentedBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveUserToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>returnBook</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">"Failed"</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator>  <call><name><name>library</name><operator>.</operator><name>returnBook</name></name><argument_list>(<argument><expr><call><name><name>returnBook</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>UIData</name><operator>.</operator><name>userData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>,<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveRentedBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveUserToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>check</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">"Failed"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator>  <call><name><name>library</name><operator>.</operator><name>returnBook</name></name><argument_list>(<argument><expr><call><name><name>check</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>UIData</name><operator>.</operator><name>userData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <decl_stmt><decl><type><name>Alert</name></type> <name>information</name> <init>= <expr><operator>new</operator> <call><name>Alert</name><argument_list>(<argument><expr><name><name>Alert</name><operator>.</operator><name>AlertType</name><operator>.</operator><name>INFORMATION</name></name></expr></argument>,<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>information</name><operator>.</operator><name>showAndWait</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveAvailableBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveRentedBooksToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>library</name><operator>.</operator><name>saveUserToFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>showHistory</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RentedBooks</name></argument>&gt;</argument_list></name></type> <name>rentedBooksList</name> <init>= <expr><name><name>UIData</name><operator>.</operator><name>userData</name><operator>.</operator><name>history</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>RentedBooks</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>historyName</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>historyAuthor</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>historyGenre</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>historyPublisher</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>historyRentTime</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"rentOutDate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>historyReturnTime</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"returnDate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <for>for<control>(<init><decl><type><name>RentedBooks</name></type> <name>rentedBooks</name> <range>: <expr><name>rentedBooksList</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>rentedBooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

        <expr_stmt><expr><call><name><name>historyList</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>searchBookByAuthor</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>availableBooksList</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>retriveBooksByAuthor</name></name><argument_list>(<argument><expr><call><name><name>author_input</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>ShowBooks</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>name</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>author</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>genre</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>publisher</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>copies</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rentTime</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"timesBookBeenRentedOut"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>shelfNum</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"shelf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>AvailableBooks</name></type> <name>availableBooks</name> <range>: <expr><name>availableBooksList</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ShowBooks</name><argument_list>(<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getShelf</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>,<argument><expr><operator>+</operator><call><name><name>availableBooks</name><operator>.</operator><name>getTimeBookRentedOut</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>bookList</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>FXML</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>searchBookByTitle</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>availableBooksList</name> <init>= <expr><call><name><name>library</name><operator>.</operator><name>retriveBooksByTitle</name></name><argument_list>(<argument><expr><call><name><name>title_input</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>ObservableList</name><argument_list type="generic">&lt;<argument><name>ShowBooks</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><call><name><name>FXCollections</name><operator>.</operator><name>observableArrayList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>name</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>author</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"author"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>genre</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"genre"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>publisher</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"publisher"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>copies</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"copy"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rentTime</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"timesBookBeenRentedOut"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>shelfNum</name><operator>.</operator><name>setCellValueFactory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PropertyValueFactory</name><argument_list>(<argument><expr><literal type="string">"shelf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>AvailableBooks</name></type> <name>availableBooks</name> <range>: <expr><name>availableBooksList</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ShowBooks</name><argument_list>(<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getShelf</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>availableBooks</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>,<argument><expr><operator>+</operator><call><name><name>availableBooks</name><operator>.</operator><name>getTimeBookRentedOut</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>bookList</name><operator>.</operator><name>setItems</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="LibrarySystem/src/librarysystem/function.java" hash="c0cab5f40b023e66095dfbc4cee17c8d8e50786a"><package>package <name>librarysystem</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>LocalDate</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>time</name><operator>.</operator><name>temporal</name><operator>.</operator><name>ChronoUnit</name></name>;</import>

<import>import <name><name>data</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>function</name> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>booklist</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>UserData</name></argument>&gt;</argument_list></name></type> <name>userlist</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RentedBooks</name></argument>&gt;</argument_list></name></type> <name>rentedBooklist</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>RENT_DAYS</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>function</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>booklist</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>userlist</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rentedBooklist</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>	


	<function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>getBooklist</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>booklist</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setBooklist</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>booklist</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>booklist</name></name> <operator>=</operator> <name>booklist</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>UserData</name></argument>&gt;</argument_list></name></type> <name>getUserlist</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>userlist</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setUserlist</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>UserData</name></argument>&gt;</argument_list></name></type> <name>userlist</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>userlist</name></name> <operator>=</operator> <name>userlist</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RentedBooks</name></argument>&gt;</argument_list></name></type> <name>getRentedBooklist</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>rentedBooklist</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setRentedBooklist</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RentedBooks</name></argument>&gt;</argument_list></name></type> <name>rentedBooklist</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>rentedBooklist</name></name> <operator>=</operator> <name>rentedBooklist</name></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>AvailableBooks</name></type> <name>retriveBook</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>)</parameter_list> <block>{ <comment type="line">// give the books position</comment>
														<comment type="line">// inside the list</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>booklist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>booklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTitle</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<return>return <expr><call><name><name>booklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>retriveBooksByAuthor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>booksList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>booklist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>booklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAuthor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>author</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>booksList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>booklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<return>return <expr><name>booksList</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>retriveBooksByTitle</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AvailableBooks</name></argument>&gt;</argument_list></name></type> <name>booksList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>booklist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>booklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTitle</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>booksList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>booklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<return>return <expr><name>booksList</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>boolean</name></type> <name>checkUserName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name><name>userlist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then> <else>else <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>userlist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUserName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name>
							<operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Username is already taken, please try another"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><literal type="boolean">true</literal></expr>;</return>
				}</block></then></if>

			}</block></for>
		}</block></else></if>
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>UserData</name></type> <name>retriveUser</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>userName</name></decl></parameter>)</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>userlist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUserName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<return>return <expr><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>createNewUser</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>userName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pass</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>email</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>adress</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>UserData</name></type> <name>user</name> <init>= <expr><operator>new</operator> <call><name>UserData</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>userName</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>email</name></expr></argument>, <argument><expr><name>number</name></expr></argument>,
				<argument><expr><name>adress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>userlist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>deleteUser</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>userName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pass</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>email</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>adress</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>UserData</name></type> <name>foundUser</name> <init>= <expr><call><name>retriveUser</name><argument_list>(<argument><expr><name>userName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>userlist</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>foundUser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>rentOutBook</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>UserData</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>LocalDate</name></type> <name>today</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>AvailableBooks</name></type> <name>book</name> <init>= <expr><call><name>retriveBook</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LocalDate</name></type> <name>next2Week</name> <init>= <expr><call><name><name>today</name><operator>.</operator><name>plus</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ChronoUnit</name><operator>.</operator><name>WEEKS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>book</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>book</name><operator>.</operator><name>getCopy</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>RentedBooks</name></type> <name>rentedBook</name> <init>= <expr><operator>new</operator> <call><name>RentedBooks</name><argument_list>(<argument><expr><call><name><name>book</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><call><name><name>book</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>book</name><operator>.</operator><name>getGenre</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>book</name><operator>.</operator><name>getPublisher</name></name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><call><name><name>today</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>next2Week</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>book</name><operator>.</operator><name>rentCopy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rentedBooklist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>rentedBook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>user</name><operator>.</operator><name>addRentedBook</name></name><argument_list>(<argument><expr><name>rentedBook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><call><name><name>book</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" was successfully rented out to user: "</literal>
					<operator>+</operator> <call><name><name>user</name><operator>.</operator><name>getUserName</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></then></if>
		<return>return <expr><literal type="string">"The book was not found."</literal></expr>;</return>
	}</block></function>

	<comment type="line">// return i bookis secssesfully returned and show amoit to pay</comment>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>returnBook</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>UserData</name></type> <name>user</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>fee</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>RentedBooks</name></type> <name>foundBook</name> <init>= <expr><call><name><name>user</name><operator>.</operator><name>checkRentedBooks</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>foundBook</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>fee</name> <operator>=</operator> <call><name>overDaysFee</name><argument_list>(<argument><expr><name>foundBook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>user</name><operator>.</operator><name>deleteRentedBook</name></name><argument_list>(<argument><expr><name>foundBook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>user</name><operator>.</operator><name>setHistory</name></name><argument_list>(<argument><expr><name>foundBook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>rentedBooklist</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>foundBook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>AvailableBooks</name></type> <name>foundAvailable</name> <init>= <expr><call><name>retriveBook</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>foundAvailable</name><operator>.</operator><name>addCopy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="string">"Amount to pay: "</literal> <operator>+</operator> <name>fee</name></expr>;</return>
		}</block></then></if>

		<return>return <expr><literal type="string">"The book is not rented by this user. "</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>overDaysFee</name><parameter_list>(<parameter><decl><type><name>RentedBooks</name></type> <name>book</name></decl></parameter>)</parameter_list> <block>{ <comment type="line">// return amont to pay if the</comment>
												<comment type="line">// retrun day is over t 2 weeks</comment>
		<decl_stmt><decl><type><name>LocalDate</name></type> <name>today</name> <init>= <expr><call><name><name>LocalDate</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>amountToPay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>book</name><operator>.</operator><name>exactDay</name></name><argument_list>(<argument><expr><call><name><name>today</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>RENT_DAYS</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>amountToPay</name> <operator>=</operator> <operator>(</operator><call><name><name>book</name><operator>.</operator><name>exactDay</name></name><argument_list>(<argument><expr><call><name><name>today</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <name>RENT_DAYS</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

			<return>return <expr><name>amountToPay</name></expr>;</return>
		}</block></then> <else>else
			<block type="pseudo"><return>return <expr><name>amountToPay</name></expr>;</return></block></else></if>
	}</block></function>

	<comment type="line">// check if the user is available check their user name and password</comment>
	<function><specifier>public</specifier> <type><name>UserData</name></type> <name>checkCustemer</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>username</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>userlist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><operator>(</operator><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getUserName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call><operator>)</operator>
					<operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPassword</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{

				<return>return <expr><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>UserData</name></type> <name>checkCustemerForAdmin</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{ <comment type="line">// check if the user is</comment>
															<comment type="line">// available check</comment>
															<comment type="line">// their username</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>userlist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<return>return <expr><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>printAvilableBook</name><parameter_list>()</parameter_list> <block>{ <comment type="line">// print all available books inside</comment>
										<comment type="line">// library</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>list</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>booklist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">"Library is empty"</literal></expr>;</return>
		}</block></then> <else>else <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>booklist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><call><name><name>booklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCopy</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>list</name> <operator>+=</operator> <call><name><name>booklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></else></if>
		<return>return <expr><name>list</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>addBook</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>shelf</name></decl></parameter>)</parameter_list> <block>{ <comment type="line">// add new books, check if it</comment>
												<comment type="line">// already excit in library then</comment>
												<comment type="line">// add copy</comment>
		<decl_stmt><decl><type><name>AvailableBooks</name></type> <name>foundBook</name> <init>= <expr><call><name>retriveBook</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>foundBook</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>foundBook</name><operator>.</operator><name>addCopy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>AvailableBooks</name></type> <name>newBook</name> <init>= <expr><operator>new</operator> <call><name>AvailableBooks</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>,
					<argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>shelf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>booklist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>newBook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>deleteBook</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>genre</name></decl></parameter>,
			<parameter><decl><type><name>String</name></type> <name>publisher</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>shelf</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>AvailableBooks</name></type> <name>foundBook</name> <init>= <expr><call><name>retriveBook</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>booklist</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>foundBook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>sortAuthor</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>booklist</name></expr></argument>, <argument><expr><call><name><name>AvailableBooks</name><operator>.</operator><name>getCompByAuthor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>sortTitle</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>booklist</name></expr></argument>, <argument><expr><call><name><name>AvailableBooks</name><operator>.</operator><name>getCompByTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>sortTimesRentedOut</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>booklist</name></expr></argument>, <argument><expr><call><name><name>AvailableBooks</name><operator>.</operator><name>getCompByTimeRentedOut</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>printDelayed</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>LocalDate</name></type> <name>today</name> <init>= <expr><call><name><name>LocalDate</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>list</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>rentedBooklist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<return>return <expr><literal type="string">"Library is empty"</literal></expr>;</return>
		}</block></then> <else>else <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>rentedBooklist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><call><name><name>rentedBooklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>exactDay</name><argument_list>(<argument><expr><call><name><name>today</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>list</name> <operator>+=</operator> <call><name><name>rentedBooklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></else></if>
		<return>return <expr><name>list</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveAvailableBooksToFile</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<comment type="line">// to create a file</comment>
			<decl_stmt><decl><type><name>File</name></type> <name>bookFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"availableBookFile.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// to create the writer</comment>

			<decl_stmt><decl><type><name>PrintStream</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintStream</name><argument_list>(<argument><expr><name>bookFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>booklist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>booklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStringTOTxt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// writer.println(booklist.get(i).getTitle());</comment>
				<comment type="line">// writer.println(booklist.get(i).getAuthor());</comment>
				<comment type="line">// writer.println(booklist.get(i).getGenre());</comment>
				<comment type="line">// writer.println(booklist.get(i).getPublisher());</comment>
				<comment type="line">// writer.println(booklist.get(i).getShelf());</comment>
				<comment type="line">// writer.println(booklist.get(i).getCopy());</comment>
				<comment type="line">// writer.println(booklist.get(i).getTimeBookRentedOut());</comment>
			}</block></for>
			<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><comment type="line">// always close the file connection</comment>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		}</block></catch></try>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>readAvailableBooksToFile</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<decl_stmt><decl><type><name>File</name></type> <name>bookFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"availableBookFile.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Scanner</name></type> <name>bookReader</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>bookReader</name> <operator>=</operator> <operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name>bookFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>title</name></decl>, <decl><type ref="prev"/><name>author</name></decl>, <decl><type ref="prev"/><name>genre</name></decl>, <decl><type ref="prev"/><name>publisher</name></decl>, <decl><type ref="prev"/><name>shelf</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>copy</name></decl>, <decl><type ref="prev"/><name>timeBookRentedOut</name></decl>;</decl_stmt>
			<comment type="line">// hasNext() check if there is another line</comment>
			<while>while <condition>(<expr><call><name><name>bookReader</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>info</name> <init>= <expr><call><name><name>bookReader</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>title</name> <operator>=</operator> <name><name>info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>author</name> <operator>=</operator> <name><name>info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>genre</name> <operator>=</operator> <name><name>info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>publisher</name> <operator>=</operator> <name><name>info</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>shelf</name> <operator>=</operator> <name><name>info</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>info</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>timeBookRentedOut</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>info</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>AvailableBooks</name></type> <name>book</name> <init>= <expr><operator>new</operator> <call><name>AvailableBooks</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>,
							<argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>shelf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>book</name><operator>.</operator><name>setCopy</name></name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>book</name><operator>.</operator><name>setTimeBookRentedOut</name></name><argument_list>(<argument><expr><name>timeBookRentedOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>booklist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>book</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line">// title = bookReader.nextLine();</comment>
				<comment type="line">// author = bookReader.nextLine();</comment>
				<comment type="line">// genre = bookReader.nextLine();</comment>
				<comment type="line">// publisher = bookReader.nextLine();</comment>
				<comment type="line">// shelf = bookReader.nextLine();</comment>
				<comment type="line">// copy = bookReader.nextInt();</comment>
				<comment type="line">// bookReader.nextLine();</comment>
				<comment type="line">// timeBookRentedOut = bookReader.nextInt();</comment>
				<comment type="line">// bookReader.nextLine();</comment>
				<comment type="line">//</comment>
				<comment type="line">// AvailableBooks book = new AvailableBooks(title, author,</comment>
				<comment type="line">// genre,</comment>
				<comment type="line">// publisher, shelf);</comment>
				<comment type="line">// book.setCopy(copy);</comment>
				<comment type="line">// book.setTimeBookRentedOut(timeBookRentedOut);</comment>
				<comment type="line">// booklist.add(book);</comment>
			}</block></while>
			<expr_stmt><expr><call><name><name>bookReader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveRentedBooksToFile</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<comment type="line">// to create a file</comment>
			<decl_stmt><decl><type><name>File</name></type> <name>bookFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"rentedBookFile.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// to create the writer</comment>

			<decl_stmt><decl><type><name>PrintStream</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintStream</name><argument_list>(<argument><expr><name>bookFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>rentedBooklist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<comment type="line">// writer.println(rentedBooklist.get(i).getTitle());</comment>
				<comment type="line">// writer.println(rentedBooklist.get(i).getAuthor());</comment>
				<comment type="line">// writer.println(rentedBooklist.get(i).getGenre());</comment>
				<comment type="line">// writer.println(rentedBooklist.get(i).getPublisher());</comment>
				<comment type="line">// writer.println(rentedBooklist.get(i).getRentOutDate());</comment>
				<comment type="line">// writer.println(rentedBooklist.get(i).getReturnDate());</comment>
				<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>rentedBooklist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStringTOTxt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><comment type="line">// always close the file connection</comment>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		}</block></catch></try>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>readRentedBooksFromFile</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<decl_stmt><decl><type><name>File</name></type> <name>bookFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"rentedBookFile.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Scanner</name></type> <name>bookReader</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>bookReader</name> <operator>=</operator> <operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name>bookFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>title</name></decl>, <decl><type ref="prev"/><name>author</name></decl>, <decl><type ref="prev"/><name>genre</name></decl>, <decl><type ref="prev"/><name>publisher</name></decl>, <decl><type ref="prev"/><name>rentedOutDate</name></decl>, <decl><type ref="prev"/><name>returnDate</name></decl>;</decl_stmt>
			<comment type="line">// hasNext() check if there is another line</comment>
			<while>while <condition>(<expr><call><name><name>bookReader</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>info</name> <init>= <expr><call><name><name>bookReader</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>title</name> <operator>=</operator> <name><name>info</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>author</name> <operator>=</operator> <name><name>info</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>genre</name> <operator>=</operator> <name><name>info</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>publisher</name> <operator>=</operator> <name><name>info</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>rentedOutDate</name> <operator>=</operator> <name><name>info</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>returnDate</name> <operator>=</operator> <name><name>info</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>RentedBooks</name></type> <name>book</name> <init>= <expr><operator>new</operator> <call><name>RentedBooks</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>,
							<argument><expr><name>publisher</name></expr></argument>, <argument><expr><name>rentedOutDate</name></expr></argument>, <argument><expr><name>returnDate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>rentedBooklist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>book</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line">// title = bookReader.nextLine();</comment>
				<comment type="line">// author = bookReader.nextLine();</comment>
				<comment type="line">// genre = bookReader.nextLine();</comment>
				<comment type="line">// publisher = bookReader.nextLine();</comment>
				<comment type="line">// rentedOutDate = bookReader.nextLine();</comment>
				<comment type="line">// returnDate = bookReader.nextLine();</comment>
				<comment type="line">//</comment>
				<comment type="line">// RentedBooks book = new RentedBooks(title, author, genre,</comment>
				<comment type="line">// publisher, rentedOutDate, returnDate);</comment>
				<comment type="line">// rentedBooklist.add(book);</comment>
			}</block></while>
			<expr_stmt><expr><call><name><name>bookReader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>saveUserToFile</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<comment type="line">// to create a file</comment>
			<decl_stmt><decl><type><name>File</name></type> <name>userFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"userFile.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<comment type="line">// to create the writer</comment>

			<decl_stmt><decl><type><name>PrintStream</name></type> <name>writer</name> <init>= <expr><operator>new</operator> <call><name>PrintStream</name><argument_list>(<argument><expr><name>userFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>userlist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<comment type="line">// writer.println(userlist.get(i).getName());</comment>
					<comment type="line">// writer.println(userlist.get(i).getUserName());</comment>
					<comment type="line">// writer.println(userlist.get(i).getPassword());</comment>
					<comment type="line">// writer.println(userlist.get(i).getEmail());</comment>
					<comment type="line">// writer.println(userlist.get(i).getTeleNumber());</comment>
					<comment type="line">// writer.println(userlist.get(i).getAdress());</comment>
					<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStringTOTxt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if>if <condition>(<expr><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>history</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"STARTOFHISTORY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>history</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
							<comment type="line">// writer.println(userlist.get(i).history.get(i)</comment>
							<comment type="line">// .getTitle());</comment>
							<comment type="line">// writer.println(userlist.get(i).history.get(i)</comment>
							<comment type="line">// .getAuthor());</comment>
							<comment type="line">// writer.println(userlist.get(i).history.get(i)</comment>
							<comment type="line">// .getGenre());</comment>
							<comment type="line">// writer.println(userlist.get(i).history.get(i)</comment>
							<comment type="line">// .getPublisher());</comment>
							<comment type="line">// writer.println(userlist.get(i).history.get(i)</comment>
							<comment type="line">// .getRentOutDate());</comment>
							<comment type="line">// writer.println(userlist.get(i).history.get(i)</comment>
							<comment type="line">// .getReturnDate());</comment>
							<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>history</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>
									<operator>.</operator><call><name>getStringTOTxt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></for>
						<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ENDOFHISTORY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<if>if <condition>(<expr><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>rentedBooks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"STARTOFRENTEDBOOKS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>rentedBooks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
							<comment type="line">// writer.println(userlist.get(i).rentedBooks.get(i)</comment>
							<comment type="line">// .getTitle());</comment>
							<comment type="line">// writer.println(userlist.get(i).rentedBooks.get(i)</comment>
							<comment type="line">// .getAuthor());</comment>
							<comment type="line">// writer.println(userlist.get(i).rentedBooks.get(i)</comment>
							<comment type="line">// .getGenre());</comment>
							<comment type="line">// writer.println(userlist.get(i).rentedBooks.get(i)</comment>
							<comment type="line">// .getPublisher());</comment>
							<comment type="line">// writer.println(userlist.get(i).rentedBooks.get(i)</comment>
							<comment type="line">// .getRentOutDate());</comment>
							<comment type="line">// writer.println(userlist.get(i).rentedBooks.get(i)</comment>
							<comment type="line">// .getReturnDate());</comment>

							<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>userlist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>rentedBooks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>
									<operator>.</operator><call><name>getStringTOTxt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></for>
						<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ENDOFRENTEDBOOKS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			<expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><comment type="line">// always close the file connection</comment>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		}</block></catch></try>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>readUserFromFile</name><parameter_list>()</parameter_list> <block>{
		<try>try <block>{
			<decl_stmt><decl><type><name>File</name></type> <name>userFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"userFile.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Scanner</name></type> <name>userReader</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>userReader</name> <operator>=</operator> <operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name>userFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>userName</name></decl>, <decl><type ref="prev"/><name>password</name></decl>, <decl><type ref="prev"/><name>email</name></decl>, <decl><type ref="prev"/><name>teleNumber</name></decl>, <decl><type ref="prev"/><name>adress</name></decl>;</decl_stmt>
			<comment type="line">// hasNext() check if there is another line</comment>
			<decl_stmt><decl><type><name>String</name></type> <name>info</name> <init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name><name>userReader</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name><name>userReader</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<while>while <condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>info</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{
				<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>userInfo</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name><name>userInfo</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>userInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>userName</name> <operator>=</operator> <name><name>userInfo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>password</name> <operator>=</operator> <name><name>userInfo</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>email</name> <operator>=</operator> <name><name>userInfo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>teleNumber</name> <operator>=</operator> <name><name>userInfo</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>adress</name> <operator>=</operator> <name><name>userInfo</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

					<decl_stmt><decl><type><name>UserData</name></type> <name>user</name> <init>= <expr><operator>new</operator> <call><name>UserData</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>userName</name></expr></argument>, <argument><expr><name>password</name></expr></argument>,
							<argument><expr><name>email</name></expr></argument>, <argument><expr><name>teleNumber</name></expr></argument>, <argument><expr><name>adress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>userlist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="line">// name = userReader.nextLine();</comment>
					<comment type="line">// userName = userReader.nextLine();</comment>
					<comment type="line">// password = userReader.nextLine();</comment>
					<comment type="line">// email = userReader.nextLine();</comment>
					<comment type="line">// teleNumber = userReader.nextLine();</comment>
					<comment type="line">// adress = userReader.nextLine();</comment>
					<comment type="line">//</comment>
					<comment type="line">// UserData user = new UserData(name, userName, password,</comment>
					<comment type="line">// email,</comment>
					<comment type="line">// teleNumber, adress);</comment>
					<comment type="line">// userlist.add(user);</comment>
					<expr_stmt><expr><name>info</name> <operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt>
					<if>if <condition>(<expr><call><name><name>userReader</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name><name>userReader</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<if>if <condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>info</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
							<operator>&amp;&amp;</operator> <call><name><name>info</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"STARTOFHISTORY"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>info</name> <operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt>
						<if>if <condition>(<expr><call><name><name>userReader</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name><name>userReader</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
						<while>while <condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>info</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{
							<if>if <condition>(<expr><operator>!</operator><call><name><name>info</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"ENDOFHISTORY"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
								<decl_stmt><decl><type><name>String</name></type> <name>title</name></decl>, <decl><type ref="prev"/><name>author</name></decl>, <decl><type ref="prev"/><name>genre</name></decl>, <decl><type ref="prev"/><name>publisher</name></decl>, <decl><type ref="prev"/><name>rentedOutDate</name></decl>, <decl><type ref="prev"/><name>returnDate</name></decl>;</decl_stmt>
								<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>infos</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<if>if <condition>(<expr><name><name>infos</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><then> <block>{
									<expr_stmt><expr><name>title</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
									<expr_stmt><expr><name>author</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
									<expr_stmt><expr><name>genre</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
									<expr_stmt><expr><name>publisher</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
									<expr_stmt><expr><name>rentedOutDate</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
									<expr_stmt><expr><name>returnDate</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
									<decl_stmt><decl><type><name>RentedBooks</name></type> <name>book</name> <init>= <expr><operator>new</operator> <call><name>RentedBooks</name><argument_list>(<argument><expr><name>title</name></expr></argument>,
											<argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>,
											<argument><expr><name>rentedOutDate</name></expr></argument>, <argument><expr><name>returnDate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
									<expr_stmt><expr><call><name><name>user</name><operator>.</operator><name>history</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>book</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								}</block></then></if>
								<expr_stmt><expr><name>info</name> <operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt>
								<if>if <condition>(<expr><call><name><name>userReader</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
									<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name><name>userReader</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
								}</block></then></if>
							}</block></then> <else>else <block>{
								<break>break;</break>
							}</block></else></if>
							<comment type="line">// title = userReader.nextLine();</comment>
							<comment type="line">// author = userReader.nextLine();</comment>
							<comment type="line">// genre = userReader.nextLine();</comment>
							<comment type="line">// publisher = userReader.nextLine();</comment>
							<comment type="line">// rentedOutDate = userReader.nextLine();</comment>
							<comment type="line">// returnDate = userReader.nextLine();</comment>

							<comment type="line">// RentedBooks book = new RentedBooks(title, author,</comment>
							<comment type="line">// genre, publisher, rentedOutDate, returnDate);</comment>
							<comment type="line">// user.history.add(book);</comment>
						}</block></while>
					}</block></then></if>
					<if>if <condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>info</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator> <call><name><name>info</name><operator>.</operator><name>equals</name></name><argument_list>(
									<argument><expr><literal type="string">"STARTOFRENTEDBOOKS"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>info</name> <operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt>
						<if>if <condition>(<expr><call><name><name>userReader</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name><name>userReader</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
						<while>while <condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>info</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{
							<if>if <condition>(<expr><operator>!</operator><call><name><name>info</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"ENDOFRENTEDBOOKS"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
								<decl_stmt><decl><type><name>String</name></type> <name>title</name></decl>, <decl><type ref="prev"/><name>author</name></decl>, <decl><type ref="prev"/><name>genre</name></decl>, <decl><type ref="prev"/><name>publisher</name></decl>, <decl><type ref="prev"/><name>rentedOutDate</name></decl>, <decl><type ref="prev"/><name>returnDate</name></decl>;</decl_stmt>
								<decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>infos</name> <init>= <expr><call><name><name>info</name><operator>.</operator><name>split</name></name><argument_list>(
										<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
								<if>if <condition>(<expr><name><name>infos</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition><then> <block>{
									<expr_stmt><expr><name>title</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
									<expr_stmt><expr><name>author</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
									<expr_stmt><expr><name>genre</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
									<expr_stmt><expr><name>publisher</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
									<expr_stmt><expr><name>rentedOutDate</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
									<expr_stmt><expr><name>returnDate</name> <operator>=</operator> <name><name>infos</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>
									<decl_stmt><decl><type><name>RentedBooks</name></type> <name>book</name> <init>= <expr><operator>new</operator> <call><name>RentedBooks</name><argument_list>(<argument><expr><name>title</name></expr></argument>,
											<argument><expr><name>author</name></expr></argument>, <argument><expr><name>genre</name></expr></argument>, <argument><expr><name>publisher</name></expr></argument>,
											<argument><expr><name>rentedOutDate</name></expr></argument>, <argument><expr><name>returnDate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
									<expr_stmt><expr><call><name><name>user</name><operator>.</operator><name>rentedBooks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>book</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
								}</block></then></if>
								<expr_stmt><expr><name>info</name> <operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt>
								<if>if <condition>(<expr><call><name><name>userReader</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
									<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name><name>userReader</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
								}</block></then></if>
							}</block></then> <else>else <block>{
								<break>break;</break>
							}</block></else></if>
							<comment type="line">// String title, author, genre, publisher,</comment>
							<comment type="line">// rentedOutDate, returnDate;</comment>
							<comment type="line">// title = userReader.nextLine();</comment>
							<comment type="line">// author = userReader.nextLine();</comment>
							<comment type="line">// genre = userReader.nextLine();</comment>
							<comment type="line">// publisher = userReader.nextLine();</comment>
							<comment type="line">// rentedOutDate = userReader.nextLine();</comment>
							<comment type="line">// returnDate = userReader.nextLine();</comment>
							<comment type="line">//</comment>
							<comment type="line">// RentedBooks book = new RentedBooks(title, author,</comment>
							<comment type="line">// genre, publisher, rentedOutDate, returnDate);</comment>
							<comment type="line">// user.rentedBooks.add(book);</comment>
						}</block></while>
					}</block></then></if>
				}</block></then></if>
			}</block></while>
			<expr_stmt><expr><call><name><name>userReader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>

}</block></class></unit>

</unit>
