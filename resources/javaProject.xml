<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5">

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/dit042/Random.java" hash="96a546da9565a59d2f9c117176d387e36de9b927"><package>package <name>dit042</name>;</package>

<comment type="block" format="javadoc">/**
 *  Seventies style random generating functions.
 *  @author Cezar Ionescu &lt;cezar@chalmers.se&gt;
 *  @version 0.1
 *  @since 2014-08-28
 */</comment>
<class><specifier>public</specifier> class <name>Random</name> <block>{
    <comment type="block" format="javadoc">/**
     *  The java.util.Random number generator that does all the work.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name></type> <name>rand</name> <init>= <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Random</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     *  Generates a random byte from a uniform distribution.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>byte</name></type> <name>randomByte</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><name>byte</name><operator>)</operator> <call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Generates a random ASCII char from a uniform distribution.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>char</name></type> <name>randomChar</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><name>char</name><operator>)</operator> <call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Generates a random short from a uniform distribution.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>short</name></type> <name>randomShort</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><name>short</name><operator>)</operator> <call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Generates a random int from a uniform distribution.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>randomInt</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     *  Generates one of n possible results (0, 1, ..., n-1) from a uniform distribution.
     *  @parameter n the number of results generated
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>randomInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>rand</name><operator>.</operator><name>nextInt</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Generates a random long from a uniform distribution.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>randomLong</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>rand</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Generates a random float from a uniform distribution.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>randomFloat</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>rand</name><operator>.</operator><name>nextFloat</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Generates a random double from a uniform distribution.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>double</name></type> <name>randomDouble</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>rand</name><operator>.</operator><name>nextDouble</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Generates a random double from a uniform distribution.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>double</name></type> <name>randomNormal</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>rand</name><operator>.</operator><name>nextGaussian</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Generates a random boolean from a uniform distribution.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>randomBoolean</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>rand</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment3/Directors.java" hash="90306648cfc97bbc7b2137f198f5e74a3e19fcba"><package>package <name>assignment3</name>;</package>

<class><specifier>public</specifier> class <name>Directors</name> <super><extends>extends <name>Employees</name></extends></super>  <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>education</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>department</name></decl>;</decl_stmt>
	
	<constructor><name>Directors</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>grossSalary</name></decl></parameter> , <parameter><decl><type><name>String</name></type> <name>education</name></decl></parameter> , <parameter><decl><type><name>String</name></type> <name>department</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>grossSalary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>education</name></name> <operator>=</operator> <name>education</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>department</name></name> <operator>=</operator> <name>department</name></expr>;</expr_stmt>
		

	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return  <expr><call><name><name>super</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" with name: "</literal> <operator>+</operator> <call><name><name>super</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" and the education "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>education</name></name> <operator>+</operator> <literal type="string">" and works in the department of "</literal><operator>+</operator> <name><name>this</name><operator>.</operator><name>department</name></name> <operator>+</operator><literal type="string">" 's gross salary is of "</literal> <operator>+</operator> <call><name>getGrossSalary</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" SEK per month."</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>double</name></type> <name>getGrossSalary</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>double</name></type> <name>benifits</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>grossSalaryWbonus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>education</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"BSc"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>double</name></type> <name>newgrossSalary</name> <init>= <expr><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>+</operator> <operator>(</operator><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <name>benifits</name></expr></init></decl> ;</decl_stmt> 
			<expr_stmt><expr><name>grossSalaryWbonus</name> <operator>=</operator> <name>newgrossSalary</name></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>education</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"MSc"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>double</name></type> <name>newgrossSalary</name> <init>= <expr><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>+</operator> <operator>(</operator><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>*</operator> <literal type="number">20</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <name>benifits</name></expr></init></decl> ;</decl_stmt> 
			<expr_stmt><expr><name>grossSalaryWbonus</name> <operator>=</operator> <name>newgrossSalary</name></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>education</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"PhD"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>double</name></type> <name>newgrossSalary</name> <init>= <expr><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>+</operator> <operator>(</operator><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>*</operator> <literal type="number">35</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <name>benifits</name></expr></init></decl> ;</decl_stmt> 
			<expr_stmt><expr><name>grossSalaryWbonus</name> <operator>=</operator> <name>newgrossSalary</name></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<return>return <expr><name>grossSalaryWbonus</name></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>double</name></type> <name>getNetSalary</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>( <expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">30000</literal></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call>  <operator>-</operator> <operator>(</operator><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call>  <operator>*</operator> <literal type="number">0.1</literal><operator>)</operator></expr>;</return>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call>  <operator>&gt;</operator> <literal type="number">50000</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>double</name></type> <name>mintaxamount</name> <init>= <expr><literal type="number">30000</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>double</name></type> <name>rest</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call>  <operator>-</operator> <name>mintaxamount</name></expr></init></decl>;</decl_stmt>
			<return>return <expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call>  <operator>-</operator> <operator>(</operator><name>mintaxamount</name> <operator>*</operator> <literal type="number">0.2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>rest</name> <operator>*</operator> <literal type="number">0.4</literal><operator>)</operator></expr>;</return>
		}</block></then></if></elseif>
		<else>else <block>{
			<return>return <expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">0.2</literal></expr>;</return>
		}</block></else></if>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getDepartment</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>department</name></name></expr>;</return>
	}</block></function>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">//TODO</comment>
	}</block></function>
	<function><specifier>public</specifier> <type><name>String</name></type> <name>goForIt</name><parameter_list>()</parameter_list> <block>{
		<comment type="line">//TODO</comment>
	}</block></function>
	
	
	
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment3/Employees.java" hash="90c492b0e78a924924abe1adccf6d98c4cd2832b"><package>package <name>assignment3</name>;</package>

<class><specifier>public</specifier>  <specifier>abstract</specifier> class  <name>Employees</name> <super><implements>implements <name><name>Comparable</name> <argument_list type="generic">&lt;<argument><name>Employees</name></argument>&gt;</argument_list></name></implements></super><block>{
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>ID</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>double</name></type> <name>grossSalary</name></decl>;</decl_stmt>
	
	
	<constructor><name>Employees</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter> , <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter> , <parameter><decl><type><name>double</name></type> <name>grossSalary</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>ID</name></name> <operator>=</operator> <name>ID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>grossSalary</name></name> <operator>=</operator> <name>grossSalary</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>name</name></name></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>getID</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>ID</name></name></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>newName</name></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>double</name></type> <name>setGrossSalary</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>newGrossSalary</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>grossSalary</name></name> <operator>=</operator> <name>newGrossSalary</name></expr>;</return>
	}</block></function>
	
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>double</name></type> <name>getGrossSalary</name><parameter_list>()</parameter_list> ;</function_decl>
	
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier>  <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list>;</function_decl>
	
	<function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>double</name></type> <name>getNetSalary</name><parameter_list>()</parameter_list>;</function_decl>
	
	<comment type="block">/*public static Comparator&lt;Employees&gt; getCompByName(){
		
	 Comparator comp = new Comparator&lt;Employees&gt;(){
	     @Override
	     public int compare(Employees s1, Employees s2)
	     {
	         return s1.name.compareTo(s2.name);
	     }

	      
	 };
	 return comp;
	}*/</comment>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Employees</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">//return this.getName().compareTo(o.getName());</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>myName</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>stragersName</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>resultComparison</name> <init>= <expr><call><name><name>myName</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name>stragersName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>resultComparison</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
			<if>if<condition>(<expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><call><name><name>o</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
		          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		          }</block></then>
		    <elseif>else <if>if<condition>(<expr><call><name><name>o</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
		          <return>return <expr><literal type="number">1</literal></expr>;</return>
		          }</block></then></if></elseif>
		    <else>else<block>{
		    	<return>return <expr><literal type="number">0</literal></expr>;</return>
		    	}</block></else></if>
		}</block></then>
		<else>else <block>{
			<return>return <expr><name>resultComparison</name></expr>;</return>
			}</block></else></if>
	}</block></function>

}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment3/Experiment.java" hash="9a0a20a024166d32b75cef507797c064ceb9325d"><package>package <name>assignment3</name>;</package>

<class><specifier>public</specifier> class <name>Experiment</name> <block>{
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>String</name></type> <name>id</name> <init>= <expr><literal type="string">"12314"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><literal type="string">"george"</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>grossSalary</name> <init>= <expr><literal type="number">321</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>GPA</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Employees</name></type> <name>ee</name> <init>= <expr><literal type="null">null</literal></expr></init></decl> ;</decl_stmt>
		<try>try <block>{
		   <expr_stmt><expr><name>ee</name> <operator>=</operator> <operator>new</operator> <call><name>Intern</name><argument_list>(<argument><expr><name>id</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>grossSalary</name></expr></argument>,<argument><expr><name>GPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
			<if>if<condition>(<expr><name>ee</name> <operator>instanceof</operator> <name>Intern</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>Intern</name></type> <name>newee</name> <init>= <expr><operator>(</operator><name>Intern</name><operator>)</operator> <name>ee</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>newee</name><operator>.</operator><name>getGPA</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<try>try<block>{<expr_stmt><expr><call><name><name>newee</name><operator>.</operator><name>setGPA</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block>
				<catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>E</name></decl></parameter>)</parameter_list> <block>{
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"vgdwfdghafas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
				}</block></catch></try>

			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>newee</name><operator>.</operator><name>getGPA</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"vgdwfdghafas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"wrong tipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			
			
			
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment3/Intern.java" hash="83edaad037b921a2c9945fc2fe60dc882d9af222"><package>package <name>assignment3</name>;</package>

<class><specifier>public</specifier> class <name>Intern</name> <super><extends>extends <name>Employees</name></extends></super> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>GPA</name></decl>;</decl_stmt>

	<constructor><name>Intern</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>grossSalary</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>GPA</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>grossSalary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>GPA</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>GPA</name></name> <operator>=</operator> <name>GPA</name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Wrong GPA"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></else></if>
		
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return  <expr><call><name><name>super</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" with name: "</literal> <operator>+</operator> <call><name><name>super</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" and with GPA of "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>GPA</name></name> <operator>+</operator> <literal type="string">" 's gross salary is of "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>grossSalary</name></name> <operator>+</operator> <literal type="string">" SEK per month."</literal></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>double</name></type> <name>getNetSalary</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>double</name></type> <name>benifits</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>GPA</name></name> <operator>&lt;=</operator>  <literal type="number">5</literal></expr> )</condition><then> <block>{
		<return>return <expr><name><name>super</name><operator>.</operator><name>grossSalary</name></name></expr>;</return>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>this</name><operator>.</operator><name>GPA</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition><then> <block>{
			<return>return <expr><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>+</operator> <name>benifits</name></expr>;</return>
		}</block></then></if></elseif>
		<else>else <block>{
			<return>return <expr><name><name>super</name><operator>.</operator><name>grossSalary</name></name></expr>;</return>
		}</block></else></if>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>int</name></type> <name>setGPA</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newGPA</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{  <comment type="line">// cant exces it with reference employee and object intern, can only be entered by object and reference intern, or we should downcase or change the reference</comment>
		<if>if <condition>(<expr><name>newGPA</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>GPA</name></name> <operator>=</operator> <name>newGPA</name></expr>;</return>}</block></then>
		<else>else <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"wrong GPA"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></else></if>
	}</block></function>
	<function><specifier>public</specifier> <type><name>int</name></type> <name>getGPA</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>GPA</name></name></expr>;</return>
	}</block></function>


	<function><specifier>public</specifier> <type><name>double</name></type> <name>getGrossSalary</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>super</name><operator>.</operator><name>grossSalary</name></name></expr>;</return>
	}</block></function>
	
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment3/RegularIncome.java" hash="ea6afbd19ea3445cadc0a5ddc8f144c016a90d7b"><package>package <name>assignment3</name>;</package>

<class><specifier>public</specifier> class <name>RegularIncome</name> <super><extends>extends <name>Employees</name></extends></super> <block>{
	<constructor><name>RegularIncome</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>grossSalary</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>grossSalary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>ID</name></name> <operator>+</operator> <literal type="string">" with name: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>name</name></name> <operator>+</operator> <literal type="string">"'s gross salary is of "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>grossSalary</name></name> <operator>+</operator> <literal type="string">" SEK per month."</literal></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>double</name></type> <name>getNetSalary</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>grossSalary</name></name> <operator>-</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>grossSalary</name></name> <operator>*</operator> <literal type="number">0.1</literal><operator>)</operator></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>double</name></type> <name>getGrossSalary</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name><name>this</name><operator>.</operator><name>grossSalary</name></name></expr>;</return>	
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/dit042/SimpleIO.java" hash="067ce871199712ab28972013b3809261b1303a10"><package>package <name>dit042</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Scanner</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<comment type="block" format="javadoc">/**
 *  Seventies style standard IO.
 *  @author Cezar Ionescu &lt;cezar@chalmers.se&gt;
 *  @author Johannes Ekberg &lt;uppfinnarn@gmail.com&gt;
 *  @author Musard Balliu
 *  @version 0.4
 *  @since 2015-09-01
 */</comment>
<comment type="line">// Fixes by Johannes Ekberg: closed scanners, removed useless scanner</comment>
<comment type="line">// Closing scanners leads to errors for multiple reads.</comment>
<comment type="line">// Musard: add method to read a String and a line from std input</comment>
<comment type="line">// Musard: modified readChar and setLocale for double</comment>

<class><specifier>public</specifier> class <name>SimpleIO</name> <block>{
    <comment type="block" format="javadoc">/**
     *  "Global" variable used for error checking.
     *  Always check if the value is false after an input
     *  operation, otherwise the result can be incorrect!
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>IOError</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     *  Generic print.
     *  @param o object to print
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Generic println.
     *  @param o object to print
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next byte from standard input.
     *  Sets IOResult in case of error.
     *  @return next byte read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>byte</name></type> <name>readByte</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>byte</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextByte</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next short from standard input.
     *  Sets IOResult in case of error.
     *  @return next short read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>short</name></type> <name>readShort</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>short</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextShort</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next int from standard input.
     *  Sets IOResult in case of error.
     *  @return next int read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>readInt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next long from standard input.
     *  Sets IOResult in case of error.
     *  @return next long read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>readLong</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next char from standard input.
     *  Should perhaps set IOResult on EOF, but currently doesn't.
     *  @return next char read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>char</name></type> <name>readChar</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>charAt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next float from standard input.
     *  Sets IOResult in case of error.
     *  @return next float read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>readFloat</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scan</name><operator>.</operator><name>useLocale</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextFloat</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next double from standard input.
     *  Sets IOResult in case of error.
     *  @return next double read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>double</name></type> <name>readDouble</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>scan</name><operator>.</operator><name>useLocale</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{

            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextDouble</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next boolean from standard input.
     *  Sets IOResult in case of error.
     *  @return next boolean read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>readBoolean</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextBoolean</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *  Reads next string from standard input.
     *  Stops at the first empty space.
     *  Sets IOResult in case of error.
     *  @return next string read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>readString</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
    
    <comment type="block" format="javadoc">/**
     *  Reads next line from standard input, including empty spaces.
     *  Sets IOResult in case of error.
     *  @return next line read from standard input.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>readLine</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Scanner</name></type> <name>scan</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>scan</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>IOError</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></catch></try>
        
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>    
            
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment3/Manager.java" hash="afbfdca4399d1751980f3dc5d1c22a68a518d4c6"><package>package <name>assignment3</name>;</package>

<class><specifier>public</specifier> class <name>Manager</name> <super><extends>extends <name>Employees</name></extends></super>  <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>education</name></decl>;</decl_stmt>
	
	
	
	<constructor><name>Manager</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>grossSalary</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>education</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>grossSalary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>education</name></name> <operator>=</operator> <name>education</name></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
		<return>return  <expr><call><name><name>super</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" with name: "</literal> <operator>+</operator> <call><name><name>super</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" and the education "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>education</name></name> <operator>+</operator> <literal type="string">" 's gross salary is of "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>grossSalary</name></name> <operator>+</operator> <literal type="string">" SEK per month."</literal></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>double</name></type> <name>getGrossSalary</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>double</name></type> <name>grossSalaryWbonus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>education</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"BSc"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>double</name></type> <name>newgrossSalary</name> <init>= <expr><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>+</operator> <operator>(</operator><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr></init></decl> ;</decl_stmt> 
			<expr_stmt><expr><name>grossSalaryWbonus</name> <operator>=</operator> <name>newgrossSalary</name></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>education</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"MSc"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>double</name></type> <name>newgrossSalary</name> <init>= <expr><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>+</operator> <operator>(</operator><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>*</operator> <literal type="number">20</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr></init></decl> ;</decl_stmt> 
			<expr_stmt><expr><name>grossSalaryWbonus</name> <operator>=</operator> <name>newgrossSalary</name></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>education</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"PhD"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>double</name></type> <name>newgrossSalary</name> <init>= <expr><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>+</operator> <operator>(</operator><name><name>super</name><operator>.</operator><name>grossSalary</name></name> <operator>*</operator> <literal type="number">35</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal></expr></init></decl> ;</decl_stmt> 
			<expr_stmt><expr><name>grossSalaryWbonus</name> <operator>=</operator> <name>newgrossSalary</name></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
		<return>return <expr><name>grossSalaryWbonus</name></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>double</name></type> <name>getNetSalary</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>( <expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">30000</literal></expr>)</condition><then> <block>{
			<return>return <expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call> <operator>-</operator> <operator>(</operator><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">0.1</literal><operator>)</operator></expr>;</return>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call>  <operator>&gt;</operator> <literal type="number">50000</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>double</name></type> <name>mintaxamount</name> <init>= <expr><literal type="number">30000</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>double</name></type> <name>rest</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>mintaxamount</name></expr></init></decl>;</decl_stmt>
			<return>return <expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call> <operator>-</operator> <operator>(</operator><name>mintaxamount</name> <operator>*</operator> <literal type="number">0.2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>rest</name> <operator>*</operator> <literal type="number">0.4</literal><operator>)</operator></expr>;</return>
		}</block></then></if></elseif>
		<else>else <block>{
			<return>return <expr><call><name><name>this</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">0.2</literal></expr>;</return>
		}</block></else></if>
	}</block></function>
	
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment3/ReusaxCorpMain2.java" hash="28b2350c18d05f58b0b19f31ccf4f8b153739338"><package>package <name>assignment3</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import static <name><name>dit042</name><operator>.</operator><name>SimpleIO</name><operator>.</operator><name>*</name></name>;</import>
<class><specifier>public</specifier> class <name>ReusaxCorpMain2</name> <block>{
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Employees</name></argument>&gt;</argument_list></name></type> <name>employeelist</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"==Welcome to ResaxCorp=="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>answer</name> <init>= <expr><literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>answer</name> <operator>!=</operator> <literal type="number">9</literal></expr>)</condition> <block>{
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"1.Register a new employee."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"2.Remove an employee."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"3.Retrieve an employee."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"4.Update employees information."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"5.Calculate The Total Expenses In By paying GrossSalaries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"6.Calculate The Total Expenses In By paying NetSalaries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"7.Inform The Total Number of Employees Registered."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"8.Quit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Enter the option you want to choose: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>answer</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
			
			<if>if<condition>(<expr><name>answer</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the ID of the employee: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>ID</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>name</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>double</name></type> <name>grossSalary</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>education</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>department</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>GDP</name></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Enter the type of the employee; 1.Manager, 2.Director , 3.Intern , 4.Regular Employee."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the name of the employee:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the gross salary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>grossSalary</name> <operator>=</operator> <call><name>readDouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<if>if<condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the education level: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>education</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>Employees</name></type> <name>employee</name> <init>= <expr><operator>new</operator> <call><name>Manager</name><argument_list>(<argument><expr><name>ID</name></expr></argument> , <argument><expr><name>name</name></expr></argument> , <argument><expr><name>grossSalary</name></expr></argument>, <argument><expr><name>education</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>employee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					}</block></then>
					<elseif>else <if>if <condition>( <expr><name>ans</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the education level: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>education</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the department: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>department</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>Employees</name></type> <name>employee</name> <init>= <expr><operator>new</operator> <call><name>Directors</name><argument_list>(<argument><expr><name>ID</name></expr></argument> , <argument><expr><name>name</name></expr></argument> , <argument><expr><name>grossSalary</name></expr></argument>, <argument><expr><name>education</name></expr></argument> , <argument><expr><name>department</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>employee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					}</block></then></if></elseif>
					<elseif>else <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the GDP of the Intern: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>GDP</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>Employees</name></type> <name>employee</name> <init>= <expr><operator>new</operator> <call><name>Intern</name><argument_list>(<argument><expr><name>ID</name></expr></argument> , <argument><expr><name>name</name></expr></argument> , <argument><expr><name>grossSalary</name></expr></argument>, <argument><expr><name>GDP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>employee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						
					}</block></then></if></elseif>
					<else>else <block>{
						<decl_stmt><decl><type><name>Employees</name></type> <name>employee</name> <init>= <expr><operator>new</operator> <call><name>RegularIncome</name><argument_list>(<argument><expr><name>ID</name></expr></argument> , <argument><expr><name>name</name></expr></argument> , <argument><expr><name>grossSalary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>employee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					
					}</block></else></if>
					
				}</block></then>
				
			
			<elseif>else <if>if<condition>(<expr><name>answer</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the ID of the employee: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>ID</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>employeelist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<if>if <condition>( <expr><call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getID</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else>else <block>{
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"An employee of ID "</literal><operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" is not registered in the system. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></for>
			}</block></then></if></elseif>
			
			
			<elseif>else <if>if<condition>(<expr><name>answer</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the ID of the employee: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>ID</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>employeelist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<if>if <condition>( <expr><call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getID</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else>else <block>{
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"An employee of ID "</literal><operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" is not registered in the system. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					
				}</block></for>
			}</block></then></if></elseif>
			
			
			<elseif>else <if>if<condition>(<expr><name>answer</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the ID of the employee: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>ID</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>employeelist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<if>if <condition>( <expr><call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getID</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"please choose what you want to update:1.Name , 2.grossSalary."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the new name: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setName</name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
					<else>else <block>{
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the new gross salary: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>double</name></type> <name>newGrossSalary</name> <init>= <expr><call><name>readDouble</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setGrossSalary</name><argument_list>(<argument><expr><name>newGrossSalary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then>
					<else>else <block>{
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"An employee of ID "</literal><operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" is not registered in the system. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></for>
			}</block></then></if></elseif>
			
			
			<elseif>else <if>if<condition>(<expr><name>answer</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>double</name></type> <name>grossSalaries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>employeelist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><name>grossSalaries</name> <operator>=</operator> <name>grossSalaries</name> <operator>+</operator> <call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getGrossSalary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><name>grossSalaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></then></if></elseif>
			
			
			<elseif>else <if>if<condition>(<expr><name>answer</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>double</name></type> <name>netSalaries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>employeelist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><name>netSalaries</name> <operator>=</operator> <name>netSalaries</name> <operator>+</operator> <call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNetSalary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><name>netSalaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></then></if></elseif>
				
			
			<elseif>else <if>if<condition>(<expr><name>answer</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><call><name><name>employeelist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></then></if></elseif>
			
			
			<elseif>else <if>if<condition>(<expr><name>answer</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition><then> <block>{
				<break>break;</break>
			}</block></then></if></elseif>
			
			
			<else>else<block>{
				<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Invalide choise please choose again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			
		}</block></while>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"goodbye"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>

	


</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment2/Assignment2.java" hash="802b6229248dc2637740a90b19512c89052e6120"><package>package <name>assignment2</name>;</package>
<import>import static <name><name>dit042</name><operator>.</operator><name>SimpleIO</name><operator>.</operator><name>*</name></name>;</import>
<class><specifier>public</specifier> class <name>Assignment2</name> <block>{

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{  
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">" === Welcome to Global Economy === "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numofcountries</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Country</name></type> <name><name>countries</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>Country</name><index>[<expr><name>numofcountries</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>option</name></decl>;</decl_stmt>
		<do>do<block>{
			<expr_stmt><expr><call><name>printMenuOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					
			
					<if>if <condition>(<expr><name>option</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>creatCountry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>questionToCreat</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					
					
					
					<elseif>else <if>if<condition>(<expr><name>option</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
						<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numofcountries</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
							<if>if<condition>(<expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
							}</block></then></if>
						}</block></for>
					}</block></then></if></elseif>
					
					
					
					<elseif>else <if>if<condition>(<expr><name>option</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the name of the country that you want to print: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>ans</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numofcountries</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
							<if>if<condition>(<expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>ans</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
								<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then>
							<else>else <block>{
							}</block></else></if>
						}</block></for>
						
					}</block></then></if></elseif>
					
					
					
					<elseif>else <if>if<condition>(<expr><name>option</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the name of the country that you want to enject money: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>answer</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the amont that you want to enject: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>double</name></type> <name>enject</name> <init>= <expr><call><name>readDouble</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numofcountries</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
							<if>if <condition>(<expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>answer</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
								<expr_stmt><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>economyInjection</name><argument_list>(<argument><expr><name>enject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
						}</block></for>
						
					}</block></then></if></elseif>
					
					
					
					<elseif>else <if>if <condition>( <expr><name>option</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the name of the country that you want to enject money: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>answer</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the amont that you want to pay: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>double</name></type> <name>paydebts</name> <init>= <expr><call><name>readDouble</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numofcountries</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
							<if>if <condition>(<expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>answer</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
								<expr_stmt><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>payDebts</name><argument_list>(<argument><expr><name>paydebts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
						}</block></for>
					}</block></then></if></elseif> 
					
					
					
					<elseif>else <if>if<condition>(<expr><name>option</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the name of the country that you want to update: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>String</name></type> <name>answer</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
						<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numofcountries</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
							<if>if<condition>(<expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>answer</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
									<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"1.Change "</literal> <operator>+</operator> <name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>+</operator> <literal type="string">"'s name."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"2.Change "</literal> <operator>+</operator> <name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>+</operator> <literal type="string">"'s population."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
									<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
									<if>if<condition>( <expr><name>ans</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
										<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the new name: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
										<expr_stmt><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
									}</block></then>
									<else>else <block>{
										<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the new population:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
										<expr_stmt><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>population</name> <operator>=</operator> <call><name>readDouble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
									}</block></else></if>
							}</block></then>
							<elseif>else <if>if <condition>(<expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>answer</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
								<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"ERROR!! Country is not regisered!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if></elseif></if>
						}</block></for>
					}</block></then></if></elseif>
					
					
					
					<elseif>else <if>if<condition>(<expr><name>option</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Thanks! Goodbye."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then></if></elseif>
					
					
					<else>else <block>{
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Wrong input, please try again!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					
				}</block>
		while <condition>(<expr><name>option</name> <operator>!=</operator> <literal type="number">7</literal></expr>)</condition>;</do> <block>{
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block></function>


	<function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>printMenuOptions</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" === Welcome to Global Economy === "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" Choose an option below: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 1. Register a country. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 2. Print all countries. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 3. Print a country's information. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 4. Inject money to a country. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 5. Pay a country's debt. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 6. Quit this program. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>Country</name></type> <name>creatCountry</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>numofcountries</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Country</name></type> <name><name>countries</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>Country</name><index>[<expr><name>numofcountries</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numofcountries</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the name of the country: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the GDP: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>double</name></type> <name>newGDP</name> <init>= <expr><call><name>readDouble</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the number of the population: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>double</name></type> <name>newPopulation</name> <init>= <expr><call><name>readDouble</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>new</operator> <call><name>Country</name> <argument_list>(<argument><expr><name>newName</name></expr></argument> , <argument><expr><name>newGDP</name></expr></argument> , <argument><expr><name>newPopulation</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
				
			}</block></then>
			<else>else <block>{
				
			}</block></else></if>
		}</block></for>
		<constructor><specifier>public</specifier> <specifier>static</specifier> <name>questionToCreat</name><parameter_list>()</parameter_list> <block>{
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Do you want to enter a new country?Press N to exit?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>char</name></type> <name>answer</name> <init>= <expr><call><name>readChar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>answer</name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition><then> <block>{
					<break>break;</break>
				}</block></then>
				<else>else <block>{
					<expr_stmt><expr><call><name>creatCounty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
		}</block></constructor>
	}</block></function>
}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment2/Country.java" hash="5504c9575b9f66c65fe80531c92f67f44de92310"><package>package <name>assignment2</name>;</package>

<class><specifier>public</specifier> class <name>Country</name> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>countryName</name></decl>;</decl_stmt> 	
	<decl_stmt><decl><specifier>private</specifier> <type><name>double</name></type> <name>population</name></decl>;</decl_stmt> 
	<decl_stmt><decl><specifier>private</specifier> <type><name>double</name></type> <name>gdp</name></decl>;</decl_stmt>	
	
	
	<decl_stmt><decl><specifier>private</specifier> <type><name>double</name></type> <name>gdpCap</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier>	<type><name>String</name></type> <name>classification</name></decl>;</decl_stmt>
	
	<constructor><name>Country</name> <parameter_list>(<parameter><decl><type><name>String</name></type> <name>countryName</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>gdp</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>population</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>countryName</name></name> <operator>=</operator> <name>countryName</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>gdp</name></name> <operator>=</operator> <name>gdp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>population</name></name> <operator>=</operator> <name>population</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>getGdpCap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>classification</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>classification</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>gdpCap</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>classification</name></name> <operator>=</operator> <literal type="string">"developed country"</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name><name>gdpCap</name> <argument_list type="generic">&lt; <argument><literal type="number">10000</literal> <operator>&amp;&amp;</operator> <name>gdp</name></argument> &gt;</argument_list></name> <literal type="number">1000</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>classification</name></name> <operator>=</operator> <literal type="string">"economy in transition"</literal></expr>;</expr_stmt>
		}</block></then></if></elseif>   
	<else>else <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>classification</name></name> <operator>=</operator> <literal type="string">"developing country"</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>economyInjection</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>economyInject</name></decl></parameter>)</parameter_list> <block>{
		  <decl_stmt><decl><type><name>double</name></type> <name>newGdp</name> <init>= <expr><name><name>this</name><operator>.</operator><name>gdp</name></name> <operator>+</operator> <name>economyInject</name></expr></init></decl>;</decl_stmt>
		  <if>if <condition>(<expr><name>newGdp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			  <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  }</block></then><else>else <block>{
			 <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gdp</name></name> <operator>=</operator> <name>newGdp</name></expr>;</expr_stmt>
			 <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gdpCap</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>gdp</name></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>population</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>classification</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		  }</block></else></if>
	}</block></function>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>payDebts</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>payDebts</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>double</name></type> <name>newGdp</name> <init>= <expr><name><name>this</name><operator>.</operator><name>gdp</name></name> <operator>-</operator> <name>payDebts</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>newGdp</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then><else>else <block>{
				<expr_stmt><expr><name><name>this</name><operator>.</operator><name>gdp</name></name> <operator>=</operator> <name>newGdp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>this</name><operator>.</operator><name>gdpCap</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>gdp</name></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>population</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>classification</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></function>
		<function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name><name>this</name><operator>.</operator><name>countryName</name></name></expr>;</return>
		}</block></function>
		<function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
			<decl_stmt><decl><type><name>String</name></type> <name>line</name> <init>= <expr><name><name>this</name><operator>.</operator><name>countryName</name></name><operator>+</operator> <literal type="string">": ("</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>classification</name></name> <operator>+</operator> <literal type="string">").\r\n"</literal> 
		                	<operator>+</operator> <literal type="string">"Population: "</literal> <operator>+</operator><name><name>this</name><operator>.</operator><name>population</name></name><operator>+</operator><literal type="string">"\r\n"</literal>
		                	<operator>+</operator> <literal type="string">"GDP: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>gdp</name></name> <operator>+</operator> <literal type="string">"\r\n"</literal>
		                	<operator>+</operator> <name><name>this</name><operator>.</operator><name>gdpCap</name></name> <operator>+</operator> <literal type="string">" per capita."</literal></expr></init></decl>;</decl_stmt>
			<return>return <expr><name>line</name></expr>;</return> 
		}</block></function>
		<function><specifier>public</specifier> <type><name>double</name></type> <name>getPopulation</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name><name>this</name><operator>.</operator><name>population</name></name></expr>;</return>
		}</block></function>
		<function><specifier>public</specifier> <type><name>double</name></type> <name>getGdpCap</name><parameter_list>()</parameter_list> <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>gdpCap</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>gdp</name></name> <operator>/</operator> <name><name>this</name><operator>.</operator><name>population</name></name></expr>;</expr_stmt>
			<return>return <expr><name><name>this</name><operator>.</operator><name>gdpCap</name></name></expr>;</return>
		}</block></function>
		<function><specifier>public</specifier> <type><name>double</name></type> <name>getGdp</name><parameter_list>()</parameter_list> <block>{
			<return>return <expr><name><name>this</name><operator>.</operator><name>gdp</name></name></expr>;</return>
		}</block></function>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>changeCoutryName</name> <parameter_list>(<parameter><decl><type><name>String</name></type> <name>newcountryName</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>countryName</name></name> <operator>=</operator> <name>newcountryName</name></expr>;</expr_stmt>
		}</block></function>
		<function><specifier>public</specifier> <type><name>void</name></type> <name>changePopulation</name> <parameter_list>(<parameter><decl><type><name>double</name></type> <name>newPopulation</name></decl></parameter>)</parameter_list> <block>{
			<synchronized>synchronized <init>(<expr><name>classification</name></expr>)</init> <block>{
				<expr_stmt><expr><name><name>this</name><operator>.</operator><name>population</name></name> <operator>=</operator> <name>newPopulation</name></expr> ;</expr_stmt> 
				<expr_stmt><expr><call><name>getGdpCap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>classification</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></synchronized>
			
		}</block></function>
}</block></class></unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment3/ReusaxCorp.java" hash="b8d13e561db52b169e6e565b96f410d3c728e0e4"><package>package <name>assignment3</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

	<class><specifier>public</specifier> class <name>ReusaxCorp</name> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Employees</name></argument>&gt;</argument_list></name></type> <name>employeelist</name></decl>;</decl_stmt>
	
	<constructor><specifier>public</specifier> <name>ReusaxCorp</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>employeelist</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>printEmployee</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Employees</name></type> <name>foundEmployee</name> <init>= <expr><call><name>retriveEmployee</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>foundEmployee</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
		<return>return <expr><call><name><name>foundEmployee</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
		}</block></then>
		<else>else <block>{
			<return>return <expr><literal type="string">"employee does not exist"</literal></expr>;</return>
		}</block></else></if>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>printAllEmployees</name><parameter_list>()</parameter_list> <block>{
	 <return>return <expr><call><name><name>employeelist</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>Employees</name></type> <name>retriveEmployee</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>employeelist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>  ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getID</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<return>return  <expr><call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then></if>
		}</block></for>
		<return>return  <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>promotionToManager</name><parameter_list>(<parameter><decl><type><name>Employees</name></type> <name>foundEmployee</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>education</name></decl></parameter> )</parameter_list> <block>{
			<expr_stmt><expr><call><name>createManger</name><argument_list>(<argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name>education</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>promotionToDirector</name><parameter_list>(<parameter><decl><type><name>Employees</name></type> <name>foundEmployee</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>education</name></decl></parameter> , <parameter><decl><type><name>String</name></type> <name>department</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>createDirector</name><argument_list>(<argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>education</name></expr></argument> , <argument><expr><name>department</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>promotionToIntern</name><parameter_list>(<parameter><decl><type><name>Employees</name></type> <name>foundEmployee</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>GPA</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws><block>{
			<expr_stmt><expr><call><name>createIntern</name><argument_list>(<argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>GPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>promotionToRegularEmployee</name><parameter_list>(<parameter><decl><type><name>Employees</name></type> <name>foundEmployee</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>createRegulareEmployee</name><argument_list>(<argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getID</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>getGrossSalary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>	
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setEmployeeName</name><parameter_list>(<parameter><decl><type><name>Employees</name></type> <name>foundEmployee</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>newName</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>foundEmployee</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>setEmployeeGrossSalary</name><parameter_list>(<parameter><decl><type><name>Employees</name></type> <name>foundEmployee</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>newGrossSalary</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>foundEmployee</name><operator>.</operator><name>setGrossSalary</name></name><argument_list>(<argument><expr><name>newGrossSalary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>Remove</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws><block>{
		<decl_stmt><decl><type><name>Employees</name></type> <name>foundEmployee</name> <init>= <expr><call><name>retriveEmployee</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>foundEmployee</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
			<else>else <block>{
				<decl_stmt><decl><type><name>Exception</name></type> <name>banana</name> <init>= <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Emplyee fuck you"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<throw>throw <expr><name>banana</name></expr>;</throw>
				<comment type="line">//throw new Exception("Employee does not exict"); this is better</comment>
			}</block></else></if>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>double</name></type> <name>netSalaries</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>double</name></type> <name>netSalaries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>employeelist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>netSalaries</name> <operator>=</operator> <name>netSalaries</name> <operator>+</operator> <call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNetSalary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<return>return <expr><name>netSalaries</name></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>double</name></type> <name>grossSalaries</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>double</name></type> <name>grossSalaries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>employeelist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>grossSalaries</name> <operator>=</operator> <name>grossSalaries</name> <operator>+</operator> <call><name><name>employeelist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getGrossSalary</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
		}</block></for>
		<return>return <expr><name>grossSalaries</name></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>printEmployeeInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Employees</name></type> <name>foundEmployee</name> <init>= <expr><call><name>retriveEmployee</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>foundEmployee</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>foundEmployee</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"An employee of ID "</literal><operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" is not registered."</literal></expr></argument>)</argument_list></call></expr>;</throw>
		}</block></else></if>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>removeEmployee</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Employees</name></type> <name>foundEmployee</name> <init>= <expr><call><name>retriveEmployee</name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>foundEmployee</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"An employee of ID "</literal><operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" is not registered in the system. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createRegulareEmployee</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter> , <parameter><decl><type><name>double</name></type> <name>grossSalary</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Employees</name></type> <name>employee</name> <init>= <expr><operator>new</operator> <call><name>RegularIncome</name><argument_list>(<argument><expr><name>ID</name></expr></argument> , <argument><expr><name>name</name></expr></argument> , <argument><expr><name>grossSalary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>employee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>createIntern</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>grossSalary</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>GPA</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>Employees</name></type> <name>employee</name> <init>= <expr><operator>new</operator> <call><name>Intern</name><argument_list>(<argument><expr><name>ID</name></expr></argument> , <argument><expr><name>name</name></expr></argument> , <argument><expr><name>grossSalary</name></expr></argument>, <argument><expr><name>GPA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>employee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>createDirector</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter> , <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter> , <parameter><decl><type><name>double</name></type> <name>grossSalary</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>education</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>department</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Employees</name></type> <name>employee</name> <init>= <expr><operator>new</operator> <call><name>Directors</name><argument_list>(<argument><expr><name>ID</name></expr></argument> , <argument><expr><name>name</name></expr></argument> , <argument><expr><name>grossSalary</name></expr></argument>, <argument><expr><name>education</name></expr></argument> , <argument><expr><name>department</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>employee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>createManger</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ID</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter> , <parameter><decl><type><name>double</name></type> <name>grossSalary</name></decl></parameter> , <parameter><decl><type><name>String</name></type> <name>education</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Employees</name></type> <name>employee</name> <init>= <expr><operator>new</operator> <call><name>Manager</name><argument_list>(<argument><expr><name>ID</name></expr></argument> , <argument><expr><name>name</name></expr></argument> , <argument><expr><name>grossSalary</name></expr></argument>, <argument><expr><name>education</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>employeelist</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>employee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>sortEmployee</name><parameter_list>()</parameter_list> <block>{ 
		<comment type="line">//Collections.sort(employeelist, Employees.getCompByName());</comment>
		<expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>employeelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>numberOfEmployees</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><call><name><name>employeelist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>


}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment3/ReusaxCorpMain.java" hash="2b2d65c3df6c255c5b6c64c7cc167870a262bb73"><package>package <name>assignment3</name>;</package>

<import>import static <name><name>dit042</name><operator>.</operator><name>SimpleIO</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>ReusaxCorpMain</name> <block>{
	
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>createEmployee</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>remove</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>printEmployeeInfo</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>printAllEmployeeInfo</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>updateEmployee</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>grossSalaries</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>netSalaries</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>numberOfEmployees</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>promotion</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>sortEmployee</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>Quit</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><specifier>private</specifier> <type><name>ReusaxCorp</name></type> <name>company</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>HRdipartment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>techdipartment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>businessdipartment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<constructor><specifier>public</specifier> <name>ReusaxCorpMain</name> <parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>company</name></name> <operator>=</operator> <operator>new</operator> <call><name>ReusaxCorp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ReusaxCorpMain</name></type> <name>program</name> <init>= <expr><operator>new</operator> <call><name>ReusaxCorpMain</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>program</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>answer</name></decl>;</decl_stmt>
		<do>do <block>{
			<expr_stmt><expr><call><name>mainMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the option that you want: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>answer</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
			<switch>switch <condition>(<expr><name>answer</name></expr>)</condition> <block>{
			
			<case>case <expr><name>createEmployee</name></expr>:</case>
				<expr_stmt><expr><call><name>createEmployee</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name>remove</name></expr>:</case>
				<expr_stmt><expr><call><name>Remove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			
			<case>case <expr><name>printEmployeeInfo</name></expr>:</case>
				<expr_stmt><expr><call><name>printEmployeeInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name>printAllEmployeeInfo</name></expr>:</case>
				<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><call><name><name>company</name><operator>.</operator><name>printAllEmployees</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			
			<case>case <expr><name>updateEmployee</name></expr>:</case>
				<expr_stmt><expr><call><name>updateEmployee</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			
				
			<case>case <expr><name>grossSalaries</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"the total gross salaries of all employees is: "</literal> <operator>+</operator> <call><name><name>company</name><operator>.</operator><name>grossSalaries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name>netSalaries</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"the total net salaries of all employees is: "</literal> <operator>+</operator> <call><name><name>company</name><operator>.</operator><name>netSalaries</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name>numberOfEmployees</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>company</name><operator>.</operator><name>numberOfEmployees</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name>promotion</name></expr>:</case>
				<expr_stmt><expr><call><name>promotion</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
				
			<case>case <expr><name>sortEmployee</name></expr>:</case>
				<expr_stmt><expr><call><name>sortEmployee</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
				
			<case>case <expr><name>Quit</name></expr>:</case> <break>break;</break>
			
			
			<default>default:</default>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Option "</literal><operator>+</operator> <name>answer</name> <operator>+</operator><literal type="string">" is not valid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			}</block></switch>
		}</block>
		while<condition>(<expr><name>answer</name> <operator>!=</operator> <literal type="number">11</literal></expr> )</condition>;</do><block>{
			<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Goodbye!!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>sortEmployee</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>sortEmployee</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//println(company.printAllEmployees());</comment>
	}</block></function>

	<function><specifier>private</specifier> <type><name>void</name></type> <name>promotion</name><parameter_list>()</parameter_list> <block>{
			<try>try<block>{
			<decl_stmt><decl><type><name>String</name></type> <name>ID</name> <init>= <expr><call><name>readEmployeeID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Employees</name></type> <name>foundEmployee</name> <init>= <expr><call><name><name>company</name><operator>.</operator><name>retriveEmployee</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		
			<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"what do you want to promote for: 1.Manager, 2.Director , 3.Intern , 4.Regular Employee."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>MANAGER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>DIRECTOR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>INTERN</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>REGULAREMPLOYEE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
			<switch>switch <condition>(<expr><name>ans</name></expr>)</condition> <block>{
			
				<case>case <expr><name>MANAGER</name></expr>:</case> 
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the education level of the manager: BSc , MSc , PhD : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>education</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>promotionToManager</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>, <argument><expr><name>education</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
					
				
				<case>case <expr><name>DIRECTOR</name></expr>:</case>
					
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the education level of the manager: BSc , MSc , PhD : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>education</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the department of the director: 1.Human Resources , 2.Technical , 3.Business: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>department</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><call><name><name>department</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"Human"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>HRdipartment</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>HRdipartment</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>promotionToDirector</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>, <argument><expr><name>education</name></expr></argument>, <argument><expr><name>department</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then>
					<elseif>else <if>if<condition>(<expr><call><name><name>department</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"Technical"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>techdipartment</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>techdipartment</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>promotionToDirector</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>, <argument><expr><name>education</name></expr></argument>, <argument><expr><name>department</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif>
					<elseif>else <if>if<condition>(<expr><call><name><name>department</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"Business"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>businessdipartment</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>businessdipartment</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>promotionToDirector</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>, <argument><expr><name>education</name></expr></argument>, <argument><expr><name>department</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif>
					<else>else <block>{
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>department</name> <operator>+</operator> <literal type="string">" is invalide or already has an director"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<break>break;</break>
					
					
				<case>case <expr><name>INTERN</name></expr>:</case>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the GPA of the intern: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>GPA</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>promotionToIntern</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>, <argument><expr><name>GPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
					
				<case>case <expr><name>REGULAREMPLOYEE</name></expr>:</case>	
					<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>promotionToRegularEmployee</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
			}</block></switch> }</block>
			<catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>Ex</name></decl></parameter>)</parameter_list> <block>{
				<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><call><name><name>Ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></catch></try>
		}</block></function>
		
	

	<function><specifier>public</specifier> <type><name>String</name></type> <name>readEmployeeID</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the ID: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>ID</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>ID</name></expr>;</return>
	}</block></function> 

	<function><specifier>public</specifier> <type><name>void</name></type> <name>updateEmployee</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>ID</name> <init>= <expr><call><name>readEmployeeID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Employees</name></type> <name>foundEmployee</name> <init>= <expr><call><name><name>company</name><operator>.</operator><name>retriveEmployee</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>foundEmployee</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
		
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"Please choose what you want to update: 1.Name, 2.grossSalary: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>NAME</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>GROSSSALARY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			
			<switch>switch <condition>(<expr><name>ans</name></expr>)</condition> <block>{
			
				<case>case <expr><name>NAME</name></expr>:</case>
					
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the new name: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>newName</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>setEmployeeName</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>, <argument><expr><name>newName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
					
					
				<case>case <expr><name>GROSSSALARY</name></expr>:</case>
					
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the new gross salary: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>double</name></type> <name>newGrossSalary</name> <init>= <expr><call><name>readDouble</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>setEmployeeGrossSalary</name></name><argument_list>(<argument><expr><name>foundEmployee</name></expr></argument>, <argument><expr><name>newGrossSalary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
					
			}</block></switch>
		}</block></then>
		
		<else>else <block>{
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"An employee of ID "</literal><operator>+</operator> <name>ID</name> <operator>+</operator><literal type="string">" is not registered in the system. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	
	}</block></function>
			
	<function><specifier>public</specifier> <type><name>void</name></type> <name>Remove</name><parameter_list>()</parameter_list> <block>{
		<try>try<block>{<decl_stmt><decl><type><name>String</name></type> <name>ID</name> <init>= <expr><call><name>readEmployeeID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>Remove</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block>
		<catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
		
	<function><specifier>private</specifier> <type><name>void</name></type> <name>mainMenu</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"==Welcome to ResaxCorp=="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"1.Register a new employee."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"2.Remove an employee."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"3.Retrieve an employee."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"4.Print all employees. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"5.Update the employee information."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"6.Calculate the total expenses in by paying gross salaries."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"7.Calculate the total expenses in by paying net salaries."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"8.Inform The Total Number of Employees Registered."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"9.Promote an employee."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"10.Sort the employees."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"11.Quit."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
		
	<function><specifier>public</specifier> <type><name>void</name></type> <name>printEmployeeInfo</name><parameter_list>()</parameter_list> <block>{
		<try>try<block>{<decl_stmt><decl><type><name>String</name></type> <name>ID</name> <init>= <expr><call><name>readEmployeeID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><call><name><name>company</name><operator>.</operator><name>printEmployee</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block>
		
		<catch>catch<parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><name>ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></catch></try>
	}</block></function>
		

		
	<function><specifier>public</specifier> <type><name>void</name></type> <name>createEmployee</name><parameter_list>()</parameter_list> <block>{
		
		<decl_stmt><decl><type><name>String</name></type> <name>ID</name> <init>= <expr><call><name>readEmployeeID</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Employees</name></type> <name>foundEmployee</name> <init>= <expr><call><name><name>company</name><operator>.</operator><name>retriveEmployee</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>foundEmployee</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"An employee of ID "</literal><operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" is already registered in the system. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		}</block></then>
		
		
		<else>else <block>{
			
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Enter the type of the employee; 1.Manager, 2.Director , 3.Intern , 4.Regular Employee."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the name of the employee:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the gross salary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>double</name></type> <name>grossSalary</name> <init>= <expr><call><name>readDouble</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			
			
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>MANAGER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>DIRECTOR</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>INTERN</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>REGULAREMPLOYEE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
			
			
				<switch>switch <condition>(<expr><name>ans</name></expr>)</condition> <block>{
			
				
				<case>case <expr><name>MANAGER</name></expr>:</case>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the education of the manager: BSc , MSc , PhD: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>education</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>createManger</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>grossSalary</name></expr></argument>, <argument><expr><name>education</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				
				<case>case <expr><name>DIRECTOR</name></expr>:</case>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the education level of the manager: BSc , MSc , PhD : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>education</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the department of the director: 1.Human Resources , 2.Technical , 3.Business: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>String</name></type> <name>department</name> <init>= <expr><call><name>readString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><call><name><name>department</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"Human"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>HRdipartment</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>HRdipartment</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>createDirector</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>grossSalary</name></expr></argument>, <argument><expr><name>education</name></expr></argument>, <argument><expr><name>department</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then>
					<elseif>else <if>if<condition>(<expr><call><name><name>department</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"Technical"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>techdipartment</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>techdipartment</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>createDirector</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>grossSalary</name></expr></argument>, <argument><expr><name>education</name></expr></argument>, <argument><expr><name>department</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif>
					<elseif>else <if>if<condition>(<expr><call><name><name>department</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"Business"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>businessdipartment</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>businessdipartment</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>createDirector</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>,<argument><expr><name>name</name></expr></argument>,<argument><expr><name>grossSalary</name></expr></argument>, <argument><expr><name>education</name></expr></argument>, <argument><expr><name>department</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif>
					<else>else <block>{
						<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>department</name> <operator>+</operator> <literal type="string">" is invalide or already has an director"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<break>break;</break>
				
				<case>case <expr><name>INTERN</name></expr>:</case>
					<try>try <block>{
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Enter the GPA of the intern: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>GPA</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>createIntern</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>grossSalary</name></expr></argument>, <argument><expr><name>GPA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>}</block>
					<catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></catch></try>
					
				<case>case <expr><name>REGULAREMPLOYEE</name></expr>:</case>
					<expr_stmt><expr><call><name><name>company</name><operator>.</operator><name>createRegulareEmployee</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>grossSalary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				
				}</block></switch>

			
		}</block></else></if>
		
	}</block></function>

}</block></class>

</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assigment/e.java" hash="067aa25453875d6c5d305642db1f3d4a14042e14"><package>package <name>assigment</name>;</package>
<import>import static <name><name>dit042</name><operator>.</operator><name>SimpleIO</name><operator>.</operator><name>*</name></name>;</import>
<import>import static <name><name>dit042</name><operator>.</operator><name>Random</name><operator>.</operator><name>*</name></name>;</import>
<class><specifier>public</specifier> class <name>e</name> <block>{

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>PlayOne</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name><name>old_array</name><index>[]</index><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>new_array</name><index>[]</index><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// TODO Auto-generated method stub</comment>
			<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Write the number of row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Write the number of columns"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Write how many generation you want to run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>gen</name> <init>= <expr><call><name>readInt</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>( <expr><name>x</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Board is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then>
			<elseif>else <if>if <condition>( <expr><name>x</name> <operator>!=</operator> <name>y</name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Board is not a rectangle."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return;</return>
			}</block></then></if></elseif>
			<else>else <block>{<decl_stmt><decl><type><name>char</name></type> <name><name>oldarray</name><index>[]</index><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>char</name> <index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"enter the line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>gen</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>X</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>X</name> <operator>&lt;</operator> <name>x</name></expr> ;</condition> <incr><expr><name>X</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>oldarray</name> <index>[<expr><name>X</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> <operator>=</operator> <call><name>readChar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>Y</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>Y</name> <operator>&lt;</operator> <name>y</name></expr> ;</condition> <incr><expr><name>Y</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><name><name>oldarray</name><index>[<expr><name>X</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></for>
			}</block></for>
				
			}</block></else></if>
		
	}</block></function>

}</block></class>
</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assignment2/GlobalEconomyMain.java" hash="29868fe94166053d473ecb78420784066349a694"><package>package <name>assignment2</name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Scanner</name></name>;</import>

<class><specifier>public</specifier> class <name>GlobalEconomyMain</name> <block>{
	
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REGISTER_COUNTRY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PRINT_COUNTRIES</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PRINT_COUNTRY</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INJECT_MONEY</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PAY_DEBT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CHANGE</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>QUIT</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

	
	<decl_stmt><decl><specifier>private</specifier> <type><name><name>Country</name><index>[]</index></name></type> <name>countries</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>registeredCountries</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>Scanner</name></type> <name>input</name></decl>;</decl_stmt>
	
	
	<comment type="line">// the size of the array is 5</comment>
	<constructor><specifier>public</specifier> <name>GlobalEconomyMain</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>MAX_COUNTRIES</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>countries</name></name> <operator>=</operator> <operator>new</operator> <name><name>Country</name><index>[<expr><name>MAX_COUNTRIES</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>registeredCountries</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>input</name> <operator>=</operator> <operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	
	<comment type="line">// retrieve the country name every time before executing the any methods</comment>
	<function><specifier>public</specifier>  <type><name>Country</name></type> <name>retrieveCountry</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>countryName</name></decl></parameter>)</parameter_list> <block>{ 
		<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  						<comment type="line">// used this way to print just ERROR massage one time and wait the FOR loop to go all over the array before printing ERROR</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>this</name><operator>.</operator><name>registeredCountries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>countryName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<return>return <expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
			}</block></then>
			<elseif>else <if>if<condition>(<expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>countryName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if></elseif></if>
		}</block></for>
		<if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ERROR! "</literal><operator>+</operator> <name>countryName</name> <operator>+</operator> <literal type="string">" name does not exist!!!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>Country</name></type> <name>createCountry</name><parameter_list>()</parameter_list> <block>{		
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the name of the country: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>Scanner</name></type> <name>input</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name> <argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the number of GDP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>double</name></type> <name>gdp</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextDouble</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the population"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>double</name></type> <name>population</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextDouble</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>Country</name></type> <name>newCountry</name> <init>= <expr><operator>new</operator> <call><name>Country</name> <argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>gdp</name></expr></argument>,<argument><expr><name>population</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<return>return <expr><name>newCountry</name></expr>;</return>
	}</block></function>	
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
		
		<decl_stmt><decl><type><name>int</name></type> <name>option</name></decl>;</decl_stmt>
		<do>do <block>{
			<expr_stmt><expr><call><name>printMenuOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">" Type the option number: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>option</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">//this skips the enter </comment>
							  <comment type="line">//that the user types after </comment>
							  <comment type="line">//typing the integer option.</comment>
			
			<switch>switch <condition>(<expr><name>option</name></expr>)</condition> <block>{
			<case>case <expr><name>REGISTER_COUNTRY</name></expr>:</case>
				
				<decl_stmt><decl><type><name>Country</name></type> <name>newCountry</name> <init>= <expr><call><name>createCountry</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>this</name><operator>.</operator><name>countries</name><index>[<expr><name>registeredCountries</name></expr>]</index></name> <operator>=</operator> <name>newCountry</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>this</name><operator>.</operator><name>registeredCountries</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>registeredCountries</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				
				<break>break;</break>
	
			<case>case <expr><name>PRINT_COUNTRIES</name></expr>:</case>
				<expr_stmt><expr><call><name>printAllCountries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
	
			<case>case <expr><name>PRINT_COUNTRY</name></expr>:</case>
				<expr_stmt><expr><call><name>printOneCountry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>				
				<break>break;</break>
	
			<case>case <expr><name>INJECT_MONEY</name></expr>:</case>
				<expr_stmt><expr><call><name>injectMoney</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
	
			<case>case <expr><name>PAY_DEBT</name></expr>:</case>
				<expr_stmt><expr><call><name>payDebt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
	
			<case>case <expr><name>CHANGE</name></expr>:</case>
				<expr_stmt><expr><call><name>change</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<case>case <expr><name>QUIT</name></expr>:</case>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Thank you for using Global Economy Solutions. See you soon!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				
			<default>default:</default>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Option "</literal><operator>+</operator><name>option</name><operator>+</operator><literal type="string">" is not valid."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></switch>
		}</block> while <condition>(<expr><name>option</name> <operator>!=</operator> <name>QUIT</name></expr>)</condition>;</do>
	}</block></function>

	<comment type="line">//This method is private because it should be used only by</comment>
	<comment type="line">// this class since the menu is specific to this main.</comment>
	<function><specifier>private</specifier> <type><name>void</name></type> <name>printMenuOptions</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" === Welcome to Global Economy === "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" Choose an option below: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 1. Register a country. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 2. Print all countries. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 3. Print a country's information. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 4. Inject money to a country. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 5. Pay a country's debt. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 6. Make a change. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">" 7. Quit this program. "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>printAllCountries</name><parameter_list>()</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>this</name><operator>.</operator><name>countries</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name><name>countries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>printOneCountry</name><parameter_list>()</parameter_list> <block>{		
		<decl_stmt><decl><type><name>String</name></type> <name>countryName</name> <init>= <expr><call><name>readCountryName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Country</name></type> <name>foundCountry</name> <init>= <expr><call><name>retrieveCountry</name><argument_list>(<argument><expr><name>countryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>foundCountry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>foundCountry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return>return;</return>
		
		
	}</block></function>

	
	<function><specifier>public</specifier> <type><name>String</name></type> <name>readCountryName</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"Type the name of the country that you want to use: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>String</name></type> <name>countryName</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>countryName</name></expr>;</return>
	}</block></function>

	<comment type="line">// injecting money to the countries GDP</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>injectMoney</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>countryName</name> <init>= <expr><call><name>readCountryName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>		
		<decl_stmt><decl><type><name>Country</name></type> <name>foundCountry</name> <init>= <expr><call><name>retrieveCountry</name><argument_list>(<argument><expr><name>countryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>foundCountry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{		<comment type="line">// to prevent program from running if the country does not exist</comment>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the amount: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>Scanner</name></type> <name>input</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name> <argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>double</name></type> <name>amount</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextDouble</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>foundCountry</name><operator>.</operator><name>economyInjection</name></name><argument_list>(<argument><expr><name>amount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
		
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>change</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>countryName</name> <init>= <expr><call><name>readCountryName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Country</name></type> <name>foundCountry</name> <init>= <expr><call><name>retrieveCountry</name><argument_list>(<argument><expr><name>countryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>foundCountry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{		<comment type="line">// to prevent program from running if the country does not exist</comment>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"To change the name of the country press \"1\"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"To change the population press \"2\"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>Scanner</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>number</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>number</name> <operator>==</operator><literal type="number">1</literal></expr> )</condition><then> <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the new name: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>Scanner</name></type> <name>inputs</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name> <argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>String</name></type> <name>newname</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>foundCountry</name><operator>.</operator><name>changeCoutryName</name></name><argument_list>(<argument><expr><name>newname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
				
		
			}</block></then> 
			<else>else <block>{
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the population: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>Scanner</name></type> <name>inputs</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name> <argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>double</name></type> <name>newpopulation</name> <init>= <expr><call><name><name>inputs</name><operator>.</operator><name>nextDouble</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>foundCountry</name><operator>.</operator><name>changePopulation</name></name><argument_list>(<argument><expr><name>newpopulation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				
			}</block></else></if>
		}</block></then></if>
	}</block></function>
	
	<function><specifier>public</specifier> <type><name>void</name></type> <name>payDebt</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><name>String</name></type> <name>countryName</name> <init>= <expr><call><name>readCountryName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>		
		<decl_stmt><decl><type><name>Country</name></type> <name>foundCountry</name> <init>= <expr><call><name>retrieveCountry</name><argument_list>(<argument><expr><name>countryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>foundCountry</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{ 			<comment type="line">// to prevent program from running if the country does not exist</comment>
				<expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Enter the amount that you want to pay: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>Scanner</name></type> <name>input</name> <init>= <expr><operator>new</operator> <call><name>Scanner</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>double</name></type> <name>pay</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>nextDouble</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>foundCountry</name><operator>.</operator><name>payDebts</name></name><argument_list>(<argument><expr><name>pay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		
	}</block></function>
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>GlobalEconomyMain</name></type> <name>program</name> <init>= <expr><operator>new</operator> <call><name>GlobalEconomyMain</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>program</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>

	


</unit>

<unit revision="0.9.5" language="Java" filename="home/george/DistributedSystemsProject/resources/Georgesarkis_DIT042-ObjectOrientedProgramming/src/assigment/Assignment.java" hash="8d4faa66923085b51e5445e79a6a4eefc541d847"><package>package <name>assigment</name>;</package>

<import>import static <name><name>dit042</name><operator>.</operator><name>SimpleIO</name><operator>.</operator><name>*</name></name>;</import>


<comment type="block" format="javadoc">/**
 *  String Library. The program implements a set of string operators.
 *  @author Daniel Jansson &lt;jansson215@gmail.com&gt;
 *  @author Sarkis George Sarkisian &lt;sakogeorge@gmail.com&gt;
 *  @date 2017-09-08
 */</comment>


<class><specifier>public</specifier> class <name>Assignment</name> <block>{

	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>char</name></type> <name>A</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Choice input</comment>
		<decl_stmt><decl><type><name>String</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt> <comment type="line">// Input strings</comment>
		
		<comment type="line">// Displays main logo</comment>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"******************************\r\n"</literal> <operator>+</operator> 
				<literal type="string">"**                          **\r\n"</literal> <operator>+</operator> 
				<literal type="string">"**   Welcome to the DIT042  **\r\n"</literal> <operator>+</operator> 
				<literal type="string">"**       String Library     **\r\n"</literal> <operator>+</operator> 
				<literal type="string">"**                          **\r\n"</literal> <operator>+</operator> 
				<literal type="string">"******************************"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
		<while>while <condition>(<expr><name>A</name> <operator>!=</operator> <literal type="char">'q'</literal></expr>)</condition> <block>{ <comment type="line">// Main event loop</comment>
			
			<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Please choose a String operation or press 'q' to quit:\r\n"</literal> <operator>+</operator> 
				<literal type="string">"Press c for concatenation\r\n"</literal> <operator>+</operator> 
				<literal type="string">"Press e for equals\r\n"</literal> <operator>+</operator> 
				<literal type="string">"Press s for substring\r\n"</literal> <operator>+</operator> 
				<literal type="string">"Press t for trim\r\n"</literal> <operator>+</operator> 
				<literal type="string">"Press l for lastIndexOf\r\n"</literal> <operator>+</operator> 
				<literal type="string">"Press h for contains"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>readChar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			
			<switch>switch <condition>(<expr><name>A</name></expr>)</condition> <block>{
			
				<comment type="block">/* String operator concatenation - adds two strings together. */</comment>
			<case>case <expr><literal type="char">'c'</literal></expr>:</case> <block>{		<comment type="line">// Concatenation</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"please enter the first string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"please enter the secound string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
					<expr_stmt><expr><name>result</name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
					<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <call><name><name>s2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control> <block>{
						<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name><name>s2</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></for>
					<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"\nThe result of concatenating "</literal> <operator>+</operator><name>s1</name> <operator>+</operator> <literal type="string">" and "</literal><operator>+</operator> <name>s2</name> <operator>+</operator> <literal type="string">" is: "</literal> <operator>+</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				}</block>
				
			<comment type="block">/* String operator equals - compares to strings and returns result as a boolean */</comment> 
			<case>case <expr><literal type="char">'e'</literal></expr>:</case> <block>{	
					<decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Initialize result</comment>
					
					<comment type="line">// Prompt user to enter two strings.</comment>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"please enter the first string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"please enter the secound string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line">// If string length are the same, each characters are compared in the for loop.</comment>
					<if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>s2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
						<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control>
							<block type="pseudo"><if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>s2</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
								<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> <comment type="line">// Set result to false if characters don't match</comment>
								<break>break;</break>
							}</block></then></if></block></for>
					}</block></then>
					<else>else <block>{
						<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
					}</block></else></if>
					
					<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"\nThe result of comparing "</literal> <operator>+</operator> <name>s1</name> <operator>+</operator> <literal type="string">" and "</literal> <operator>+</operator> <name>s2</name> <operator>+</operator> <literal type="string">" is: "</literal> <operator>+</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				}</block>
				
			<comment type="block">/* String operator substring - returns the substring within a string. */</comment>
			<case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{ 	
					<comment type="line">// Variables</comment>
					<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl> , <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <comment type="line">// first and second index</comment>
					<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> <comment type="line">// result string</comment>
					
					<comment type="line">// Prompt the user for a string and indexes for the substring.</comment>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"please enter the string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"please enter the first index: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"please enter the secound index: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>readInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>x</name> <operator>&gt;</operator> <name>y</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"ERROR!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
					}</block></then>
					<comment type="line">// For loop that iterates thru the input string and appends character</comment>
					<comment type="line">//  by character to the output if the char is within given index.</comment>
					<else>else<block>{<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>count</name> <operator>&lt;</operator> <name>y</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name><name>s1</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then></if>
					}</block></for>
					<comment type="line">// Print the result to console</comment>
					<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"\nThe resulting substring is: "</literal> <operator>+</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				}</block></else></if>
			}</block>
			
			<comment type="line">// String operator trim - removes spaces from string		</comment>
			<case>case <expr><literal type="char">'t'</literal></expr>:</case> <block>{ 		
					<decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt> <comment type="line">// results</comment>
					
					<comment type="line">//Prompt user for a string</comment>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"Please enter a sentence to trim: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>readLine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line">// Iterates thru string and append each char to new if not char is a space</comment>
					<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>!=</operator>  <literal type="char">' '</literal></expr> )</condition><then> <block>{
							<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name><name>s1</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							
						}</block></then></if>
					}</block></for>
					
					<comment type="line">// Print result to console</comment>
					<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"The resulting trimmed sentence is: "</literal> <operator>+</operator> <name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				}</block>
	
			<comment type="block">/* String operator last index of - returns the last index of a chosen character */</comment>
			<case>case <expr><literal type="char">'l'</literal></expr>:</case> <block>{
					<comment type="line">// Variables</comment>
					<decl_stmt><decl><type><name>int</name></type> <name>lastIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 				<comment type="line">// index</comment>
					<decl_stmt><decl><type><name>boolean</name></type> <name>contains</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>		<comment type="line">// contains (will be true if the input string contains the character)</comment>
					<decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt>							<comment type="line">// character</comment>
					
					<comment type="line">// Prompt user for a string and a character.</comment>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"please enter the first string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"please enter a character: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>readChar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line">// Iterates thru given string and saves last index of the character if found.</comment>
					<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control> <block>{
						<if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>x</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name>lastIndex</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
							<expr_stmt><expr><name>contains</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
						}</block></then></if>
					}</block></for>
					
					<comment type="line">// Print out result to console</comment>
					<if>if <condition>(<expr><name>contains</name></expr>)</condition><then><block>{ <comment type="line">// executed if character is in string.</comment>
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"\nThe index of character "</literal> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="string">" in string "</literal> <operator>+</operator> <name>s1</name> <operator>+</operator> <literal type="string">" is: "</literal> <operator>+</operator> <name>lastIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else>else <block>{ <comment type="line">// executed if character is not in string.</comment>
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"\nThe string: "</literal> <operator>+</operator> <name>s1</name> <operator>+</operator> <literal type="string">" does not contain the character: "</literal> <operator>+</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<break>break;</break>
				}</block>
					
			
				<comment type="block">/* String operator contains - compare if one string contains another string. */</comment>
				<case>case <expr><literal type="char">'h'</literal></expr>:</case> <block>{
					<decl_stmt><decl><type><name>boolean</name></type> <name>result</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt> <comment type="line">// result</comment>
					
					<comment type="line">// Prompt user for two strings</comment>
					<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"please enter the first string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"please enter the secound string: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>readString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					
					<comment type="line">// Compares char by char if the length of first string equals or longer to the second string</comment>
					<if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <call><name><name>s2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
						<for>for <control>(<init><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>count</name> <operator>++</operator></expr></incr>)</control> <block>{
								<if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>s2</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
									<for>for <control>(<init><decl><type><name>int</name></type> <name>count2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>count2</name> <operator>&lt;</operator> <call><name><name>s2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>count2</name><operator>++</operator></expr></incr>)</control><block>{
										<if>if <condition>(<expr><call><name><name>s1</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>count</name> <operator>+</operator> <name>count2</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>s2</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>count2</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
											<if>if <condition>(<expr><name>count2</name> <operator>==</operator> <call><name><name>s2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{ 
												<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
											}</block></then></if>
										}</block></then></if>								
									}</block></for>
								}</block></then></if>
							}</block></for>
						}</block></then></if>
					<comment type="line">// Print results to console</comment>
					<if>if <condition>(<expr><name>result</name></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"\nThe string '"</literal> <operator>+</operator> <name>s1</name> <operator>+</operator> <literal type="string">"' does contain the string '"</literal> <operator>+</operator> <name>s2</name> <operator>+</operator> <literal type="string">"'."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else>else <block>{
						<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"\nThe string '"</literal> <operator>+</operator> <name>s1</name> <operator>+</operator> <literal type="string">"' does not contain the string '"</literal> <operator>+</operator> <name>s2</name> <operator>+</operator> <literal type="string">"'."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
					<break>break;</break>
				}</block>
				
			
			
			
			<case>case <expr><literal type="char">'q'</literal></expr>:</case> <block>{ <comment type="line">// quit program</comment>
				<break>break;</break>
				}</block>
			
					
			<default>default:</default> <block>{<comment type="line">// If none of the valid input's where met. </comment>
				<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"This is not a valid choice. Please retry!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
				}</block>
			}</block></switch>
			
			
			<comment type="block">/* Program end, ask user to quit or continue.
			 * Will not show if 'q' has been pressed for quit.
			 */</comment>
			<if>if <condition>(<expr><name>A</name> <operator>!=</operator> <literal type="char">'q'</literal></expr>)</condition><then><block>{ 
				<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"\nType 'q' to quit program, otherwise press enter to continue."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>readChar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				
			}</block></then></if>
			
		}</block></while>
		
		<comment type="line">// Print goodbye to console when exiting program.</comment>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><literal type="string">"Thanks! Goodbye."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
	}</block></function>
}</block></class></unit>

</unit>
